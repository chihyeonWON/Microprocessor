
Pjt12_ADC_TC1047.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800200  00002926  000029ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000141  00800414  00800414  00002bce  2**0
                  ALLOC
  3 .stab         00001314  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000492  00000000  00000000  00003ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004d0  00000000  00000000  00004378  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cd0  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002500  00000000  00000000  00009518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025d2  00000000  00000000  0000ba18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c98  00000000  00000000  0000dfec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c53  00000000  00000000  0000ec84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000342e  00000000  00000000  0000f8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00012d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_15>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_25>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_27>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_29>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      bc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      cc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      dc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      e0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	14 e0       	ldi	r17, 0x04	; 4
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	e6 e2       	ldi	r30, 0x26	; 38
     108:	f9 e2       	ldi	r31, 0x29	; 41
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a4 31       	cpi	r26, 0x14	; 20
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
     11a:	1b be       	out	0x3b, r1	; 59

0000011c <__do_clear_bss>:
     11c:	15 e0       	ldi	r17, 0x05	; 5
     11e:	a4 e1       	ldi	r26, 0x14	; 20
     120:	b4 e0       	ldi	r27, 0x04	; 4
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a5 35       	cpi	r26, 0x55	; 85
     128:	b1 07       	cpc	r27, r17
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 99 0b 	call	0x1732	; 0x1732 <main>
     130:	0c 94 91 14 	jmp	0x2922	; 0x2922 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <is_prime>:
#include "app.h"
#include "linkedlist.h"
#include "timerlinkedlist.h"

int is_prime(int n)
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
	int i; 
	for(i = 2; i<= n/2; i++)
     13e:	62 e0       	ldi	r22, 0x02	; 2
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     146:	eb 01       	movw	r28, r22
     148:	22 e0       	ldi	r18, 0x02	; 2
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	08 c0       	rjmp	.+16     	; 0x15e <is_prime+0x26>
		if ((n%i) == 0)
     14e:	cf 01       	movw	r24, r30
     150:	b9 01       	movw	r22, r18
     152:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     156:	00 97       	sbiw	r24, 0x00	; 0
     158:	41 f0       	breq	.+16     	; 0x16a <is_prime+0x32>
#include "timerlinkedlist.h"

int is_prime(int n)
{
	int i; 
	for(i = 2; i<= n/2; i++)
     15a:	2f 5f       	subi	r18, 0xFF	; 255
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	c2 17       	cp	r28, r18
     160:	d3 07       	cpc	r29, r19
     162:	ac f7       	brge	.-22     	; 0x14e <is_prime+0x16>
		if ((n%i) == 0)
			return(0);
	return (1);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 c0       	rjmp	.+4      	; 0x16e <is_prime+0x36>
int is_prime(int n)
{
	int i; 
	for(i = 2; i<= n/2; i++)
		if ((n%i) == 0)
			return(0);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <task_prime>:

void task_prime(char *ap)
{
     174:	cf 92       	push	r12
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
     184:	00 97       	sbiw	r24, 0x00	; 0
     186:	41 f0       	breq	.+16     	; 0x198 <task_prime+0x24>
     188:	fc 01       	movw	r30, r24
     18a:	20 81       	ld	r18, Z
     18c:	22 23       	and	r18, r18
     18e:	21 f0       	breq	.+8      	; 0x198 <task_prime+0x24>
     190:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <atoi>
     194:	8c 01       	movw	r16, r24
     196:	02 c0       	rjmp	.+4      	; 0x19c <task_prime+0x28>
	return (1);
}

void task_prime(char *ap)
{
	int n, t = 2000, count = 0;
     198:	00 ed       	ldi	r16, 0xD0	; 208
     19a:	17 e0       	ldi	r17, 0x07	; 7
     19c:	ee 24       	eor	r14, r14
     19e:	ff 24       	eor	r15, r15
	if(ap && *ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     1a0:	c2 e0       	ldi	r28, 0x02	; 2
     1a2:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	c8 2e       	mov	r12, r24
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	d8 2e       	mov	r13, r24

void task_prime(char *ap)
{
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     1ac:	17 c0       	rjmp	.+46     	; 0x1dc <task_prime+0x68>
		if(is_prime(n)) {
     1ae:	ce 01       	movw	r24, r28
     1b0:	0e 94 9c 00 	call	0x138	; 0x138 <is_prime>
     1b4:	00 97       	sbiw	r24, 0x00	; 0
     1b6:	89 f0       	breq	.+34     	; 0x1da <task_prime+0x66>
			count++;
     1b8:	08 94       	sec
     1ba:	e1 1c       	adc	r14, r1
     1bc:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!!\n", n);
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <task_prime+0x4c>
     1c0:	0f 92       	push	r0
     1c2:	ed b7       	in	r30, 0x3d	; 61
     1c4:	fe b7       	in	r31, 0x3e	; 62
     1c6:	d2 82       	std	Z+2, r13	; 0x02
     1c8:	c1 82       	std	Z+1, r12	; 0x01
     1ca:	d4 83       	std	Z+4, r29	; 0x04
     1cc:	c3 83       	std	Z+3, r28	; 0x03
     1ce:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0

void task_prime(char *ap)
{
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     1da:	21 96       	adiw	r28, 0x01	; 1
     1dc:	0c 17       	cp	r16, r28
     1de:	1d 07       	cpc	r17, r29
     1e0:	34 f7       	brge	.-52     	; 0x1ae <task_prime+0x3a>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <task_prime+0x70>
     1e4:	0f 92       	push	r0
     1e6:	8a e1       	ldi	r24, 0x1A	; 26
     1e8:	92 e0       	ldi	r25, 0x02	; 2
     1ea:	ed b7       	in	r30, 0x3d	; 61
     1ec:	fe b7       	in	r31, 0x3e	; 62
     1ee:	92 83       	std	Z+2, r25	; 0x02
     1f0:	81 83       	std	Z+1, r24	; 0x01
     1f2:	f4 82       	std	Z+4, r15	; 0x04
     1f4:	e3 82       	std	Z+3, r14	; 0x03
     1f6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <app_prime>:


void app_prime(char *ap)
{
     214:	cf 92       	push	r12
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	21 f0       	breq	.+8      	; 0x230 <app_prime+0x1c>
     228:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <atoi>
     22c:	7c 01       	movw	r14, r24
     22e:	04 c0       	rjmp	.+8      	; 0x238 <app_prime+0x24>
}


void app_prime(char *ap)
{
	int t = 2000, n, count = 0;
     230:	20 ed       	ldi	r18, 0xD0	; 208
     232:	e2 2e       	mov	r14, r18
     234:	27 e0       	ldi	r18, 0x07	; 7
     236:	f2 2e       	mov	r15, r18
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	10 e0       	ldi	r17, 0x00	; 0
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     23c:	c2 e0       	ldi	r28, 0x02	; 2
     23e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(is_prime(n))
		{
			count++;
			printf("%d is a prime number!\n", n);
     240:	94 e2       	ldi	r25, 0x24	; 36
     242:	c9 2e       	mov	r12, r25
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	d9 2e       	mov	r13, r25
{
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     248:	16 c0       	rjmp	.+44     	; 0x276 <app_prime+0x62>
	{
		if(is_prime(n))
     24a:	ce 01       	movw	r24, r28
     24c:	0e 94 9c 00 	call	0x138	; 0x138 <is_prime>
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	81 f0       	breq	.+32     	; 0x274 <app_prime+0x60>
		{
			count++;
     254:	0f 5f       	subi	r16, 0xFF	; 255
     256:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!\n", n);
     258:	00 d0       	rcall	.+0      	; 0x25a <app_prime+0x46>
     25a:	0f 92       	push	r0
     25c:	ed b7       	in	r30, 0x3d	; 61
     25e:	fe b7       	in	r31, 0x3e	; 62
     260:	d2 82       	std	Z+2, r13	; 0x02
     262:	c1 82       	std	Z+1, r12	; 0x01
     264:	d4 83       	std	Z+4, r29	; 0x04
     266:	c3 83       	std	Z+3, r28	; 0x03
     268:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
{
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     274:	21 96       	adiw	r28, 0x01	; 1
     276:	ec 16       	cp	r14, r28
     278:	fd 06       	cpc	r15, r29
     27a:	3c f7       	brge	.-50     	; 0x24a <app_prime+0x36>
		{
			count++;
			printf("%d is a prime number!\n", n);
		}
	}
	printf("count = %d\n", count);
     27c:	00 d0       	rcall	.+0      	; 0x27e <app_prime+0x6a>
     27e:	0f 92       	push	r0
     280:	8b e3       	ldi	r24, 0x3B	; 59
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	ed b7       	in	r30, 0x3d	; 61
     286:	fe b7       	in	r31, 0x3e	; 62
     288:	92 83       	std	Z+2, r25	; 0x02
     28a:	81 83       	std	Z+1, r24	; 0x01
     28c:	14 83       	std	Z+4, r17	; 0x04
     28e:	03 83       	std	Z+3, r16	; 0x03
     290:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	08 95       	ret

000002ae <app_list>:

void app_list(char *ap)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	28 97       	sbiw	r28, 0x08	; 8
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	19 f0       	breq	.+6      	; 0x2d2 <app_list+0x24>
     2cc:	fc 01       	movw	r30, r24
     2ce:	10 81       	ld	r17, Z
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <app_list+0x26>
	printf("count = %d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     2d2:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     2d4:	37 e4       	ldi	r19, 0x47	; 71
     2d6:	e3 2e       	mov	r14, r19
     2d8:	32 e0       	ldi	r19, 0x02	; 2
     2da:	f3 2e       	mov	r15, r19
     2dc:	0f 92       	push	r0
     2de:	0f 92       	push	r0
     2e0:	ed b7       	in	r30, 0x3d	; 61
     2e2:	fe b7       	in	r31, 0x3e	; 62
     2e4:	f2 82       	std	Z+2, r15	; 0x02
     2e6:	e1 82       	std	Z+1, r14	; 0x01
     2e8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
		if(fgets(buf, 8, stdin) == NULL)
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	40 91 4f 05 	lds	r20, 0x054F
     2f4:	50 91 50 05 	lds	r21, 0x0550
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	68 e0       	ldi	r22, 0x08	; 8
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <fgets>
     304:	00 97       	sbiw	r24, 0x00	; 0
     306:	c9 f0       	breq	.+50     	; 0x33a <app_list+0x8c>
			break;
		np = get_node();
     308:	0e 94 b3 03 	call	0x766	; 0x766 <get_node>
		np->data = buf[0];
     30c:	29 81       	ldd	r18, Y+1	; 0x01
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
     312:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     314:	18 36       	cpi	r17, 0x68	; 104
     316:	29 f0       	breq	.+10     	; 0x322 <app_list+0x74>
     318:	14 37       	cpi	r17, 0x74	; 116
     31a:	31 f0       	breq	.+12     	; 0x328 <app_list+0x7a>
     31c:	14 36       	cpi	r17, 0x64	; 100
     31e:	51 f4       	brne	.+20     	; 0x334 <app_list+0x86>
     320:	06 c0       	rjmp	.+12     	; 0x32e <app_list+0x80>
			case 'h' : insert_node_head(np); break;
     322:	0e 94 bb 03 	call	0x776	; 0x776 <insert_node_head>
     326:	da cf       	rjmp	.-76     	; 0x2dc <app_list+0x2e>
			case 't' : insert_node_tail(np); break;
     328:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <insert_node_tail>
     32c:	d7 cf       	rjmp	.-82     	; 0x2dc <app_list+0x2e>
			case 'd' : insert_node_desc(np); break;		
     32e:	0e 94 1e 04 	call	0x83c	; 0x83c <insert_node_desc>
     332:	d4 cf       	rjmp	.-88     	; 0x2dc <app_list+0x2e>
			default : insert_node_ascn(np);
     334:	0e 94 e7 03 	call	0x7ce	; 0x7ce <insert_node_ascn>
     338:	d1 cf       	rjmp	.-94     	; 0x2dc <app_list+0x2e>
		}
	}
	tour_list();
     33a:	0e 94 55 04 	call	0x8aa	; 0x8aa <tour_list>
	free_list();
     33e:	0e 94 82 04 	call	0x904	; 0x904 <free_list>
}
     342:	28 96       	adiw	r28, 0x08	; 8
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	08 95       	ret

0000035a <app_timer>:

void app_timer(char *ap)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	62 97       	sbiw	r28, 0x12	; 18
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     372:	0a e4       	ldi	r16, 0x4A	; 74
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	0f 92       	push	r0
     378:	0f 92       	push	r0
     37a:	ed b7       	in	r30, 0x3d	; 61
     37c:	fe b7       	in	r31, 0x3e	; 62
     37e:	12 83       	std	Z+2, r17	; 0x02
     380:	01 83       	std	Z+1, r16	; 0x01
     382:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	40 91 4f 05 	lds	r20, 0x054F
     38e:	50 91 50 05 	lds	r21, 0x0550
     392:	ce 01       	movw	r24, r28
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	68 e0       	ldi	r22, 0x08	; 8
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <fgets>
     39e:	00 97       	sbiw	r24, 0x00	; 0
     3a0:	61 f0       	breq	.+24     	; 0x3ba <app_timer+0x60>
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <atoi>
     3aa:	bc 01       	movw	r22, r24
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	29 f0       	breq	.+10     	; 0x3ba <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     3b0:	ce 01       	movw	r24, r28
     3b2:	09 96       	adiw	r24, 0x09	; 9
     3b4:	0e 94 2c 07 	call	0xe58	; 0xe58 <insert_timer>
	}
     3b8:	de cf       	rjmp	.-68     	; 0x376 <app_timer+0x1c>
	tour_timer();
     3ba:	0e 94 d4 06 	call	0xda8	; 0xda8 <tour_timer>
	free_timer();
     3be:	0e 94 16 07 	call	0xe2c	; 0xe2c <free_timer>
}
     3c2:	62 96       	adiw	r28, 0x12	; 18
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret

000003d8 <app_cal>:

void app_cal(char *ap)
{
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	00 d0       	rcall	.+0      	; 0x3de <app_cal+0x6>
     3de:	0f 92       	push	r0
     3e0:	0f 92       	push	r0
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
	int x;
	int y;
	char c;
	sscanf(ap, "%d%c%d", &x, &c, &y);
     3e6:	2d b7       	in	r18, 0x3d	; 61
     3e8:	3e b7       	in	r19, 0x3e	; 62
     3ea:	2a 50       	subi	r18, 0x0A	; 10
     3ec:	30 40       	sbci	r19, 0x00	; 0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	3e bf       	out	0x3e, r19	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	2d bf       	out	0x3d, r18	; 61
     3f8:	ed b7       	in	r30, 0x3d	; 61
     3fa:	fe b7       	in	r31, 0x3e	; 62
     3fc:	31 96       	adiw	r30, 0x01	; 1
     3fe:	ad b7       	in	r26, 0x3d	; 61
     400:	be b7       	in	r27, 0x3e	; 62
     402:	12 96       	adiw	r26, 0x02	; 2
     404:	9c 93       	st	X, r25
     406:	8e 93       	st	-X, r24
     408:	11 97       	sbiw	r26, 0x01	; 1
     40a:	8e e4       	ldi	r24, 0x4E	; 78
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	93 83       	std	Z+3, r25	; 0x03
     410:	82 83       	std	Z+2, r24	; 0x02
     412:	ce 01       	movw	r24, r28
     414:	04 96       	adiw	r24, 0x04	; 4
     416:	95 83       	std	Z+5, r25	; 0x05
     418:	84 83       	std	Z+4, r24	; 0x04
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	97 83       	std	Z+7, r25	; 0x07
     420:	86 83       	std	Z+6, r24	; 0x06
     422:	ce 01       	movw	r24, r28
     424:	02 96       	adiw	r24, 0x02	; 2
     426:	91 87       	std	Z+9, r25	; 0x09
     428:	80 87       	std	Z+8, r24	; 0x08
     42a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <sscanf>
	if(c == '+') printf("%d", x + y);
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	ed b7       	in	r30, 0x3d	; 61
     432:	fe b7       	in	r31, 0x3e	; 62
     434:	3a 96       	adiw	r30, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	fe bf       	out	0x3e, r31	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	ed bf       	out	0x3d, r30	; 61
     440:	8b 32       	cpi	r24, 0x2B	; 43
     442:	89 f4       	brne	.+34     	; 0x466 <app_cal+0x8e>
     444:	00 d0       	rcall	.+0      	; 0x446 <app_cal+0x6e>
     446:	0f 92       	push	r0
     448:	85 e5       	ldi	r24, 0x55	; 85
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	ad b7       	in	r26, 0x3d	; 61
     44e:	be b7       	in	r27, 0x3e	; 62
     450:	12 96       	adiw	r26, 0x02	; 2
     452:	9c 93       	st	X, r25
     454:	8e 93       	st	-X, r24
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	2a 81       	ldd	r18, Y+2	; 0x02
     45e:	3b 81       	ldd	r19, Y+3	; 0x03
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	41 c0       	rjmp	.+130    	; 0x4e8 <app_cal+0x110>
	else if(c == '-') printf("%d", x-y);
     466:	8d 32       	cpi	r24, 0x2D	; 45
     468:	89 f4       	brne	.+34     	; 0x48c <app_cal+0xb4>
     46a:	00 d0       	rcall	.+0      	; 0x46c <app_cal+0x94>
     46c:	0f 92       	push	r0
     46e:	85 e5       	ldi	r24, 0x55	; 85
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	ed b7       	in	r30, 0x3d	; 61
     474:	fe b7       	in	r31, 0x3e	; 62
     476:	92 83       	std	Z+2, r25	; 0x02
     478:	81 83       	std	Z+1, r24	; 0x01
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	2a 81       	ldd	r18, Y+2	; 0x02
     480:	3b 81       	ldd	r19, Y+3	; 0x03
     482:	82 1b       	sub	r24, r18
     484:	93 0b       	sbc	r25, r19
     486:	94 83       	std	Z+4, r25	; 0x04
     488:	83 83       	std	Z+3, r24	; 0x03
     48a:	32 c0       	rjmp	.+100    	; 0x4f0 <app_cal+0x118>
	else if(c == '/') printf("%d", x/y);
     48c:	8f 32       	cpi	r24, 0x2F	; 47
     48e:	a9 f4       	brne	.+42     	; 0x4ba <app_cal+0xe2>
     490:	00 d0       	rcall	.+0      	; 0x492 <app_cal+0xba>
     492:	0f 92       	push	r0
     494:	85 e5       	ldi	r24, 0x55	; 85
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	ad b7       	in	r26, 0x3d	; 61
     49a:	be b7       	in	r27, 0x3e	; 62
     49c:	12 96       	adiw	r26, 0x02	; 2
     49e:	9c 93       	st	X, r25
     4a0:	8e 93       	st	-X, r24
     4a2:	11 97       	sbiw	r26, 0x01	; 1
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	9d 81       	ldd	r25, Y+5	; 0x05
     4a8:	6a 81       	ldd	r22, Y+2	; 0x02
     4aa:	7b 81       	ldd	r23, Y+3	; 0x03
     4ac:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     4b0:	ed b7       	in	r30, 0x3d	; 61
     4b2:	fe b7       	in	r31, 0x3e	; 62
     4b4:	74 83       	std	Z+4, r23	; 0x04
     4b6:	63 83       	std	Z+3, r22	; 0x03
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <app_cal+0x118>
	else if(c == '*') printf("%d", x*y);
     4ba:	8a 32       	cpi	r24, 0x2A	; 42
     4bc:	f9 f4       	brne	.+62     	; 0x4fc <app_cal+0x124>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <app_cal+0xe8>
     4c0:	0f 92       	push	r0
     4c2:	85 e5       	ldi	r24, 0x55	; 85
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	ad b7       	in	r26, 0x3d	; 61
     4c8:	be b7       	in	r27, 0x3e	; 62
     4ca:	12 96       	adiw	r26, 0x02	; 2
     4cc:	9c 93       	st	X, r25
     4ce:	8e 93       	st	-X, r24
     4d0:	11 97       	sbiw	r26, 0x01	; 1
     4d2:	4c 81       	ldd	r20, Y+4	; 0x04
     4d4:	5d 81       	ldd	r21, Y+5	; 0x05
     4d6:	2a 81       	ldd	r18, Y+2	; 0x02
     4d8:	3b 81       	ldd	r19, Y+3	; 0x03
     4da:	42 9f       	mul	r20, r18
     4dc:	c0 01       	movw	r24, r0
     4de:	43 9f       	mul	r20, r19
     4e0:	90 0d       	add	r25, r0
     4e2:	52 9f       	mul	r21, r18
     4e4:	90 0d       	add	r25, r0
     4e6:	11 24       	eor	r1, r1
     4e8:	14 96       	adiw	r26, 0x04	; 4
     4ea:	9c 93       	st	X, r25
     4ec:	8e 93       	st	-X, r24
     4ee:	13 97       	sbiw	r26, 0x03	; 3
     4f0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <__vector_27>:

void task_cmd(char *arg);
static int echo_mode = 1;

ISR(USART0_TX_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	0b b6       	in	r0, 0x3b	; 59
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     532:	0e 94 05 05 	call	0xa0a	; 0xa0a <qo_delete>
     536:	88 23       	and	r24, r24
     538:	19 f4       	brne	.+6      	; 0x540 <__vector_27+0x34>
		uart_busy = 0;
     53a:	10 92 04 05 	sts	0x0504, r1
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__vector_27+0x38>
	else
		UDR0 = ch;
     540:	80 93 c6 00 	sts	0x00C6, r24
}
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	7f 91       	pop	r23
     552:	6f 91       	pop	r22
     554:	5f 91       	pop	r21
     556:	4f 91       	pop	r20
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	0b be       	out	0x3b, r0	; 59
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <__vector_25>:

ISR(USART0_RX_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	0b b6       	in	r0, 0x3b	; 59
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	1f 93       	push	r17
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2a 97       	sbiw	r28, 0x0a	; 10
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;

	ch = UDR0;
     5a0:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
     5a4:	1b 31       	cpi	r17, 0x1B	; 27
     5a6:	61 f4       	brne	.+24     	; 0x5c0 <__vector_25+0x56>
		echo_mode = (echo_mode +1) & 0x01;
     5a8:	80 91 5c 02 	lds	r24, 0x025C
     5ac:	90 91 5d 02 	lds	r25, 0x025D
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	81 70       	andi	r24, 0x01	; 1
     5b4:	90 70       	andi	r25, 0x00	; 0
     5b6:	90 93 5d 02 	sts	0x025D, r25
     5ba:	80 93 5c 02 	sts	0x025C, r24
		return;
     5be:	24 c0       	rjmp	.+72     	; 0x608 <__vector_25+0x9e>
	}

	if(ch != EOT)
     5c0:	14 30       	cpi	r17, 0x04	; 4
     5c2:	69 f0       	breq	.+26     	; 0x5de <__vector_25+0x74>
	{
		if(ch == '\r')	ch = '\n';
     5c4:	1d 30       	cpi	r17, 0x0D	; 13
     5c6:	09 f4       	brne	.+2      	; 0x5ca <__vector_25+0x60>
     5c8:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode) uart_echo(ch);
     5ca:	20 91 5c 02 	lds	r18, 0x025C
     5ce:	30 91 5d 02 	lds	r19, 0x025D
     5d2:	21 15       	cp	r18, r1
     5d4:	31 05       	cpc	r19, r1
     5d6:	19 f0       	breq	.+6      	; 0x5de <__vector_25+0x74>
     5d8:	81 2f       	mov	r24, r17
     5da:	0e 94 f6 07 	call	0xfec	; 0xfec <uart_echo>
	}
	qi_insert(ch);
     5de:	81 2f       	mov	r24, r17
     5e0:	0e 94 a4 04 	call	0x948	; 0x948 <qi_insert>
	if(ch == EOT || ch == '\n') {
     5e4:	14 30       	cpi	r17, 0x04	; 4
     5e6:	11 f0       	breq	.+4      	; 0x5ec <__vector_25+0x82>
     5e8:	1a 30       	cpi	r17, 0x0A	; 10
     5ea:	71 f4       	brne	.+28     	; 0x608 <__vector_25+0x9e>
		task.fun = task_cmd;
     5ec:	80 ef       	ldi	r24, 0xF0	; 240
     5ee:	95 e0       	ldi	r25, 0x05	; 5
     5f0:	9a 83       	std	Y+2, r25	; 0x02
     5f2:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     5f4:	ce 01       	movw	r24, r28
     5f6:	03 96       	adiw	r24, 0x03	; 3
     5f8:	68 e5       	ldi	r22, 0x58	; 88
     5fa:	72 e0       	ldi	r23, 0x02	; 2
     5fc:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcpy>
		task_insert(&task);
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 2b 05 	call	0xa56	; 0xa56 <task_insert>
	}
}
     608:	2a 96       	adiw	r28, 0x0a	; 10
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	1f 91       	pop	r17
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <__vector_15>:

ISR(TIMER2_OVF_vect)
{
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	0b b6       	in	r0, 0x3b	; 59
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	2f 93       	push	r18
     64a:	3f 93       	push	r19
     64c:	4f 93       	push	r20
     64e:	5f 93       	push	r21
     650:	6f 93       	push	r22
     652:	7f 93       	push	r23
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	ef 93       	push	r30
     65e:	ff 93       	push	r31
	if(!Thead)
     660:	e0 91 1a 04 	lds	r30, 0x041A
     664:	f0 91 1b 04 	lds	r31, 0x041B
     668:	30 97       	sbiw	r30, 0x00	; 0
     66a:	49 f0       	breq	.+18     	; 0x67e <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	80 83       	st	Z, r24
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	11 f4       	brne	.+4      	; 0x67e <__vector_15+0x44>
		timer_expire();
     67a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <timer_expire>
}
     67e:	ff 91       	pop	r31
     680:	ef 91       	pop	r30
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	0f 90       	pop	r0
     698:	0b be       	out	0x3b, r0	; 59
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <__vector_29>:

ISR(ADC_vect)
{
     6a4:	1f 92       	push	r1
     6a6:	0f 92       	push	r0
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	0f 92       	push	r0
     6ac:	0b b6       	in	r0, 0x3b	; 59
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	2f 93       	push	r18
     6b8:	3f 93       	push	r19
     6ba:	4f 93       	push	r20
     6bc:	5f 93       	push	r21
     6be:	6f 93       	push	r22
     6c0:	7f 93       	push	r23
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	28 97       	sbiw	r28, 0x08	; 8
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	cd bf       	out	0x3d, r28	; 61
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     6dc:	80 91 78 00 	lds	r24, 0x0078
     6e0:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     6e4:	ea e7       	ldi	r30, 0x7A	; 122
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	20 81       	ld	r18, Z
     6ea:	2f 77       	andi	r18, 0x7F	; 127
     6ec:	20 83       	st	Z, r18
	sprintf(arg, "%d", data);
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <__vector_29+0x4c>
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <__vector_29+0x4e>
     6f2:	ed b7       	in	r30, 0x3d	; 61
     6f4:	fe b7       	in	r31, 0x3e	; 62
     6f6:	31 96       	adiw	r30, 0x01	; 1
     6f8:	8e 01       	movw	r16, r28
     6fa:	0f 5f       	subi	r16, 0xFF	; 255
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	ad b7       	in	r26, 0x3d	; 61
     700:	be b7       	in	r27, 0x3e	; 62
     702:	12 96       	adiw	r26, 0x02	; 2
     704:	1c 93       	st	X, r17
     706:	0e 93       	st	-X, r16
     708:	11 97       	sbiw	r26, 0x01	; 1
     70a:	29 e5       	ldi	r18, 0x59	; 89
     70c:	32 e0       	ldi	r19, 0x02	; 2
     70e:	33 83       	std	Z+3, r19	; 0x03
     710:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     712:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);
	sprintf(arg, "%d", data);
     714:	95 83       	std	Z+5, r25	; 0x05
     716:	84 83       	std	Z+4, r24	; 0x04
     718:	0e 94 55 0e 	call	0x1caa	; 0x1caa <sprintf>
	task_tc1047(arg);
     71c:	8d b7       	in	r24, 0x3d	; 61
     71e:	9e b7       	in	r25, 0x3e	; 62
     720:	06 96       	adiw	r24, 0x06	; 6
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	9e bf       	out	0x3e, r25	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	8d bf       	out	0x3d, r24	; 61
     72c:	c8 01       	movw	r24, r16
     72e:	0e 94 a0 05 	call	0xb40	; 0xb40 <task_tc1047>
}
     732:	28 96       	adiw	r28, 0x08	; 8
     734:	de bf       	out	0x3e, r29	; 62
     736:	cd bf       	out	0x3d, r28	; 61
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	bf 91       	pop	r27
     742:	af 91       	pop	r26
     744:	9f 91       	pop	r25
     746:	8f 91       	pop	r24
     748:	7f 91       	pop	r23
     74a:	6f 91       	pop	r22
     74c:	5f 91       	pop	r21
     74e:	4f 91       	pop	r20
     750:	3f 91       	pop	r19
     752:	2f 91       	pop	r18
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     766:	84 e0       	ldi	r24, 0x04	; 4
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 23 0c 	call	0x1846	; 0x1846 <malloc>
	return(cp);
}
     76e:	08 95       	ret

00000770 <free_node>:

void free_node(struct node *np)
{
	free(np);
     770:	0e 94 b9 0c 	call	0x1972	; 0x1972 <free>
}
     774:	08 95       	ret

00000776 <insert_node_head>:

void insert_node_head(struct node *np)
{
     776:	fc 01       	movw	r30, r24
	if(!Head) {
     778:	80 91 14 04 	lds	r24, 0x0414
     77c:	90 91 15 04 	lds	r25, 0x0415
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	39 f4       	brne	.+14     	; 0x792 <insert_node_head+0x1c>
		Head = np;
     784:	f0 93 15 04 	sts	0x0415, r31
     788:	e0 93 14 04 	sts	0x0414, r30
		np->link = NULL;
     78c:	13 82       	std	Z+3, r1	; 0x03
     78e:	12 82       	std	Z+2, r1	; 0x02
     790:	08 95       	ret
	}
	else {
		np->link = Head;
     792:	93 83       	std	Z+3, r25	; 0x03
     794:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     796:	f0 93 15 04 	sts	0x0415, r31
     79a:	e0 93 14 04 	sts	0x0414, r30
     79e:	08 95       	ret

000007a0 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     7a0:	e0 91 14 04 	lds	r30, 0x0414
     7a4:	f0 91 15 04 	lds	r31, 0x0415
     7a8:	30 97       	sbiw	r30, 0x00	; 0
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <insert_node_tail+0x18>
		Head = np;
     7ac:	90 93 15 04 	sts	0x0415, r25
     7b0:	80 93 14 04 	sts	0x0414, r24
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link);
     7b6:	f9 01       	movw	r30, r18
     7b8:	22 81       	ldd	r18, Z+2	; 0x02
     7ba:	33 81       	ldd	r19, Z+3	; 0x03
     7bc:	21 15       	cp	r18, r1
     7be:	31 05       	cpc	r19, r1
     7c0:	d1 f7       	brne	.-12     	; 0x7b6 <insert_node_tail+0x16>
		cp->link = np;
     7c2:	93 83       	std	Z+3, r25	; 0x03
     7c4:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     7c6:	fc 01       	movw	r30, r24
     7c8:	13 82       	std	Z+3, r1	; 0x03
     7ca:	12 82       	std	Z+2, r1	; 0x02
}
     7cc:	08 95       	ret

000007ce <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	fc 01       	movw	r30, r24
	struct node *cp, *pp;

	if(!Head) {
     7d4:	20 91 14 04 	lds	r18, 0x0414
     7d8:	30 91 15 04 	lds	r19, 0x0415
     7dc:	21 15       	cp	r18, r1
     7de:	31 05       	cpc	r19, r1
     7e0:	31 f0       	breq	.+12     	; 0x7ee <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link);
     7e2:	40 81       	ld	r20, Z
     7e4:	51 81       	ldd	r21, Z+1	; 0x01
     7e6:	d9 01       	movw	r26, r18
     7e8:	c0 e0       	ldi	r28, 0x00	; 0
     7ea:	d0 e0       	ldi	r29, 0x00	; 0
     7ec:	0f c0       	rjmp	.+30     	; 0x80c <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;

	if(!Head) {
		Head = np;
     7ee:	90 93 15 04 	sts	0x0415, r25
     7f2:	80 93 14 04 	sts	0x0414, r24
		np->link = NULL;
     7f6:	13 82       	std	Z+3, r1	; 0x03
     7f8:	12 82       	std	Z+2, r1	; 0x02
     7fa:	1d c0       	rjmp	.+58     	; 0x836 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link);
     7fc:	12 96       	adiw	r26, 0x02	; 2
     7fe:	8d 91       	ld	r24, X+
     800:	9c 91       	ld	r25, X
     802:	13 97       	sbiw	r26, 0x03	; 3
     804:	ed 01       	movw	r28, r26
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	39 f0       	breq	.+14     	; 0x818 <insert_node_ascn+0x4a>
     80a:	dc 01       	movw	r26, r24
     80c:	8d 91       	ld	r24, X+
     80e:	9c 91       	ld	r25, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	84 17       	cp	r24, r20
     814:	95 07       	cpc	r25, r21
     816:	94 f3       	brlt	.-28     	; 0x7fc <insert_node_ascn+0x2e>

		if(pp == NULL) {
     818:	20 97       	sbiw	r28, 0x00	; 0
     81a:	39 f4       	brne	.+14     	; 0x82a <insert_node_ascn+0x5c>
			np->link = Head;
     81c:	33 83       	std	Z+3, r19	; 0x03
     81e:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     820:	f0 93 15 04 	sts	0x0415, r31
     824:	e0 93 14 04 	sts	0x0414, r30
     828:	06 c0       	rjmp	.+12     	; 0x836 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	9b 81       	ldd	r25, Y+3	; 0x03
     82e:	93 83       	std	Z+3, r25	; 0x03
     830:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     832:	fb 83       	std	Y+3, r31	; 0x03
     834:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <insert_node_desc>:

void insert_node_desc(struct node *np)
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	fc 01       	movw	r30, r24
	struct node *cp, *pp;

	if(!Head) {
     842:	20 91 14 04 	lds	r18, 0x0414
     846:	30 91 15 04 	lds	r19, 0x0415
     84a:	21 15       	cp	r18, r1
     84c:	31 05       	cpc	r19, r1
     84e:	31 f0       	breq	.+12     	; 0x85c <insert_node_desc+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     850:	40 81       	ld	r20, Z
     852:	51 81       	ldd	r21, Z+1	; 0x01
     854:	d9 01       	movw	r26, r18
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	d0 e0       	ldi	r29, 0x00	; 0
     85a:	0f c0       	rjmp	.+30     	; 0x87a <insert_node_desc+0x3e>
void insert_node_desc(struct node *np)
{
	struct node *cp, *pp;

	if(!Head) {
		Head = np;
     85c:	90 93 15 04 	sts	0x0415, r25
     860:	80 93 14 04 	sts	0x0414, r24
		np->link = NULL;
     864:	13 82       	std	Z+3, r1	; 0x03
     866:	12 82       	std	Z+2, r1	; 0x02
     868:	1d c0       	rjmp	.+58     	; 0x8a4 <insert_node_desc+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     86a:	12 96       	adiw	r26, 0x02	; 2
     86c:	8d 91       	ld	r24, X+
     86e:	9c 91       	ld	r25, X
     870:	13 97       	sbiw	r26, 0x03	; 3
     872:	ed 01       	movw	r28, r26
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	39 f0       	breq	.+14     	; 0x886 <insert_node_desc+0x4a>
     878:	dc 01       	movw	r26, r24
     87a:	8d 91       	ld	r24, X+
     87c:	9c 91       	ld	r25, X
     87e:	11 97       	sbiw	r26, 0x01	; 1
     880:	48 17       	cp	r20, r24
     882:	59 07       	cpc	r21, r25
     884:	94 f3       	brlt	.-28     	; 0x86a <insert_node_desc+0x2e>

		if(pp == NULL) {
     886:	20 97       	sbiw	r28, 0x00	; 0
     888:	39 f4       	brne	.+14     	; 0x898 <insert_node_desc+0x5c>
			np->link = Head;
     88a:	33 83       	std	Z+3, r19	; 0x03
     88c:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     88e:	f0 93 15 04 	sts	0x0415, r31
     892:	e0 93 14 04 	sts	0x0414, r30
     896:	06 c0       	rjmp	.+12     	; 0x8a4 <insert_node_desc+0x68>
		} else {
			np->link = pp->link;
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	9b 81       	ldd	r25, Y+3	; 0x03
     89c:	93 83       	std	Z+3, r25	; 0x03
     89e:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     8a0:	fb 83       	std	Y+3, r31	; 0x03
     8a2:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <tour_list>:

void tour_list()
{
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     8b2:	8a e0       	ldi	r24, 0x0A	; 10
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <putchar>
	for(cp = Head; cp != NULL; cp = cp->link) 
     8ba:	c0 91 14 04 	lds	r28, 0x0414
     8be:	d0 91 15 04 	lds	r29, 0x0415
		printf("-->%c ", cp->data);
     8c2:	0e e5       	ldi	r16, 0x5E	; 94
     8c4:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp != NULL; cp = cp->link) 
     8c6:	13 c0       	rjmp	.+38     	; 0x8ee <tour_list+0x44>
		printf("-->%c ", cp->data);
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <tour_list+0x20>
     8ca:	0f 92       	push	r0
     8cc:	ed b7       	in	r30, 0x3d	; 61
     8ce:	fe b7       	in	r31, 0x3e	; 62
     8d0:	12 83       	std	Z+2, r17	; 0x02
     8d2:	01 83       	std	Z+1, r16	; 0x01
     8d4:	88 81       	ld	r24, Y
     8d6:	99 81       	ldd	r25, Y+1	; 0x01
     8d8:	94 83       	std	Z+4, r25	; 0x04
     8da:	83 83       	std	Z+3, r24	; 0x03
     8dc:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp != NULL; cp = cp->link) 
     8e0:	0a 80       	ldd	r0, Y+2	; 0x02
     8e2:	db 81       	ldd	r29, Y+3	; 0x03
     8e4:	c0 2d       	mov	r28, r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	20 97       	sbiw	r28, 0x00	; 0
     8f0:	59 f7       	brne	.-42     	; 0x8c8 <tour_list+0x1e>
		printf("-->%c ", cp->data);
		printf("\n");
     8f2:	8a e0       	ldi	r24, 0x0A	; 10
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <putchar>
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	08 95       	ret

00000904 <free_list>:

void free_list()
{
	struct node *cp;

	for( ; Head != NULL; ) {
     904:	09 c0       	rjmp	.+18     	; 0x918 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     906:	fc 01       	movw	r30, r24
     908:	22 81       	ldd	r18, Z+2	; 0x02
     90a:	33 81       	ldd	r19, Z+3	; 0x03
     90c:	30 93 15 04 	sts	0x0415, r19
     910:	20 93 14 04 	sts	0x0414, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     914:	0e 94 b9 0c 	call	0x1972	; 0x1972 <free>

void free_list()
{
	struct node *cp;

	for( ; Head != NULL; ) {
     918:	80 91 14 04 	lds	r24, 0x0414
     91c:	90 91 15 04 	lds	r25, 0x0415
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	89 f7       	brne	.-30     	; 0x906 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     924:	08 95       	ret

00000926 <q_init>:

int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     926:	10 92 08 05 	sts	0x0508, r1
     92a:	10 92 07 05 	sts	0x0507, r1
     92e:	10 92 06 05 	sts	0x0506, r1
     932:	10 92 05 05 	sts	0x0505, r1
     936:	10 92 0a 05 	sts	0x050A, r1
     93a:	10 92 09 05 	sts	0x0509, r1
     93e:	10 92 c3 04 	sts	0x04C3, r1
     942:	10 92 c2 04 	sts	0x04C2, r1
}
     946:	08 95       	ret

00000948 <qi_insert>:

int qi_insert(char ch)
{
     948:	48 2f       	mov	r20, r24
	if((ri+1) % QI_SIZE == fi)
     94a:	20 91 09 05 	lds	r18, 0x0509
     94e:	30 91 0a 05 	lds	r19, 0x050A
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	c9 01       	movw	r24, r18
     958:	60 e4       	ldi	r22, 0x40	; 64
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     960:	9c 01       	movw	r18, r24
     962:	80 91 c2 04 	lds	r24, 0x04C2
     966:	90 91 c3 04 	lds	r25, 0x04C3
     96a:	28 17       	cp	r18, r24
     96c:	39 07       	cpc	r19, r25
     96e:	59 f0       	breq	.+22     	; 0x986 <qi_insert+0x3e>
		return 0; //full
	ri = (ri + 1) % QI_SIZE;
     970:	30 93 0a 05 	sts	0x050A, r19
     974:	20 93 09 05 	sts	0x0509, r18
	qi[ri] = ch;
     978:	25 5f       	subi	r18, 0xF5	; 245
     97a:	3a 4f       	sbci	r19, 0xFA	; 250
     97c:	f9 01       	movw	r30, r18
     97e:	40 83       	st	Z, r20
	return 1;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri+1) % QI_SIZE == fi)
		return 0; //full
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     98a:	08 95       	ret

0000098c <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     98c:	80 91 c2 04 	lds	r24, 0x04C2
     990:	90 91 c3 04 	lds	r25, 0x04C3
     994:	20 91 09 05 	lds	r18, 0x0509
     998:	30 91 0a 05 	lds	r19, 0x050A
     99c:	28 17       	cp	r18, r24
     99e:	39 07       	cpc	r19, r25
     9a0:	79 f0       	breq	.+30     	; 0x9c0 <qi_delete+0x34>
		return 0;
	fi = (fi+1) % QI_SIZE;
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	60 e4       	ldi	r22, 0x40	; 64
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     9ac:	90 93 c3 04 	sts	0x04C3, r25
     9b0:	80 93 c2 04 	sts	0x04C2, r24

	return qi[fi];
     9b4:	85 5f       	subi	r24, 0xF5	; 245
     9b6:	9a 4f       	sbci	r25, 0xFA	; 250
     9b8:	fc 01       	movw	r30, r24
     9ba:	80 81       	ld	r24, Z
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi+1) % QI_SIZE;

	return qi[fi];
}
     9c4:	08 95       	ret

000009c6 <qo_insert>:

int qo_insert(char ch)
{
     9c6:	48 2f       	mov	r20, r24
	if((ro+1) % QO_SIZE == fo)
     9c8:	20 91 07 05 	lds	r18, 0x0507
     9cc:	30 91 08 05 	lds	r19, 0x0508
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255
     9d4:	c9 01       	movw	r24, r18
     9d6:	60 e4       	ldi	r22, 0x40	; 64
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     9de:	9c 01       	movw	r18, r24
     9e0:	80 91 05 05 	lds	r24, 0x0505
     9e4:	90 91 06 05 	lds	r25, 0x0506
     9e8:	28 17       	cp	r18, r24
     9ea:	39 07       	cpc	r19, r25
     9ec:	59 f0       	breq	.+22     	; 0xa04 <qo_insert+0x3e>
		return 0; //full
	ro = (ro + 1) % QO_SIZE;
     9ee:	30 93 08 05 	sts	0x0508, r19
     9f2:	20 93 07 05 	sts	0x0507, r18
	qo[ro] = ch;
     9f6:	2c 53       	subi	r18, 0x3C	; 60
     9f8:	3b 4f       	sbci	r19, 0xFB	; 251
     9fa:	f9 01       	movw	r30, r18
     9fc:	40 83       	st	Z, r20

	return 1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro+1) % QO_SIZE == fo)
		return 0; //full
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;

	return 1;
}
     a08:	08 95       	ret

00000a0a <qo_delete>:

int qo_delete()
{
	if (ro == fo)
     a0a:	80 91 05 05 	lds	r24, 0x0505
     a0e:	90 91 06 05 	lds	r25, 0x0506
     a12:	20 91 07 05 	lds	r18, 0x0507
     a16:	30 91 08 05 	lds	r19, 0x0508
     a1a:	28 17       	cp	r18, r24
     a1c:	39 07       	cpc	r19, r25
     a1e:	79 f0       	breq	.+30     	; 0xa3e <qo_delete+0x34>
		return 0;
	fo = (fo+1) % QO_SIZE;
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	60 e4       	ldi	r22, 0x40	; 64
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     a2a:	90 93 06 05 	sts	0x0506, r25
     a2e:	80 93 05 05 	sts	0x0505, r24

	return qo[fo];
     a32:	8c 53       	subi	r24, 0x3C	; 60
     a34:	9b 4f       	sbci	r25, 0xFB	; 251
     a36:	fc 01       	movw	r30, r24
     a38:	80 81       	ld	r24, Z
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	08 95       	ret
}

int qo_delete()
{
	if (ro == fo)
		return 0;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo+1) % QO_SIZE;

	return qo[fo];
}
     a42:	08 95       	ret

00000a44 <task_init>:
#include "uart.h"
#include "adc.h"

void task_init()
{
	Task_f = Task_r = 0;
     a44:	10 92 1f 04 	sts	0x041F, r1
     a48:	10 92 1e 04 	sts	0x041E, r1
     a4c:	10 92 c1 04 	sts	0x04C1, r1
     a50:	10 92 c0 04 	sts	0x04C0, r1
}
     a54:	08 95       	ret

00000a56 <task_insert>:

int task_insert(struct task *tskp)
{
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	48 2f       	mov	r20, r24
     a5c:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     a5e:	80 91 1e 04 	lds	r24, 0x041E
     a62:	90 91 1f 04 	lds	r25, 0x041F
     a66:	c0 91 c0 04 	lds	r28, 0x04C0
     a6a:	d0 91 c1 04 	lds	r29, 0x04C1
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	20 e1       	ldi	r18, 0x10	; 16
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	b9 01       	movw	r22, r18
     a76:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     a7a:	8c 17       	cp	r24, r28
     a7c:	9d 07       	cpc	r25, r29
     a7e:	31 f1       	breq	.+76     	; 0xacc <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     a80:	80 91 1e 04 	lds	r24, 0x041E
     a84:	90 91 1f 04 	lds	r25, 0x041F
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	b9 01       	movw	r22, r18
     a8c:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     a90:	90 93 1f 04 	sts	0x041F, r25
     a94:	80 93 1e 04 	sts	0x041E, r24
	Task_q[Task_r] = *tskp;
     a98:	80 91 1e 04 	lds	r24, 0x041E
     a9c:	90 91 1f 04 	lds	r25, 0x041F
     aa0:	dc 01       	movw	r26, r24
     aa2:	aa 0f       	add	r26, r26
     aa4:	bb 1f       	adc	r27, r27
     aa6:	63 e0       	ldi	r22, 0x03	; 3
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	6a 95       	dec	r22
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <task_insert+0x52>
     ab0:	a8 0f       	add	r26, r24
     ab2:	b9 1f       	adc	r27, r25
     ab4:	a0 5e       	subi	r26, 0xE0	; 224
     ab6:	bb 4f       	sbci	r27, 0xFB	; 251
     ab8:	c4 2f       	mov	r28, r20
     aba:	de 2f       	mov	r29, r30
     abc:	8a e0       	ldi	r24, 0x0A	; 10
     abe:	09 90       	ld	r0, Y+
     ac0:	0d 92       	st	X+, r0
     ac2:	81 50       	subi	r24, 0x01	; 1
     ac4:	e1 f7       	brne	.-8      	; 0xabe <task_insert+0x68>
	return(1);
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <task_delete>:

int task_delete(struct task *tskp)
{
     ad6:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     ad8:	40 91 1e 04 	lds	r20, 0x041E
     adc:	50 91 1f 04 	lds	r21, 0x041F
     ae0:	80 91 c0 04 	lds	r24, 0x04C0
     ae4:	90 91 c1 04 	lds	r25, 0x04C1
     ae8:	48 17       	cp	r20, r24
     aea:	59 07       	cpc	r21, r25
     aec:	31 f1       	breq	.+76     	; 0xb3a <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     aee:	80 91 c0 04 	lds	r24, 0x04C0
     af2:	90 91 c1 04 	lds	r25, 0x04C1
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	60 e1       	ldi	r22, 0x10	; 16
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     b00:	90 93 c1 04 	sts	0x04C1, r25
     b04:	80 93 c0 04 	sts	0x04C0, r24
	*tskp = Task_q[Task_f];
     b08:	80 91 c0 04 	lds	r24, 0x04C0
     b0c:	90 91 c1 04 	lds	r25, 0x04C1
     b10:	fc 01       	movw	r30, r24
     b12:	ee 0f       	add	r30, r30
     b14:	ff 1f       	adc	r31, r31
     b16:	a3 e0       	ldi	r26, 0x03	; 3
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 95       	dec	r26
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <task_delete+0x42>
     b20:	e8 0f       	add	r30, r24
     b22:	f9 1f       	adc	r31, r25
     b24:	d9 01       	movw	r26, r18
     b26:	e0 5e       	subi	r30, 0xE0	; 224
     b28:	fb 4f       	sbci	r31, 0xFB	; 251
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	01 90       	ld	r0, Z+
     b2e:	0d 92       	st	X+, r0
     b30:	81 50       	subi	r24, 0x01	; 1
     b32:	e1 f7       	brne	.-8      	; 0xb2c <task_delete+0x56>
	return(1);
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	08 95       	ret
}

int task_delete(struct task *tskp)
{
	if(Task_r == Task_f)
		return(0);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     b3e:	08 95       	ret

00000b40 <task_tc1047>:
void task_tc1047(char *arg)
{
	static int value;
	static int volatile in_adc = 0;

	if(!strcmp(arg, "")) {
     b40:	fc 01       	movw	r30, r24
     b42:	20 81       	ld	r18, Z
     b44:	22 23       	and	r18, r18
     b46:	19 f5       	brne	.+70     	; 0xb8e <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     b48:	0e 94 2d 08 	call	0x105a	; 0x105a <adc_start>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	90 93 17 04 	sts	0x0417, r25
     b54:	80 93 16 04 	sts	0x0416, r24
     b58:	80 91 16 04 	lds	r24, 0x0416
     b5c:	90 91 17 04 	lds	r25, 0x0417
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	d1 f7       	brne	.-12     	; 0xb58 <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n", value);
     b64:	00 d0       	rcall	.+0      	; 0xb66 <task_tc1047+0x26>
     b66:	0f 92       	push	r0
     b68:	88 e6       	ldi	r24, 0x68	; 104
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	ed b7       	in	r30, 0x3d	; 61
     b6e:	fe b7       	in	r31, 0x3e	; 62
     b70:	92 83       	std	Z+2, r25	; 0x02
     b72:	81 83       	std	Z+1, r24	; 0x01
     b74:	80 91 18 04 	lds	r24, 0x0418
     b78:	90 91 19 04 	lds	r25, 0x0419
     b7c:	94 83       	std	Z+4, r25	; 0x04
     b7e:	83 83       	std	Z+3, r24	; 0x03
     b80:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	08 95       	ret
	}
	else {
		value = atoi(arg) * (1.1/1023) * 1000;
     b8e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <atoi>
     b92:	9c 01       	movw	r18, r24
     b94:	b9 01       	movw	r22, r18
     b96:	88 27       	eor	r24, r24
     b98:	77 fd       	sbrc	r23, 7
     b9a:	80 95       	com	r24
     b9c:	98 2f       	mov	r25, r24
     b9e:	0e 94 3e 09 	call	0x127c	; 0x127c <__floatsisf>
     ba2:	29 e0       	ldi	r18, 0x09	; 9
     ba4:	30 ef       	ldi	r19, 0xF0	; 240
     ba6:	4c e8       	ldi	r20, 0x8C	; 140
     ba8:	5a e3       	ldi	r21, 0x3A	; 58
     baa:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a e7       	ldi	r20, 0x7A	; 122
     bb4:	54 e4       	ldi	r21, 0x44	; 68
     bb6:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3>
     bba:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     bc2:	84 5f       	subi	r24, 0xF4	; 244
     bc4:	91 40       	sbci	r25, 0x01	; 1
     bc6:	6a e0       	ldi	r22, 0x0A	; 10
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
     bce:	70 93 19 04 	sts	0x0419, r23
     bd2:	60 93 18 04 	sts	0x0418, r22
		in_adc = 0;
     bd6:	10 92 17 04 	sts	0x0417, r1
     bda:	10 92 16 04 	sts	0x0416, r1
     bde:	08 95       	ret

00000be0 <task_cmd>:
	*tskp = Task_q[Task_f];
	return(1);
}

void task_cmd(char *arg)
{
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	ca 54       	subi	r28, 0x4A	; 74
     bfa:	d0 40       	sbci	r29, 0x00	; 0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(!uart_peek()) return;
     c06:	0e 94 25 08 	call	0x104a	; 0x104a <uart_peek>
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	09 f4       	brne	.+2      	; 0xc10 <task_cmd+0x30>
     c0e:	88 c0       	rjmp	.+272    	; 0xd20 <task_cmd+0x140>

	if(gets(buf) == NULL) {
     c10:	ce 01       	movw	r24, r28
     c12:	0b 96       	adiw	r24, 0x0b	; 11
     c14:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <gets>
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	29 f4       	brne	.+10     	; 0xc26 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     c1c:	8b e8       	ldi	r24, 0x8B	; 139
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <puts>
     c24:	ff cf       	rjmp	.-2      	; 0xc24 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     c26:	ce 01       	movw	r24, r28
     c28:	0b 96       	adiw	r24, 0x0b	; 11
     c2a:	60 ea       	ldi	r22, 0xA0	; 160
     c2c:	72 e0       	ldi	r23, 0x02	; 2
     c2e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strtok>
     c32:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	60 ea       	ldi	r22, 0xA0	; 160
     c3a:	72 e0       	ldi	r23, 0x02	; 2
     c3c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strtok>
     c40:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	60 ea       	ldi	r22, 0xA0	; 160
     c48:	72 e0       	ldi	r23, 0x02	; 2
     c4a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strtok>
     c4e:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	60 ea       	ldi	r22, 0xA0	; 160
     c56:	72 e0       	ldi	r23, 0x02	; 2
     c58:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strtok>
     c5c:	6c 01       	movw	r12, r24

	if(cp0 == NULL) {
     c5e:	01 15       	cp	r16, r1
     c60:	11 05       	cpc	r17, r1
     c62:	09 f4       	brne	.+2      	; 0xc66 <task_cmd+0x86>
     c64:	51 c0       	rjmp	.+162    	; 0xd08 <task_cmd+0x128>
		// printf("!!!-111\n");
		printf( "$ "); return;
	}

	if(!strcmp(cp0, "prime"))
     c66:	c8 01       	movw	r24, r16
     c68:	68 ea       	ldi	r22, 0xA8	; 168
     c6a:	72 e0       	ldi	r23, 0x02	; 2
     c6c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <strcmp>
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	21 f4       	brne	.+8      	; 0xc7c <task_cmd+0x9c>
		task_prime(cp1);
     c74:	c7 01       	movw	r24, r14
     c76:	0e 94 ba 00 	call	0x174	; 0x174 <task_prime>
     c7a:	46 c0       	rjmp	.+140    	; 0xd08 <task_cmd+0x128>
	else if(!strcmp(cp0, "timer")) {
     c7c:	c8 01       	movw	r24, r16
     c7e:	6e ea       	ldi	r22, 0xAE	; 174
     c80:	72 e0       	ldi	r23, 0x02	; 2
     c82:	0e 94 75 0d 	call	0x1aea	; 0x1aea <strcmp>
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	79 f5       	brne	.+94     	; 0xce8 <task_cmd+0x108>
		if(cp1 == NULL) {
     c8a:	e1 14       	cp	r14, r1
     c8c:	f1 04       	cpc	r15, r1
     c8e:	19 f4       	brne	.+6      	; 0xc96 <task_cmd+0xb6>
			printf("!!!-222\n");
     c90:	84 eb       	ldi	r24, 0xB4	; 180
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	37 c0       	rjmp	.+110    	; 0xd04 <task_cmd+0x124>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     c96:	c7 01       	movw	r24, r14
     c98:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <atoi>
     c9c:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     c9e:	c5 01       	movw	r24, r10
     ca0:	68 ea       	ldi	r22, 0xA8	; 168
     ca2:	72 e0       	ldi	r23, 0x02	; 2
     ca4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <strcmp>
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	d9 f4       	brne	.+54     	; 0xce2 <task_cmd+0x102>
			task.fun = task_prime;
     cac:	8a eb       	ldi	r24, 0xBA	; 186
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
			if(cp3) strcpy(task.arg, cp3);
     cb4:	ce 01       	movw	r24, r28
     cb6:	03 96       	adiw	r24, 0x03	; 3
     cb8:	c1 14       	cp	r12, r1
     cba:	d1 04       	cpc	r13, r1
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <task_cmd+0xe2>
     cbe:	b6 01       	movw	r22, r12
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <task_cmd+0xe6>
			else strcpy(task.arg, "");
     cc2:	6c eb       	ldi	r22, 0xBC	; 188
     cc4:	72 e0       	ldi	r23, 0x02	; 2
     cc6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcpy>
			cli();
     cca:	f8 94       	cli
		if(cp1 == NULL) {
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     ccc:	c8 01       	movw	r24, r16
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	71 e0       	ldi	r23, 0x01	; 1
     cd2:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3) strcpy(task.arg, cp3);
			else strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 2c 07 	call	0xe58	; 0xe58 <insert_timer>
			sei();
     cde:	78 94       	sei
     ce0:	13 c0       	rjmp	.+38     	; 0xd08 <task_cmd+0x128>
		}
		else printf("!!!-333\n"); 
     ce2:	8d eb       	ldi	r24, 0xBD	; 189
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <task_cmd+0x124>
	} else if(!strcmp(cp0, "tc1047")) {
     ce8:	c8 01       	movw	r24, r16
     cea:	65 ec       	ldi	r22, 0xC5	; 197
     cec:	72 e0       	ldi	r23, 0x02	; 2
     cee:	0e 94 75 0d 	call	0x1aea	; 0x1aea <strcmp>
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	29 f4       	brne	.+10     	; 0xd00 <task_cmd+0x120>
		task_tc1047("");
     cf6:	8c eb       	ldi	r24, 0xBC	; 188
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	0e 94 a0 05 	call	0xb40	; 0xb40 <task_tc1047>
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <task_cmd+0x128>
	}
	else printf("Unknown command...\n");
     d00:	8c ec       	ldi	r24, 0xCC	; 204
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <puts>

	printf("$ ");
     d08:	0f 92       	push	r0
     d0a:	0f 92       	push	r0
     d0c:	85 ea       	ldi	r24, 0xA5	; 165
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	ed b7       	in	r30, 0x3d	; 61
     d12:	fe b7       	in	r31, 0x3e	; 62
     d14:	92 83       	std	Z+2, r25	; 0x02
     d16:	81 83       	std	Z+1, r24	; 0x01
     d18:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
}
     d20:	c6 5b       	subi	r28, 0xB6	; 182
     d22:	df 4f       	sbci	r29, 0xFF	; 255
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	08 95       	ret

00000d44 <timer_init>:
#include "interrupt.h"
#include "queue.h"
#include "linkedlist.h"

void timer_init() {
	TCNT2 = 0;
     d44:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     d48:	e6 eb       	ldi	r30, 0xB6	; 182
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 62       	ori	r24, 0x20	; 32
     d50:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     d52:	e0 e7       	ldi	r30, 0x70	; 112
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); 
     d5c:	e1 eb       	ldi	r30, 0xB1	; 177
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	81 60       	ori	r24, 0x01	; 1
     d64:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     d66:	80 81       	ld	r24, Z
     d68:	82 60       	ori	r24, 0x02	; 2
     d6a:	80 83       	st	Z, r24
}
     d6c:	08 95       	ret

00000d6e <timer_expire>:


void timer_expire(void)
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     d74:	8c 85       	ldd	r24, Y+12	; 0x0c
     d76:	9d 85       	ldd	r25, Y+13	; 0x0d
     d78:	90 93 1b 04 	sts	0x041B, r25
     d7c:	80 93 1a 04 	sts	0x041A, r24
		
		task_insert(&tp->task);
     d80:	ce 01       	movw	r24, r28
     d82:	02 96       	adiw	r24, 0x02	; 2
     d84:	0e 94 2b 05 	call	0xa56	; 0xa56 <task_insert>
		
		free(tp);
     d88:	ce 01       	movw	r24, r28
     d8a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <free>

void timer_expire(void)
{
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     d8e:	c0 91 1a 04 	lds	r28, 0x041A
     d92:	d0 91 1b 04 	lds	r29, 0x041B
     d96:	20 97       	sbiw	r28, 0x00	; 0
     d98:	21 f0       	breq	.+8      	; 0xda2 <timer_expire+0x34>
     d9a:	88 81       	ld	r24, Y
     d9c:	99 81       	ldd	r25, Y+1	; 0x01
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	49 f3       	breq	.-46     	; 0xd74 <timer_expire+0x6>
		
		task_insert(&tp->task);
		
		free(tp);
	}
} 
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <tour_timer>:
		tp->link = cp;
	}
}

void tour_timer()
{
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     db4:	8a e0       	ldi	r24, 0x0A	; 10
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     dbc:	c0 91 1a 04 	lds	r28, 0x041A
     dc0:	d0 91 1b 04 	lds	r29, 0x041B
}

void tour_timer()
{
	struct timer *cp;
	int total = 0;
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     dc8:	8f ed       	ldi	r24, 0xDF	; 223
     dca:	e8 2e       	mov	r14, r24
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     dd0:	20 c0       	rjmp	.+64     	; 0xe12 <tour_timer+0x6a>
		total += cp->time;
     dd2:	88 81       	ld	r24, Y
     dd4:	99 81       	ldd	r25, Y+1	; 0x01
     dd6:	08 0f       	add	r16, r24
     dd8:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     dda:	00 d0       	rcall	.+0      	; 0xddc <tour_timer+0x34>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <tour_timer+0x36>
     dde:	ed b7       	in	r30, 0x3d	; 61
     de0:	fe b7       	in	r31, 0x3e	; 62
     de2:	31 96       	adiw	r30, 0x01	; 1
     de4:	ad b7       	in	r26, 0x3d	; 61
     de6:	be b7       	in	r27, 0x3e	; 62
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	fc 92       	st	X, r15
     dec:	ee 92       	st	-X, r14
     dee:	11 97       	sbiw	r26, 0x01	; 1
     df0:	93 83       	std	Z+3, r25	; 0x03
     df2:	82 83       	std	Z+2, r24	; 0x02
     df4:	15 83       	std	Z+5, r17	; 0x05
     df6:	04 83       	std	Z+4, r16	; 0x04
     df8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     dfc:	0c 84       	ldd	r0, Y+12	; 0x0c
     dfe:	dd 85       	ldd	r29, Y+13	; 0x0d
     e00:	c0 2d       	mov	r28, r0
     e02:	8d b7       	in	r24, 0x3d	; 61
     e04:	9e b7       	in	r25, 0x3e	; 62
     e06:	06 96       	adiw	r24, 0x06	; 6
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	9e bf       	out	0x3e, r25	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	8d bf       	out	0x3d, r24	; 61
     e12:	20 97       	sbiw	r28, 0x00	; 0
     e14:	f1 f6       	brne	.-68     	; 0xdd2 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     e16:	8a e0       	ldi	r24, 0x0A	; 10
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <putchar>
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	08 95       	ret

00000e2c <free_timer>:

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     e2e:	fc 01       	movw	r30, r24
     e30:	24 85       	ldd	r18, Z+12	; 0x0c
     e32:	35 85       	ldd	r19, Z+13	; 0x0d
     e34:	30 93 1b 04 	sts	0x041B, r19
     e38:	20 93 1a 04 	sts	0x041A, r18
		free(cp);
     e3c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <free>
}

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     e40:	80 91 1a 04 	lds	r24, 0x041A
     e44:	90 91 1b 04 	lds	r25, 0x041B
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	89 f7       	brne	.-30     	; 0xe2e <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     e4c:	08 95       	ret

00000e4e <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;
	tp = (struct timer *)malloc(sizeof(*tp));
     e4e:	8e e0       	ldi	r24, 0x0E	; 14
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 23 0c 	call	0x1846	; 0x1846 <malloc>
	return(tp);
}
     e56:	08 95       	ret

00000e58 <insert_timer>:
#include "timerlinkedlist.h"
#include <stdio.h>

struct timer *Thead = NULL;
void insert_timer(struct task *tskp, int ms)
{
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	f8 2e       	mov	r15, r24
     e66:	e9 2e       	mov	r14, r25
     e68:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     e6a:	0e 94 27 07 	call	0xe4e	; 0xe4e <get_timer>
     e6e:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     e70:	dc 01       	movw	r26, r24
     e72:	12 96       	adiw	r26, 0x02	; 2
     e74:	ef 2d       	mov	r30, r15
     e76:	fe 2d       	mov	r31, r14
     e78:	8a e0       	ldi	r24, 0x0A	; 10
     e7a:	01 90       	ld	r0, Z+
     e7c:	0d 92       	st	X+, r0
     e7e:	81 50       	subi	r24, 0x01	; 1
     e80:	e1 f7       	brne	.-8      	; 0xe7a <insert_timer+0x22>
	tp->time = ms;
     e82:	19 83       	std	Y+1, r17	; 0x01
     e84:	08 83       	st	Y, r16

	if(Thead == NULL) {
     e86:	e0 91 1a 04 	lds	r30, 0x041A
     e8a:	f0 91 1b 04 	lds	r31, 0x041B
     e8e:	30 97       	sbiw	r30, 0x00	; 0
     e90:	29 f4       	brne	.+10     	; 0xe9c <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     e92:	d0 93 1b 04 	sts	0x041B, r29
     e96:	c0 93 1a 04 	sts	0x041A, r28
     e9a:	2f c0       	rjmp	.+94     	; 0xefa <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     ea6:	fd 01       	movw	r30, r26
		total += cp->time;
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	28 0f       	add	r18, r24
     eae:	39 1f       	adc	r19, r25
		if(total >= ms) 
     eb0:	20 17       	cp	r18, r16
     eb2:	31 07       	cpc	r19, r17
     eb4:	34 f4       	brge	.+12     	; 0xec2 <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     eb6:	a4 85       	ldd	r26, Z+12	; 0x0c
     eb8:	b5 85       	ldd	r27, Z+13	; 0x0d
     eba:	af 01       	movw	r20, r30
     ebc:	10 97       	sbiw	r26, 0x00	; 0
     ebe:	99 f7       	brne	.-26     	; 0xea6 <insert_timer+0x4e>
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms) 
     ec2:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}
	if(pp == NULL) {
     ec4:	41 15       	cp	r20, r1
     ec6:	51 05       	cpc	r21, r1
     ec8:	79 f4       	brne	.+30     	; 0xee8 <insert_timer+0x90>
		cp->time -= tp->time;
     eca:	8d 91       	ld	r24, X+
     ecc:	9c 91       	ld	r25, X
     ece:	11 97       	sbiw	r26, 0x01	; 1
     ed0:	80 1b       	sub	r24, r16
     ed2:	91 0b       	sbc	r25, r17
     ed4:	11 96       	adiw	r26, 0x01	; 1
     ed6:	9c 93       	st	X, r25
     ed8:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     eda:	bd 87       	std	Y+13, r27	; 0x0d
     edc:	ac 87       	std	Y+12, r26	; 0x0c
     ede:	d0 93 1b 04 	sts	0x041B, r29
     ee2:	c0 93 1a 04 	sts	0x041A, r28
     ee6:	24 c0       	rjmp	.+72     	; 0xf30 <insert_timer+0xd8>
	}
	else if(cp == NULL) {
     ee8:	10 97       	sbiw	r26, 0x00	; 0
     eea:	51 f4       	brne	.+20     	; 0xf00 <insert_timer+0xa8>
		tp->time -= total;
     eec:	02 1b       	sub	r16, r18
     eee:	13 0b       	sbc	r17, r19
     ef0:	19 83       	std	Y+1, r17	; 0x01
     ef2:	08 83       	st	Y, r16
		pp->link = tp;
     ef4:	fa 01       	movw	r30, r20
     ef6:	d5 87       	std	Z+13, r29	; 0x0d
     ef8:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     efa:	1d 86       	std	Y+13, r1	; 0x0d
     efc:	1c 86       	std	Y+12, r1	; 0x0c
     efe:	18 c0       	rjmp	.+48     	; 0xf30 <insert_timer+0xd8>
	}	
	else {
		total -= cp->time;
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	b9 01       	movw	r22, r18
     f08:	68 1b       	sub	r22, r24
     f0a:	79 0b       	sbc	r23, r25
		tp->time -= total;
     f0c:	98 01       	movw	r18, r16
     f0e:	26 1b       	sub	r18, r22
     f10:	37 0b       	sbc	r19, r23
     f12:	39 83       	std	Y+1, r19	; 0x01
     f14:	28 83       	st	Y, r18
		cp->time -= tp->time;
     f16:	8d 91       	ld	r24, X+
     f18:	9c 91       	ld	r25, X
     f1a:	11 97       	sbiw	r26, 0x01	; 1
     f1c:	82 1b       	sub	r24, r18
     f1e:	93 0b       	sbc	r25, r19
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	9c 93       	st	X, r25
     f24:	8e 93       	st	-X, r24
		pp->link = tp;
     f26:	fa 01       	movw	r30, r20
     f28:	d5 87       	std	Z+13, r29	; 0x0d
     f2a:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     f2c:	bd 87       	std	Y+13, r27	; 0x0d
     f2e:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <uart_getchar>:
{
	char ch;

	do
	{
		cli();
     f3e:	f8 94       	cli
		ch = qi_delete();
     f40:	0e 94 c6 04 	call	0x98c	; 0x98c <qi_delete>
		sei();
     f44:	78 94       	sei
	}while(ch == 0);
     f46:	88 23       	and	r24, r24
     f48:	d1 f3       	breq	.-12     	; 0xf3e <uart_getchar>

	if(ch == EOT)
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	11 f0       	breq	.+4      	; 0xf52 <uart_getchar+0x14>
		return -1;
	else
		return ch;
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	08 95       	ret
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if(ch == EOT)
		return -1;
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	9f ef       	ldi	r25, 0xFF	; 255
		return ch;

	if(ch == BS)
		ch = ch-1;
		return ch;
}
     f56:	08 95       	ret

00000f58 <uart_putchar>:
	sbi(UCSR0B, RXEN0); // RX enable
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     f58:	cf 93       	push	r28
     f5a:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     f5c:	8a 30       	cpi	r24, 0x0A	; 10
     f5e:	19 f4       	brne	.+6      	; 0xf66 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     f60:	8d e0       	ldi	r24, 0x0D	; 13
     f62:	0e 94 ac 07 	call	0xf58	; 0xf58 <uart_putchar>
	
	cli();
     f66:	f8 94       	cli

	if(!uart_busy)
     f68:	80 91 04 05 	lds	r24, 0x0504
     f6c:	88 23       	and	r24, r24
     f6e:	59 f4       	brne	.+22     	; 0xf86 <uart_putchar+0x2e>
	{
		UDR0 = ch;
     f70:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 04 05 	sts	0x0504, r24
     f7a:	0a c0       	rjmp	.+20     	; 0xf90 <uart_putchar+0x38>
	}
	else
	{
		while(qo_insert(ch) == 0)
		{
			sei();
     f7c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f7e:	86 ef       	ldi	r24, 0xF6	; 246
     f80:	8a 95       	dec	r24
     f82:	f1 f7       	brne	.-4      	; 0xf80 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     f84:	f8 94       	cli
		UDR0 = ch;
		uart_busy = 1;
	}
	else
	{
		while(qo_insert(ch) == 0)
     f86:	8c 2f       	mov	r24, r28
     f88:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <qo_insert>
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	b1 f3       	breq	.-20     	; 0xf7c <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     f90:	78 94       	sei

	return 1;
}
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init()
{
	stdout = &Mystdout;
     f9a:	88 ef       	ldi	r24, 0xF8	; 248
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	90 93 52 05 	sts	0x0552, r25
     fa2:	80 93 51 05 	sts	0x0551, r24
	stdin = &Mystdin;
     fa6:	8a ee       	ldi	r24, 0xEA	; 234
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	90 93 50 05 	sts	0x0550, r25
     fae:	80 93 4f 05 	sts	0x054F, r24
	uart_busy = 0; // false
     fb2:	10 92 04 05 	sts	0x0504, r1
	q_init();
     fb6:	0e 94 93 04 	call	0x926	; 0x926 <q_init>
	UBRR0H = 0x00;
     fba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07; // 115.2KBPS
     fbe:	87 e0       	ldi	r24, 0x07	; 7
     fc0:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     fc4:	e0 ec       	ldi	r30, 0xC0	; 192
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	82 60       	ori	r24, 0x02	; 2
     fcc:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     fce:	e1 ec       	ldi	r30, 0xC1	; 193
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 60       	ori	r24, 0x08	; 8
     fd6:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0); // RX enable
     fde:	80 81       	ld	r24, Z
     fe0:	80 61       	ori	r24, 0x10	; 16
     fe2:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	80 83       	st	Z, r24
}
     fea:	08 95       	ret

00000fec <uart_echo>:
		ch = ch-1;
		return ch;
}

void uart_echo(char ch)
{
     fec:	cf 93       	push	r28
     fee:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     ff0:	8a 30       	cpi	r24, 0x0A	; 10
     ff2:	19 f4       	brne	.+6      	; 0xffa <uart_echo+0xe>
		uart_echo('\r');
     ff4:	8d e0       	ldi	r24, 0x0D	; 13
     ff6:	0e 94 f6 07 	call	0xfec	; 0xfec <uart_echo>
	if(!uart_busy)
     ffa:	80 91 04 05 	lds	r24, 0x0504
     ffe:	88 23       	and	r24, r24
    1000:	31 f4       	brne	.+12     	; 0x100e <uart_echo+0x22>
	{
		UDR0 = ch;
    1002:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 04 05 	sts	0x0504, r24
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
    100e:	8c 2f       	mov	r24, r28
    1010:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <qo_insert>
}
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <qi_peek>:

int qi_peek()
{
	if(fi == ri)
    1018:	80 91 c2 04 	lds	r24, 0x04C2
    101c:	90 91 c3 04 	lds	r25, 0x04C3
    1020:	20 91 09 05 	lds	r18, 0x0509
    1024:	30 91 0a 05 	lds	r19, 0x050A
    1028:	82 17       	cp	r24, r18
    102a:	93 07       	cpc	r25, r19
    102c:	59 f0       	breq	.+22     	; 0x1044 <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	60 e4       	ldi	r22, 0x40	; 64
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
    1038:	85 5f       	subi	r24, 0xF5	; 245
    103a:	9a 4f       	sbci	r25, 0xFA	; 250
    103c:	fc 01       	movw	r30, r24
    103e:	80 81       	ld	r24, Z
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	08 95       	ret
}

int qi_peek()
{
	if(fi == ri)
		return 0;
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
    1048:	08 95       	ret

0000104a <uart_peek>:

int uart_peek()
{
	return(qi_peek());
    104a:	0e 94 0c 08 	call	0x1018	; 0x1018 <qi_peek>
}
    104e:	08 95       	ret

00001050 <adc_init>:
#include <stdlib.h>
#include <stdio.h>

void adc_init()
{
	cbi(DDRF, PF0);
    1050:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
    1052:	80 e8       	ldi	r24, 0x80	; 128
    1054:	80 93 7c 00 	sts	0x007C, r24
}
    1058:	08 95       	ret

0000105a <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);
    105a:	ea e7       	ldi	r30, 0x7A	; 122
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	80 83       	st	Z, r24
    1064:	8d ed       	ldi	r24, 0xDD	; 221
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
    106c:	80 81       	ld	r24, Z
    106e:	88 60       	ori	r24, 0x08	; 8
    1070:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
    1072:	80 81       	ld	r24, Z
    1074:	80 64       	ori	r24, 0x40	; 64
    1076:	80 83       	st	Z, r24
}
    1078:	08 95       	ret

0000107a <__mulsf3>:
    107a:	a0 e2       	ldi	r26, 0x20	; 32
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e3 e4       	ldi	r30, 0x43	; 67
    1080:	f8 e0       	ldi	r31, 0x08	; 8
    1082:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__prologue_saves__+0x4>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	af 83       	std	Y+7, r26	; 0x07
    1090:	b8 87       	std	Y+8, r27	; 0x08
    1092:	29 83       	std	Y+1, r18	; 0x01
    1094:	3a 83       	std	Y+2, r19	; 0x02
    1096:	4b 83       	std	Y+3, r20	; 0x03
    1098:	5c 83       	std	Y+4, r21	; 0x04
    109a:	ce 01       	movw	r24, r28
    109c:	05 96       	adiw	r24, 0x05	; 5
    109e:	be 01       	movw	r22, r28
    10a0:	67 5e       	subi	r22, 0xE7	; 231
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	0e 94 30 0b 	call	0x1660	; 0x1660 <__unpack_f>
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	be 01       	movw	r22, r28
    10ae:	6f 5e       	subi	r22, 0xEF	; 239
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	0e 94 30 0b 	call	0x1660	; 0x1660 <__unpack_f>
    10b6:	99 8d       	ldd	r25, Y+25	; 0x19
    10b8:	92 30       	cpi	r25, 0x02	; 2
    10ba:	78 f0       	brcs	.+30     	; 0x10da <__mulsf3+0x60>
    10bc:	89 89       	ldd	r24, Y+17	; 0x11
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	c0 f0       	brcs	.+48     	; 0x10f2 <__mulsf3+0x78>
    10c2:	94 30       	cpi	r25, 0x04	; 4
    10c4:	19 f4       	brne	.+6      	; 0x10cc <__mulsf3+0x52>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	41 f4       	brne	.+16     	; 0x10da <__mulsf3+0x60>
    10ca:	ca c0       	rjmp	.+404    	; 0x1260 <__mulsf3+0x1e6>
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	19 f4       	brne	.+6      	; 0x10d6 <__mulsf3+0x5c>
    10d0:	92 30       	cpi	r25, 0x02	; 2
    10d2:	79 f4       	brne	.+30     	; 0x10f2 <__mulsf3+0x78>
    10d4:	c5 c0       	rjmp	.+394    	; 0x1260 <__mulsf3+0x1e6>
    10d6:	92 30       	cpi	r25, 0x02	; 2
    10d8:	51 f4       	brne	.+20     	; 0x10ee <__mulsf3+0x74>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10de:	9a 89       	ldd	r25, Y+18	; 0x12
    10e0:	29 17       	cp	r18, r25
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <__mulsf3+0x6c>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	8a 8f       	std	Y+26, r24	; 0x1a
    10e8:	ce 01       	movw	r24, r28
    10ea:	49 96       	adiw	r24, 0x19	; 25
    10ec:	bb c0       	rjmp	.+374    	; 0x1264 <__mulsf3+0x1ea>
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	51 f4       	brne	.+20     	; 0x1106 <__mulsf3+0x8c>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10f6:	9a 89       	ldd	r25, Y+18	; 0x12
    10f8:	29 17       	cp	r18, r25
    10fa:	09 f4       	brne	.+2      	; 0x10fe <__mulsf3+0x84>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	8a 8b       	std	Y+18, r24	; 0x12
    1100:	ce 01       	movw	r24, r28
    1102:	41 96       	adiw	r24, 0x11	; 17
    1104:	af c0       	rjmp	.+350    	; 0x1264 <__mulsf3+0x1ea>
    1106:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1108:	5e 8c       	ldd	r5, Y+30	; 0x1e
    110a:	6f 8c       	ldd	r6, Y+31	; 0x1f
    110c:	78 a0       	lds	r23, 0x88
    110e:	0d 89       	ldd	r16, Y+21	; 0x15
    1110:	1e 89       	ldd	r17, Y+22	; 0x16
    1112:	2f 89       	ldd	r18, Y+23	; 0x17
    1114:	38 8d       	ldd	r19, Y+24	; 0x18
    1116:	e0 e2       	ldi	r30, 0x20	; 32
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	ba 01       	movw	r22, r20
    1120:	88 24       	eor	r8, r8
    1122:	99 24       	eor	r9, r9
    1124:	54 01       	movw	r10, r8
    1126:	cc 24       	eor	r12, r12
    1128:	dd 24       	eor	r13, r13
    112a:	76 01       	movw	r14, r12
    112c:	c2 01       	movw	r24, r4
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	d1 f0       	breq	.+52     	; 0x116a <__mulsf3+0xf0>
    1136:	c0 0e       	add	r12, r16
    1138:	d1 1e       	adc	r13, r17
    113a:	e2 1e       	adc	r14, r18
    113c:	f3 1e       	adc	r15, r19
    113e:	db 01       	movw	r26, r22
    1140:	ca 01       	movw	r24, r20
    1142:	88 0d       	add	r24, r8
    1144:	99 1d       	adc	r25, r9
    1146:	aa 1d       	adc	r26, r10
    1148:	bb 1d       	adc	r27, r11
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	c0 16       	cp	r12, r16
    1154:	d1 06       	cpc	r13, r17
    1156:	e2 06       	cpc	r14, r18
    1158:	f3 06       	cpc	r15, r19
    115a:	18 f0       	brcs	.+6      	; 0x1162 <__mulsf3+0xe8>
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	ba 01       	movw	r22, r20
    1162:	48 0f       	add	r20, r24
    1164:	59 1f       	adc	r21, r25
    1166:	6a 1f       	adc	r22, r26
    1168:	7b 1f       	adc	r23, r27
    116a:	88 0c       	add	r8, r8
    116c:	99 1c       	adc	r9, r9
    116e:	aa 1c       	adc	r10, r10
    1170:	bb 1c       	adc	r11, r11
    1172:	37 ff       	sbrs	r19, 7
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <__mulsf3+0x10c>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	88 2a       	or	r8, r24
    1180:	99 2a       	or	r9, r25
    1182:	aa 2a       	or	r10, r26
    1184:	bb 2a       	or	r11, r27
    1186:	00 0f       	add	r16, r16
    1188:	11 1f       	adc	r17, r17
    118a:	22 1f       	adc	r18, r18
    118c:	33 1f       	adc	r19, r19
    118e:	76 94       	lsr	r7
    1190:	67 94       	ror	r6
    1192:	57 94       	ror	r5
    1194:	47 94       	ror	r4
    1196:	31 97       	sbiw	r30, 0x01	; 1
    1198:	49 f6       	brne	.-110    	; 0x112c <__mulsf3+0xb2>
    119a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119e:	2b 89       	ldd	r18, Y+19	; 0x13
    11a0:	3c 89       	ldd	r19, Y+20	; 0x14
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	02 96       	adiw	r24, 0x02	; 2
    11a8:	9c 87       	std	Y+12, r25	; 0x0c
    11aa:	8b 87       	std	Y+11, r24	; 0x0b
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	2a 8d       	ldd	r18, Y+26	; 0x1a
    11b0:	9a 89       	ldd	r25, Y+18	; 0x12
    11b2:	29 17       	cp	r18, r25
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__mulsf3+0x13e>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	8a 87       	std	Y+10, r24	; 0x0a
    11ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    11bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    11be:	17 c0       	rjmp	.+46     	; 0x11ee <__mulsf3+0x174>
    11c0:	ca 01       	movw	r24, r20
    11c2:	81 70       	andi	r24, 0x01	; 1
    11c4:	90 70       	andi	r25, 0x00	; 0
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <__mulsf3+0x168>
    11ca:	f6 94       	lsr	r15
    11cc:	e7 94       	ror	r14
    11ce:	d7 94       	ror	r13
    11d0:	c7 94       	ror	r12
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a0 e0       	ldi	r26, 0x00	; 0
    11d8:	b0 e8       	ldi	r27, 0x80	; 128
    11da:	c8 2a       	or	r12, r24
    11dc:	d9 2a       	or	r13, r25
    11de:	ea 2a       	or	r14, r26
    11e0:	fb 2a       	or	r15, r27
    11e2:	76 95       	lsr	r23
    11e4:	67 95       	ror	r22
    11e6:	57 95       	ror	r21
    11e8:	47 95       	ror	r20
    11ea:	2f 5f       	subi	r18, 0xFF	; 255
    11ec:	3f 4f       	sbci	r19, 0xFF	; 255
    11ee:	77 fd       	sbrc	r23, 7
    11f0:	e7 cf       	rjmp	.-50     	; 0x11c0 <__mulsf3+0x146>
    11f2:	c9 01       	movw	r24, r18
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <__mulsf3+0x192>
    11f6:	44 0f       	add	r20, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	f7 fc       	sbrc	r15, 7
    1200:	41 60       	ori	r20, 0x01	; 1
    1202:	cc 0c       	add	r12, r12
    1204:	dd 1c       	adc	r13, r13
    1206:	ee 1c       	adc	r14, r14
    1208:	ff 1c       	adc	r15, r15
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	40 30       	cpi	r20, 0x00	; 0
    120e:	a0 e0       	ldi	r26, 0x00	; 0
    1210:	5a 07       	cpc	r21, r26
    1212:	a0 e0       	ldi	r26, 0x00	; 0
    1214:	6a 07       	cpc	r22, r26
    1216:	a0 e4       	ldi	r26, 0x40	; 64
    1218:	7a 07       	cpc	r23, r26
    121a:	68 f3       	brcs	.-38     	; 0x11f6 <__mulsf3+0x17c>
    121c:	8b 87       	std	Y+11, r24	; 0x0b
    121e:	9c 87       	std	Y+12, r25	; 0x0c
    1220:	db 01       	movw	r26, r22
    1222:	ca 01       	movw	r24, r20
    1224:	8f 77       	andi	r24, 0x7F	; 127
    1226:	90 70       	andi	r25, 0x00	; 0
    1228:	a0 70       	andi	r26, 0x00	; 0
    122a:	b0 70       	andi	r27, 0x00	; 0
    122c:	80 34       	cpi	r24, 0x40	; 64
    122e:	91 05       	cpc	r25, r1
    1230:	a1 05       	cpc	r26, r1
    1232:	b1 05       	cpc	r27, r1
    1234:	61 f4       	brne	.+24     	; 0x124e <__mulsf3+0x1d4>
    1236:	47 fd       	sbrc	r20, 7
    1238:	0a c0       	rjmp	.+20     	; 0x124e <__mulsf3+0x1d4>
    123a:	c1 14       	cp	r12, r1
    123c:	d1 04       	cpc	r13, r1
    123e:	e1 04       	cpc	r14, r1
    1240:	f1 04       	cpc	r15, r1
    1242:	29 f0       	breq	.+10     	; 0x124e <__mulsf3+0x1d4>
    1244:	40 5c       	subi	r20, 0xC0	; 192
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	6f 4f       	sbci	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	40 78       	andi	r20, 0x80	; 128
    124e:	4d 87       	std	Y+13, r20	; 0x0d
    1250:	5e 87       	std	Y+14, r21	; 0x0e
    1252:	6f 87       	std	Y+15, r22	; 0x0f
    1254:	78 8b       	std	Y+16, r23	; 0x10
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	89 87       	std	Y+9, r24	; 0x09
    125a:	ce 01       	movw	r24, r28
    125c:	09 96       	adiw	r24, 0x09	; 9
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <__mulsf3+0x1ea>
    1260:	86 e0       	ldi	r24, 0x06	; 6
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__pack_f>
    1268:	46 2f       	mov	r20, r22
    126a:	57 2f       	mov	r21, r23
    126c:	68 2f       	mov	r22, r24
    126e:	79 2f       	mov	r23, r25
    1270:	cb 01       	movw	r24, r22
    1272:	ba 01       	movw	r22, r20
    1274:	a0 96       	adiw	r28, 0x20	; 32
    1276:	e0 e1       	ldi	r30, 0x10	; 16
    1278:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__epilogue_restores__+0x4>

0000127c <__floatsisf>:
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	28 97       	sbiw	r28, 0x08	; 8
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	6b 01       	movw	r12, r22
    129a:	7c 01       	movw	r14, r24
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	d7 01       	movw	r26, r14
    12a2:	c6 01       	movw	r24, r12
    12a4:	88 27       	eor	r24, r24
    12a6:	b7 fd       	sbrc	r27, 7
    12a8:	83 95       	inc	r24
    12aa:	99 27       	eor	r25, r25
    12ac:	aa 27       	eor	r26, r26
    12ae:	bb 27       	eor	r27, r27
    12b0:	28 2f       	mov	r18, r24
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	c1 14       	cp	r12, r1
    12b6:	d1 04       	cpc	r13, r1
    12b8:	e1 04       	cpc	r14, r1
    12ba:	f1 04       	cpc	r15, r1
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <__floatsisf+0x48>
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	35 c0       	rjmp	.+106    	; 0x132e <__floatsisf+0xb2>
    12c4:	8e e1       	ldi	r24, 0x1E	; 30
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	22 23       	and	r18, r18
    12ce:	89 f0       	breq	.+34     	; 0x12f2 <__floatsisf+0x76>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	c8 16       	cp	r12, r24
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	d8 06       	cpc	r13, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	e8 06       	cpc	r14, r24
    12dc:	80 e8       	ldi	r24, 0x80	; 128
    12de:	f8 06       	cpc	r15, r24
    12e0:	59 f1       	breq	.+86     	; 0x1338 <__floatsisf+0xbc>
    12e2:	f0 94       	com	r15
    12e4:	e0 94       	com	r14
    12e6:	d0 94       	com	r13
    12e8:	c0 94       	com	r12
    12ea:	c1 1c       	adc	r12, r1
    12ec:	d1 1c       	adc	r13, r1
    12ee:	e1 1c       	adc	r14, r1
    12f0:	f1 1c       	adc	r15, r1
    12f2:	cd 82       	std	Y+5, r12	; 0x05
    12f4:	de 82       	std	Y+6, r13	; 0x06
    12f6:	ef 82       	std	Y+7, r14	; 0x07
    12f8:	f8 86       	std	Y+8, r15	; 0x08
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 06 0a 	call	0x140c	; 0x140c <__clzsi2>
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	18 16       	cp	r1, r24
    1306:	19 06       	cpc	r1, r25
    1308:	94 f4       	brge	.+36     	; 0x132e <__floatsisf+0xb2>
    130a:	08 2e       	mov	r0, r24
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <__floatsisf+0x9a>
    130e:	cc 0c       	add	r12, r12
    1310:	dd 1c       	adc	r13, r13
    1312:	ee 1c       	adc	r14, r14
    1314:	ff 1c       	adc	r15, r15
    1316:	0a 94       	dec	r0
    1318:	d2 f7       	brpl	.-12     	; 0x130e <__floatsisf+0x92>
    131a:	cd 82       	std	Y+5, r12	; 0x05
    131c:	de 82       	std	Y+6, r13	; 0x06
    131e:	ef 82       	std	Y+7, r14	; 0x07
    1320:	f8 86       	std	Y+8, r15	; 0x08
    1322:	2e e1       	ldi	r18, 0x1E	; 30
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	28 1b       	sub	r18, r24
    1328:	39 0b       	sbc	r19, r25
    132a:	3c 83       	std	Y+4, r19	; 0x04
    132c:	2b 83       	std	Y+3, r18	; 0x03
    132e:	ce 01       	movw	r24, r28
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__pack_f>
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <__floatsisf+0xc4>
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	9f ec       	ldi	r25, 0xCF	; 207
    1340:	38 2f       	mov	r19, r24
    1342:	29 2f       	mov	r18, r25
    1344:	86 2f       	mov	r24, r22
    1346:	97 2f       	mov	r25, r23
    1348:	a3 2f       	mov	r26, r19
    134a:	b2 2f       	mov	r27, r18
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	28 96       	adiw	r28, 0x08	; 8
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	08 95       	ret

0000136a <__fixsfsi>:
    136a:	ac e0       	ldi	r26, 0x0C	; 12
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb eb       	ldi	r30, 0xBB	; 187
    1370:	f9 e0       	ldi	r31, 0x09	; 9
    1372:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__prologue_saves__+0x1c>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	ab 83       	std	Y+3, r26	; 0x03
    1380:	bc 83       	std	Y+4, r27	; 0x04
    1382:	ce 01       	movw	r24, r28
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	be 01       	movw	r22, r28
    1388:	6b 5f       	subi	r22, 0xFB	; 251
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	0e 94 30 0b 	call	0x1660	; 0x1660 <__unpack_f>
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	69 f1       	breq	.+90     	; 0x13f0 <__fixsfsi+0x86>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	58 f1       	brcs	.+86     	; 0x13f0 <__fixsfsi+0x86>
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	39 f0       	breq	.+14     	; 0x13ac <__fixsfsi+0x42>
    139e:	2f 81       	ldd	r18, Y+7	; 0x07
    13a0:	38 85       	ldd	r19, Y+8	; 0x08
    13a2:	37 fd       	sbrc	r19, 7
    13a4:	25 c0       	rjmp	.+74     	; 0x13f0 <__fixsfsi+0x86>
    13a6:	2f 31       	cpi	r18, 0x1F	; 31
    13a8:	31 05       	cpc	r19, r1
    13aa:	44 f0       	brlt	.+16     	; 0x13bc <__fixsfsi+0x52>
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	88 23       	and	r24, r24
    13b0:	19 f1       	breq	.+70     	; 0x13f8 <__fixsfsi+0x8e>
    13b2:	00 e0       	ldi	r16, 0x00	; 0
    13b4:	10 e0       	ldi	r17, 0x00	; 0
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e8       	ldi	r19, 0x80	; 128
    13ba:	22 c0       	rjmp	.+68     	; 0x1400 <__fixsfsi+0x96>
    13bc:	8e e1       	ldi	r24, 0x1E	; 30
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	82 1b       	sub	r24, r18
    13c2:	93 0b       	sbc	r25, r19
    13c4:	09 85       	ldd	r16, Y+9	; 0x09
    13c6:	1a 85       	ldd	r17, Y+10	; 0x0a
    13c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    13ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <__fixsfsi+0x6c>
    13ce:	36 95       	lsr	r19
    13d0:	27 95       	ror	r18
    13d2:	17 95       	ror	r17
    13d4:	07 95       	ror	r16
    13d6:	8a 95       	dec	r24
    13d8:	d2 f7       	brpl	.-12     	; 0x13ce <__fixsfsi+0x64>
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	88 23       	and	r24, r24
    13de:	81 f0       	breq	.+32     	; 0x1400 <__fixsfsi+0x96>
    13e0:	30 95       	com	r19
    13e2:	20 95       	com	r18
    13e4:	10 95       	com	r17
    13e6:	01 95       	neg	r16
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	2f 4f       	sbci	r18, 0xFF	; 255
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <__fixsfsi+0x96>
    13f0:	00 e0       	ldi	r16, 0x00	; 0
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	98 01       	movw	r18, r16
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__fixsfsi+0x96>
    13f8:	0f ef       	ldi	r16, 0xFF	; 255
    13fa:	1f ef       	ldi	r17, 0xFF	; 255
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	3f e7       	ldi	r19, 0x7F	; 127
    1400:	b8 01       	movw	r22, r16
    1402:	c9 01       	movw	r24, r18
    1404:	2c 96       	adiw	r28, 0x0c	; 12
    1406:	e4 e0       	ldi	r30, 0x04	; 4
    1408:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__epilogue_restores__+0x1c>

0000140c <__clzsi2>:
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	8b 01       	movw	r16, r22
    141a:	9c 01       	movw	r18, r24
    141c:	00 30       	cpi	r16, 0x00	; 0
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	18 07       	cpc	r17, r24
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	28 07       	cpc	r18, r24
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	38 07       	cpc	r19, r24
    142a:	50 f4       	brcc	.+20     	; 0x1440 <__clzsi2+0x34>
    142c:	0f 3f       	cpi	r16, 0xFF	; 255
    142e:	11 05       	cpc	r17, r1
    1430:	21 05       	cpc	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	09 f0       	breq	.+2      	; 0x1438 <__clzsi2+0x2c>
    1436:	88 f4       	brcc	.+34     	; 0x145a <__clzsi2+0x4e>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	dc 01       	movw	r26, r24
    143e:	16 c0       	rjmp	.+44     	; 0x146c <__clzsi2+0x60>
    1440:	00 30       	cpi	r16, 0x00	; 0
    1442:	e0 e0       	ldi	r30, 0x00	; 0
    1444:	1e 07       	cpc	r17, r30
    1446:	e0 e0       	ldi	r30, 0x00	; 0
    1448:	2e 07       	cpc	r18, r30
    144a:	e1 e0       	ldi	r30, 0x01	; 1
    144c:	3e 07       	cpc	r19, r30
    144e:	50 f4       	brcc	.+20     	; 0x1464 <__clzsi2+0x58>
    1450:	80 e1       	ldi	r24, 0x10	; 16
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	09 c0       	rjmp	.+18     	; 0x146c <__clzsi2+0x60>
    145a:	88 e0       	ldi	r24, 0x08	; 8
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e0       	ldi	r26, 0x00	; 0
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__clzsi2+0x60>
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	48 1b       	sub	r20, r24
    1476:	59 0b       	sbc	r21, r25
    1478:	6a 0b       	sbc	r22, r26
    147a:	7b 0b       	sbc	r23, r27
    147c:	68 01       	movw	r12, r16
    147e:	79 01       	movw	r14, r18
    1480:	04 c0       	rjmp	.+8      	; 0x148a <__clzsi2+0x7e>
    1482:	f6 94       	lsr	r15
    1484:	e7 94       	ror	r14
    1486:	d7 94       	ror	r13
    1488:	c7 94       	ror	r12
    148a:	8a 95       	dec	r24
    148c:	d2 f7       	brpl	.-12     	; 0x1482 <__clzsi2+0x76>
    148e:	d7 01       	movw	r26, r14
    1490:	c6 01       	movw	r24, r12
    1492:	82 5f       	subi	r24, 0xF2	; 242
    1494:	9c 4f       	sbci	r25, 0xFC	; 252
    1496:	fc 01       	movw	r30, r24
    1498:	80 81       	ld	r24, Z
    149a:	48 1b       	sub	r20, r24
    149c:	51 09       	sbc	r21, r1
    149e:	61 09       	sbc	r22, r1
    14a0:	71 09       	sbc	r23, r1
    14a2:	ca 01       	movw	r24, r20
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	08 95       	ret

000014b2 <__pack_f>:
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	dc 01       	movw	r26, r24
    14c0:	14 96       	adiw	r26, 0x04	; 4
    14c2:	4d 91       	ld	r20, X+
    14c4:	5d 91       	ld	r21, X+
    14c6:	6d 91       	ld	r22, X+
    14c8:	7c 91       	ld	r23, X
    14ca:	17 97       	sbiw	r26, 0x07	; 7
    14cc:	11 96       	adiw	r26, 0x01	; 1
    14ce:	ec 91       	ld	r30, X
    14d0:	11 97       	sbiw	r26, 0x01	; 1
    14d2:	8c 91       	ld	r24, X
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	20 f4       	brcc	.+8      	; 0x14e0 <__pack_f+0x2e>
    14d8:	60 61       	ori	r22, 0x10	; 16
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a5 c0       	rjmp	.+330    	; 0x162a <__pack_f+0x178>
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <__pack_f+0x34>
    14e4:	9d c0       	rjmp	.+314    	; 0x1620 <__pack_f+0x16e>
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	09 f4       	brne	.+2      	; 0x14ec <__pack_f+0x3a>
    14ea:	94 c0       	rjmp	.+296    	; 0x1614 <__pack_f+0x162>
    14ec:	41 15       	cp	r20, r1
    14ee:	51 05       	cpc	r21, r1
    14f0:	61 05       	cpc	r22, r1
    14f2:	71 05       	cpc	r23, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <__pack_f+0x46>
    14f6:	91 c0       	rjmp	.+290    	; 0x161a <__pack_f+0x168>
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	13 97       	sbiw	r26, 0x03	; 3
    1500:	2f ef       	ldi	r18, 0xFF	; 255
    1502:	82 38       	cpi	r24, 0x82	; 130
    1504:	92 07       	cpc	r25, r18
    1506:	0c f0       	brlt	.+2      	; 0x150a <__pack_f+0x58>
    1508:	59 c0       	rjmp	.+178    	; 0x15bc <__pack_f+0x10a>
    150a:	22 e8       	ldi	r18, 0x82	; 130
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	28 1b       	sub	r18, r24
    1510:	39 0b       	sbc	r19, r25
    1512:	2a 31       	cpi	r18, 0x1A	; 26
    1514:	31 05       	cpc	r19, r1
    1516:	64 f5       	brge	.+88     	; 0x1570 <__pack_f+0xbe>
    1518:	6a 01       	movw	r12, r20
    151a:	7b 01       	movw	r14, r22
    151c:	02 2e       	mov	r0, r18
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <__pack_f+0x76>
    1520:	f6 94       	lsr	r15
    1522:	e7 94       	ror	r14
    1524:	d7 94       	ror	r13
    1526:	c7 94       	ror	r12
    1528:	0a 94       	dec	r0
    152a:	d2 f7       	brpl	.-12     	; 0x1520 <__pack_f+0x6e>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	04 c0       	rjmp	.+8      	; 0x153e <__pack_f+0x8c>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	aa 1f       	adc	r26, r26
    153c:	bb 1f       	adc	r27, r27
    153e:	2a 95       	dec	r18
    1540:	d2 f7       	brpl	.-12     	; 0x1536 <__pack_f+0x84>
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	a1 09       	sbc	r26, r1
    1546:	b1 09       	sbc	r27, r1
    1548:	84 23       	and	r24, r20
    154a:	95 23       	and	r25, r21
    154c:	a6 23       	and	r26, r22
    154e:	b7 23       	and	r27, r23
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	a1 05       	cpc	r26, r1
    155c:	b1 05       	cpc	r27, r1
    155e:	19 f4       	brne	.+6      	; 0x1566 <__pack_f+0xb4>
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	ba 01       	movw	r22, r20
    1566:	4c 29       	or	r20, r12
    1568:	5d 29       	or	r21, r13
    156a:	6e 29       	or	r22, r14
    156c:	7f 29       	or	r23, r15
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <__pack_f+0xc4>
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	ba 01       	movw	r22, r20
    1576:	db 01       	movw	r26, r22
    1578:	ca 01       	movw	r24, r20
    157a:	8f 77       	andi	r24, 0x7F	; 127
    157c:	90 70       	andi	r25, 0x00	; 0
    157e:	a0 70       	andi	r26, 0x00	; 0
    1580:	b0 70       	andi	r27, 0x00	; 0
    1582:	80 34       	cpi	r24, 0x40	; 64
    1584:	91 05       	cpc	r25, r1
    1586:	a1 05       	cpc	r26, r1
    1588:	b1 05       	cpc	r27, r1
    158a:	39 f4       	brne	.+14     	; 0x159a <__pack_f+0xe8>
    158c:	47 ff       	sbrs	r20, 7
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <__pack_f+0xf0>
    1590:	40 5c       	subi	r20, 0xC0	; 192
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	6f 4f       	sbci	r22, 0xFF	; 255
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__pack_f+0xf0>
    159a:	41 5c       	subi	r20, 0xC1	; 193
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	6f 4f       	sbci	r22, 0xFF	; 255
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	40 30       	cpi	r20, 0x00	; 0
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	52 07       	cpc	r21, r18
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	62 07       	cpc	r22, r18
    15b0:	20 e4       	ldi	r18, 0x40	; 64
    15b2:	72 07       	cpc	r23, r18
    15b4:	38 f5       	brcc	.+78     	; 0x1604 <__pack_f+0x152>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	24 c0       	rjmp	.+72     	; 0x1604 <__pack_f+0x152>
    15bc:	80 38       	cpi	r24, 0x80	; 128
    15be:	91 05       	cpc	r25, r1
    15c0:	7c f5       	brge	.+94     	; 0x1620 <__pack_f+0x16e>
    15c2:	8a 01       	movw	r16, r20
    15c4:	9b 01       	movw	r18, r22
    15c6:	0f 77       	andi	r16, 0x7F	; 127
    15c8:	10 70       	andi	r17, 0x00	; 0
    15ca:	20 70       	andi	r18, 0x00	; 0
    15cc:	30 70       	andi	r19, 0x00	; 0
    15ce:	00 34       	cpi	r16, 0x40	; 64
    15d0:	11 05       	cpc	r17, r1
    15d2:	21 05       	cpc	r18, r1
    15d4:	31 05       	cpc	r19, r1
    15d6:	39 f4       	brne	.+14     	; 0x15e6 <__pack_f+0x134>
    15d8:	47 ff       	sbrs	r20, 7
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <__pack_f+0x13c>
    15dc:	40 5c       	subi	r20, 0xC0	; 192
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	6f 4f       	sbci	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__pack_f+0x13c>
    15e6:	41 5c       	subi	r20, 0xC1	; 193
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	6f 4f       	sbci	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	77 fd       	sbrc	r23, 7
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <__pack_f+0x146>
    15f2:	81 58       	subi	r24, 0x81	; 129
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <__pack_f+0x152>
    15f8:	76 95       	lsr	r23
    15fa:	67 95       	ror	r22
    15fc:	57 95       	ror	r21
    15fe:	47 95       	ror	r20
    1600:	80 58       	subi	r24, 0x80	; 128
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	97 e0       	ldi	r25, 0x07	; 7
    1606:	76 95       	lsr	r23
    1608:	67 95       	ror	r22
    160a:	57 95       	ror	r21
    160c:	47 95       	ror	r20
    160e:	9a 95       	dec	r25
    1610:	d1 f7       	brne	.-12     	; 0x1606 <__pack_f+0x154>
    1612:	0b c0       	rjmp	.+22     	; 0x162a <__pack_f+0x178>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <__pack_f+0x172>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	05 c0       	rjmp	.+10     	; 0x162a <__pack_f+0x178>
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	ba 01       	movw	r22, r20
    162a:	98 2f       	mov	r25, r24
    162c:	97 95       	ror	r25
    162e:	99 27       	eor	r25, r25
    1630:	97 95       	ror	r25
    1632:	a6 2f       	mov	r26, r22
    1634:	af 77       	andi	r26, 0x7F	; 127
    1636:	e7 95       	ror	r30
    1638:	ee 27       	eor	r30, r30
    163a:	e7 95       	ror	r30
    163c:	86 95       	lsr	r24
    163e:	3a 2f       	mov	r19, r26
    1640:	39 2b       	or	r19, r25
    1642:	28 2f       	mov	r18, r24
    1644:	2e 2b       	or	r18, r30
    1646:	84 2f       	mov	r24, r20
    1648:	95 2f       	mov	r25, r21
    164a:	a3 2f       	mov	r26, r19
    164c:	b2 2f       	mov	r27, r18
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	08 95       	ret

00001660 <__unpack_f>:
    1660:	dc 01       	movw	r26, r24
    1662:	fb 01       	movw	r30, r22
    1664:	4c 91       	ld	r20, X
    1666:	11 96       	adiw	r26, 0x01	; 1
    1668:	5c 91       	ld	r21, X
    166a:	11 97       	sbiw	r26, 0x01	; 1
    166c:	12 96       	adiw	r26, 0x02	; 2
    166e:	8c 91       	ld	r24, X
    1670:	12 97       	sbiw	r26, 0x02	; 2
    1672:	68 2f       	mov	r22, r24
    1674:	6f 77       	andi	r22, 0x7F	; 127
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	98 2f       	mov	r25, r24
    167a:	99 1f       	adc	r25, r25
    167c:	99 27       	eor	r25, r25
    167e:	99 1f       	adc	r25, r25
    1680:	13 96       	adiw	r26, 0x03	; 3
    1682:	2c 91       	ld	r18, X
    1684:	13 97       	sbiw	r26, 0x03	; 3
    1686:	82 2f       	mov	r24, r18
    1688:	88 0f       	add	r24, r24
    168a:	89 2b       	or	r24, r25
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	22 1f       	adc	r18, r18
    1690:	22 27       	eor	r18, r18
    1692:	22 1f       	adc	r18, r18
    1694:	21 83       	std	Z+1, r18	; 0x01
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	39 f5       	brne	.+78     	; 0x16e8 <__unpack_f+0x88>
    169a:	41 15       	cp	r20, r1
    169c:	51 05       	cpc	r21, r1
    169e:	61 05       	cpc	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <__unpack_f+0x48>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	29 c0       	rjmp	.+82     	; 0x16fa <__unpack_f+0x9a>
    16a8:	82 e8       	ldi	r24, 0x82	; 130
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	93 83       	std	Z+3, r25	; 0x03
    16ae:	82 83       	std	Z+2, r24	; 0x02
    16b0:	27 e0       	ldi	r18, 0x07	; 7
    16b2:	44 0f       	add	r20, r20
    16b4:	55 1f       	adc	r21, r21
    16b6:	66 1f       	adc	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	2a 95       	dec	r18
    16bc:	d1 f7       	brne	.-12     	; 0x16b2 <__unpack_f+0x52>
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	80 83       	st	Z, r24
    16c2:	09 c0       	rjmp	.+18     	; 0x16d6 <__unpack_f+0x76>
    16c4:	44 0f       	add	r20, r20
    16c6:	55 1f       	adc	r21, r21
    16c8:	66 1f       	adc	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	93 83       	std	Z+3, r25	; 0x03
    16d4:	82 83       	std	Z+2, r24	; 0x02
    16d6:	40 30       	cpi	r20, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	58 07       	cpc	r21, r24
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	68 07       	cpc	r22, r24
    16e0:	80 e4       	ldi	r24, 0x40	; 64
    16e2:	78 07       	cpc	r23, r24
    16e4:	78 f3       	brcs	.-34     	; 0x16c4 <__unpack_f+0x64>
    16e6:	20 c0       	rjmp	.+64     	; 0x1728 <__unpack_f+0xc8>
    16e8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ea:	91 05       	cpc	r25, r1
    16ec:	79 f4       	brne	.+30     	; 0x170c <__unpack_f+0xac>
    16ee:	41 15       	cp	r20, r1
    16f0:	51 05       	cpc	r21, r1
    16f2:	61 05       	cpc	r22, r1
    16f4:	71 05       	cpc	r23, r1
    16f6:	19 f4       	brne	.+6      	; 0x16fe <__unpack_f+0x9e>
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	80 83       	st	Z, r24
    16fc:	08 95       	ret
    16fe:	64 ff       	sbrs	r22, 4
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <__unpack_f+0xa8>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	80 83       	st	Z, r24
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <__unpack_f+0xc8>
    1708:	10 82       	st	Z, r1
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <__unpack_f+0xc8>
    170c:	8f 57       	subi	r24, 0x7F	; 127
    170e:	90 40       	sbci	r25, 0x00	; 0
    1710:	93 83       	std	Z+3, r25	; 0x03
    1712:	82 83       	std	Z+2, r24	; 0x02
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	80 83       	st	Z, r24
    1718:	87 e0       	ldi	r24, 0x07	; 7
    171a:	44 0f       	add	r20, r20
    171c:	55 1f       	adc	r21, r21
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	8a 95       	dec	r24
    1724:	d1 f7       	brne	.-12     	; 0x171a <__unpack_f+0xba>
    1726:	70 64       	ori	r23, 0x40	; 64
    1728:	44 83       	std	Z+4, r20	; 0x04
    172a:	55 83       	std	Z+5, r21	; 0x05
    172c:	66 83       	std	Z+6, r22	; 0x06
    172e:	77 83       	std	Z+7, r23	; 0x07
    1730:	08 95       	ret

00001732 <main>:
#include "uart.h"
#include "adc.h"


int main()
{
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	2a 97       	sbiw	r28, 0x0a	; 10
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;

	uart_init();
    1746:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uart_init>
	task_init();
    174a:	0e 94 22 05 	call	0xa44	; 0xa44 <task_init>
	timer_init();
    174e:	0e 94 a2 06 	call	0xd44	; 0xd44 <timer_init>
	adc_init();
    1752:	0e 94 28 08 	call	0x1050	; 0x1050 <adc_init>

	printf("$ ");
    1756:	0f 92       	push	r0
    1758:	0f 92       	push	r0
    175a:	85 e6       	ldi	r24, 0x65	; 101
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	ed b7       	in	r30, 0x3d	; 61
    1760:	fe b7       	in	r31, 0x3e	; 62
    1762:	92 83       	std	Z+2, r25	; 0x02
    1764:	81 83       	std	Z+1, r24	; 0x01
    1766:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0

	while(1) {
		cli();
    176e:	f8 94       	cli
			tag = task_delete(&task);
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	0e 94 6b 05 	call	0xad6	; 0xad6 <task_delete>
			sei();
    1778:	78 94       	sei
			if(tag)
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	c1 f3       	breq	.-16     	; 0x176e <main+0x3c>
				(*(task.fun))(task.arg);
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	ce 01       	movw	r24, r28
    1784:	03 96       	adiw	r24, 0x03	; 3
    1786:	19 95       	eicall
    1788:	f2 cf       	rjmp	.-28     	; 0x176e <main+0x3c>

0000178a <__divmodhi4>:
    178a:	97 fb       	bst	r25, 7
    178c:	09 2e       	mov	r0, r25
    178e:	07 26       	eor	r0, r23
    1790:	0a d0       	rcall	.+20     	; 0x17a6 <__divmodhi4_neg1>
    1792:	77 fd       	sbrc	r23, 7
    1794:	04 d0       	rcall	.+8      	; 0x179e <__divmodhi4_neg2>
    1796:	0c d0       	rcall	.+24     	; 0x17b0 <__udivmodhi4>
    1798:	06 d0       	rcall	.+12     	; 0x17a6 <__divmodhi4_neg1>
    179a:	00 20       	and	r0, r0
    179c:	1a f4       	brpl	.+6      	; 0x17a4 <__divmodhi4_exit>

0000179e <__divmodhi4_neg2>:
    179e:	70 95       	com	r23
    17a0:	61 95       	neg	r22
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255

000017a4 <__divmodhi4_exit>:
    17a4:	08 95       	ret

000017a6 <__divmodhi4_neg1>:
    17a6:	f6 f7       	brtc	.-4      	; 0x17a4 <__divmodhi4_exit>
    17a8:	90 95       	com	r25
    17aa:	81 95       	neg	r24
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	08 95       	ret

000017b0 <__udivmodhi4>:
    17b0:	aa 1b       	sub	r26, r26
    17b2:	bb 1b       	sub	r27, r27
    17b4:	51 e1       	ldi	r21, 0x11	; 17
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <__udivmodhi4_ep>

000017b8 <__udivmodhi4_loop>:
    17b8:	aa 1f       	adc	r26, r26
    17ba:	bb 1f       	adc	r27, r27
    17bc:	a6 17       	cp	r26, r22
    17be:	b7 07       	cpc	r27, r23
    17c0:	10 f0       	brcs	.+4      	; 0x17c6 <__udivmodhi4_ep>
    17c2:	a6 1b       	sub	r26, r22
    17c4:	b7 0b       	sbc	r27, r23

000017c6 <__udivmodhi4_ep>:
    17c6:	88 1f       	adc	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	5a 95       	dec	r21
    17cc:	a9 f7       	brne	.-22     	; 0x17b8 <__udivmodhi4_loop>
    17ce:	80 95       	com	r24
    17d0:	90 95       	com	r25
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	08 95       	ret

000017d8 <__prologue_saves__>:
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	ca 1b       	sub	r28, r26
    1802:	db 0b       	sbc	r29, r27
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	19 94       	eijmp

00001810 <__epilogue_restores__>:
    1810:	2a 88       	ldd	r2, Y+18	; 0x12
    1812:	39 88       	ldd	r3, Y+17	; 0x11
    1814:	48 88       	ldd	r4, Y+16	; 0x10
    1816:	5f 84       	ldd	r5, Y+15	; 0x0f
    1818:	6e 84       	ldd	r6, Y+14	; 0x0e
    181a:	7d 84       	ldd	r7, Y+13	; 0x0d
    181c:	8c 84       	ldd	r8, Y+12	; 0x0c
    181e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1820:	aa 84       	ldd	r10, Y+10	; 0x0a
    1822:	b9 84       	ldd	r11, Y+9	; 0x09
    1824:	c8 84       	ldd	r12, Y+8	; 0x08
    1826:	df 80       	ldd	r13, Y+7	; 0x07
    1828:	ee 80       	ldd	r14, Y+6	; 0x06
    182a:	fd 80       	ldd	r15, Y+5	; 0x05
    182c:	0c 81       	ldd	r16, Y+4	; 0x04
    182e:	1b 81       	ldd	r17, Y+3	; 0x03
    1830:	aa 81       	ldd	r26, Y+2	; 0x02
    1832:	b9 81       	ldd	r27, Y+1	; 0x01
    1834:	ce 0f       	add	r28, r30
    1836:	d1 1d       	adc	r29, r1
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	ed 01       	movw	r28, r26
    1844:	08 95       	ret

00001846 <malloc>:
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ac 01       	movw	r20, r24
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	91 05       	cpc	r25, r1
    1850:	10 f4       	brcc	.+4      	; 0x1856 <malloc+0x10>
    1852:	42 e0       	ldi	r20, 0x02	; 2
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	e0 91 4d 05 	lds	r30, 0x054D
    185a:	f0 91 4e 05 	lds	r31, 0x054E
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	24 c0       	rjmp	.+72     	; 0x18b0 <malloc+0x6a>
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	84 17       	cp	r24, r20
    186e:	95 07       	cpc	r25, r21
    1870:	d0 f0       	brcs	.+52     	; 0x18a6 <malloc+0x60>
    1872:	84 17       	cp	r24, r20
    1874:	95 07       	cpc	r25, r21
    1876:	71 f4       	brne	.+28     	; 0x1894 <malloc+0x4e>
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	10 97       	sbiw	r26, 0x00	; 0
    187e:	29 f0       	breq	.+10     	; 0x188a <malloc+0x44>
    1880:	13 96       	adiw	r26, 0x03	; 3
    1882:	9c 93       	st	X, r25
    1884:	8e 93       	st	-X, r24
    1886:	12 97       	sbiw	r26, 0x02	; 2
    1888:	2c c0       	rjmp	.+88     	; 0x18e2 <malloc+0x9c>
    188a:	90 93 4e 05 	sts	0x054E, r25
    188e:	80 93 4d 05 	sts	0x054D, r24
    1892:	27 c0       	rjmp	.+78     	; 0x18e2 <malloc+0x9c>
    1894:	21 15       	cp	r18, r1
    1896:	31 05       	cpc	r19, r1
    1898:	19 f0       	breq	.+6      	; 0x18a0 <malloc+0x5a>
    189a:	82 17       	cp	r24, r18
    189c:	93 07       	cpc	r25, r19
    189e:	18 f4       	brcc	.+6      	; 0x18a6 <malloc+0x60>
    18a0:	9c 01       	movw	r18, r24
    18a2:	bd 01       	movw	r22, r26
    18a4:	ef 01       	movw	r28, r30
    18a6:	92 81       	ldd	r25, Z+2	; 0x02
    18a8:	83 81       	ldd	r24, Z+3	; 0x03
    18aa:	df 01       	movw	r26, r30
    18ac:	e9 2f       	mov	r30, r25
    18ae:	f8 2f       	mov	r31, r24
    18b0:	30 97       	sbiw	r30, 0x00	; 0
    18b2:	d1 f6       	brne	.-76     	; 0x1868 <malloc+0x22>
    18b4:	21 15       	cp	r18, r1
    18b6:	31 05       	cpc	r19, r1
    18b8:	f9 f0       	breq	.+62     	; 0x18f8 <malloc+0xb2>
    18ba:	c9 01       	movw	r24, r18
    18bc:	84 1b       	sub	r24, r20
    18be:	95 0b       	sbc	r25, r21
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	91 05       	cpc	r25, r1
    18c4:	80 f4       	brcc	.+32     	; 0x18e6 <malloc+0xa0>
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	61 15       	cp	r22, r1
    18cc:	71 05       	cpc	r23, r1
    18ce:	21 f0       	breq	.+8      	; 0x18d8 <malloc+0x92>
    18d0:	fb 01       	movw	r30, r22
    18d2:	93 83       	std	Z+3, r25	; 0x03
    18d4:	82 83       	std	Z+2, r24	; 0x02
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <malloc+0x9a>
    18d8:	90 93 4e 05 	sts	0x054E, r25
    18dc:	80 93 4d 05 	sts	0x054D, r24
    18e0:	fe 01       	movw	r30, r28
    18e2:	32 96       	adiw	r30, 0x02	; 2
    18e4:	42 c0       	rjmp	.+132    	; 0x196a <malloc+0x124>
    18e6:	fe 01       	movw	r30, r28
    18e8:	e8 0f       	add	r30, r24
    18ea:	f9 1f       	adc	r31, r25
    18ec:	41 93       	st	Z+, r20
    18ee:	51 93       	st	Z+, r21
    18f0:	02 97       	sbiw	r24, 0x02	; 2
    18f2:	99 83       	std	Y+1, r25	; 0x01
    18f4:	88 83       	st	Y, r24
    18f6:	39 c0       	rjmp	.+114    	; 0x196a <malloc+0x124>
    18f8:	80 91 4b 05 	lds	r24, 0x054B
    18fc:	90 91 4c 05 	lds	r25, 0x054C
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	41 f4       	brne	.+16     	; 0x1914 <malloc+0xce>
    1904:	80 91 10 04 	lds	r24, 0x0410
    1908:	90 91 11 04 	lds	r25, 0x0411
    190c:	90 93 4c 05 	sts	0x054C, r25
    1910:	80 93 4b 05 	sts	0x054B, r24
    1914:	20 91 0e 04 	lds	r18, 0x040E
    1918:	30 91 0f 04 	lds	r19, 0x040F
    191c:	21 15       	cp	r18, r1
    191e:	31 05       	cpc	r19, r1
    1920:	41 f4       	brne	.+16     	; 0x1932 <malloc+0xec>
    1922:	2d b7       	in	r18, 0x3d	; 61
    1924:	3e b7       	in	r19, 0x3e	; 62
    1926:	80 91 12 04 	lds	r24, 0x0412
    192a:	90 91 13 04 	lds	r25, 0x0413
    192e:	28 1b       	sub	r18, r24
    1930:	39 0b       	sbc	r19, r25
    1932:	e0 91 4b 05 	lds	r30, 0x054B
    1936:	f0 91 4c 05 	lds	r31, 0x054C
    193a:	e2 17       	cp	r30, r18
    193c:	f3 07       	cpc	r31, r19
    193e:	98 f4       	brcc	.+38     	; 0x1966 <malloc+0x120>
    1940:	2e 1b       	sub	r18, r30
    1942:	3f 0b       	sbc	r19, r31
    1944:	24 17       	cp	r18, r20
    1946:	35 07       	cpc	r19, r21
    1948:	70 f0       	brcs	.+28     	; 0x1966 <malloc+0x120>
    194a:	ca 01       	movw	r24, r20
    194c:	02 96       	adiw	r24, 0x02	; 2
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	48 f0       	brcs	.+18     	; 0x1966 <malloc+0x120>
    1954:	8e 0f       	add	r24, r30
    1956:	9f 1f       	adc	r25, r31
    1958:	90 93 4c 05 	sts	0x054C, r25
    195c:	80 93 4b 05 	sts	0x054B, r24
    1960:	41 93       	st	Z+, r20
    1962:	51 93       	st	Z+, r21
    1964:	02 c0       	rjmp	.+4      	; 0x196a <malloc+0x124>
    1966:	e0 e0       	ldi	r30, 0x00	; 0
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	cf 01       	movw	r24, r30
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <free>:
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	9c 01       	movw	r18, r24
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	09 f4       	brne	.+2      	; 0x1982 <free+0x10>
    1980:	8c c0       	rjmp	.+280    	; 0x1a9a <free+0x128>
    1982:	dc 01       	movw	r26, r24
    1984:	12 97       	sbiw	r26, 0x02	; 2
    1986:	13 96       	adiw	r26, 0x03	; 3
    1988:	1c 92       	st	X, r1
    198a:	1e 92       	st	-X, r1
    198c:	12 97       	sbiw	r26, 0x02	; 2
    198e:	60 91 4d 05 	lds	r22, 0x054D
    1992:	70 91 4e 05 	lds	r23, 0x054E
    1996:	61 15       	cp	r22, r1
    1998:	71 05       	cpc	r23, r1
    199a:	89 f4       	brne	.+34     	; 0x19be <free+0x4c>
    199c:	8d 91       	ld	r24, X+
    199e:	9c 91       	ld	r25, X
    19a0:	11 97       	sbiw	r26, 0x01	; 1
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
    19a6:	20 91 4b 05 	lds	r18, 0x054B
    19aa:	30 91 4c 05 	lds	r19, 0x054C
    19ae:	28 17       	cp	r18, r24
    19b0:	39 07       	cpc	r19, r25
    19b2:	69 f5       	brne	.+90     	; 0x1a0e <free+0x9c>
    19b4:	b0 93 4c 05 	sts	0x054C, r27
    19b8:	a0 93 4b 05 	sts	0x054B, r26
    19bc:	6e c0       	rjmp	.+220    	; 0x1a9a <free+0x128>
    19be:	fb 01       	movw	r30, r22
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <free+0x56>
    19c6:	fc 01       	movw	r30, r24
    19c8:	ea 17       	cp	r30, r26
    19ca:	fb 07       	cpc	r31, r27
    19cc:	30 f4       	brcc	.+12     	; 0x19da <free+0x68>
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	af 01       	movw	r20, r30
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	b9 f7       	brne	.-18     	; 0x19c6 <free+0x54>
    19d8:	1f c0       	rjmp	.+62     	; 0x1a18 <free+0xa6>
    19da:	e9 01       	movw	r28, r18
    19dc:	22 97       	sbiw	r28, 0x02	; 2
    19de:	fb 83       	std	Y+3, r31	; 0x03
    19e0:	ea 83       	std	Y+2, r30	; 0x02
    19e2:	08 81       	ld	r16, Y
    19e4:	19 81       	ldd	r17, Y+1	; 0x01
    19e6:	c9 01       	movw	r24, r18
    19e8:	80 0f       	add	r24, r16
    19ea:	91 1f       	adc	r25, r17
    19ec:	8e 17       	cp	r24, r30
    19ee:	9f 07       	cpc	r25, r31
    19f0:	59 f4       	brne	.+22     	; 0x1a08 <free+0x96>
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	80 0f       	add	r24, r16
    19f8:	91 1f       	adc	r25, r17
    19fa:	02 96       	adiw	r24, 0x02	; 2
    19fc:	99 83       	std	Y+1, r25	; 0x01
    19fe:	88 83       	st	Y, r24
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	9b 83       	std	Y+3, r25	; 0x03
    1a06:	8a 83       	std	Y+2, r24	; 0x02
    1a08:	41 15       	cp	r20, r1
    1a0a:	51 05       	cpc	r21, r1
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <free+0xa6>
    1a0e:	b0 93 4e 05 	sts	0x054E, r27
    1a12:	a0 93 4d 05 	sts	0x054D, r26
    1a16:	41 c0       	rjmp	.+130    	; 0x1a9a <free+0x128>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	b3 83       	std	Z+3, r27	; 0x03
    1a1c:	a2 83       	std	Z+2, r26	; 0x02
    1a1e:	c1 91       	ld	r28, Z+
    1a20:	d1 91       	ld	r29, Z+
    1a22:	ec 0f       	add	r30, r28
    1a24:	fd 1f       	adc	r31, r29
    1a26:	ae 17       	cp	r26, r30
    1a28:	bf 07       	cpc	r27, r31
    1a2a:	81 f4       	brne	.+32     	; 0x1a4c <free+0xda>
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	92 91       	ld	r25, -Z
    1a30:	82 91       	ld	r24, -Z
    1a32:	8c 0f       	add	r24, r28
    1a34:	9d 1f       	adc	r25, r29
    1a36:	02 96       	adiw	r24, 0x02	; 2
    1a38:	da 01       	movw	r26, r20
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	9c 93       	st	X, r25
    1a3e:	8e 93       	st	-X, r24
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	13 96       	adiw	r26, 0x03	; 3
    1a46:	9c 93       	st	X, r25
    1a48:	8e 93       	st	-X, r24
    1a4a:	12 97       	sbiw	r26, 0x02	; 2
    1a4c:	e0 e0       	ldi	r30, 0x00	; 0
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <free+0xe4>
    1a52:	fb 01       	movw	r30, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	db 01       	movw	r26, r22
    1a58:	12 96       	adiw	r26, 0x02	; 2
    1a5a:	8d 91       	ld	r24, X+
    1a5c:	9c 91       	ld	r25, X
    1a5e:	13 97       	sbiw	r26, 0x03	; 3
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	b9 f7       	brne	.-18     	; 0x1a52 <free+0xe0>
    1a64:	cb 01       	movw	r24, r22
    1a66:	02 96       	adiw	r24, 0x02	; 2
    1a68:	2d 91       	ld	r18, X+
    1a6a:	3c 91       	ld	r19, X
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	82 0f       	add	r24, r18
    1a70:	93 1f       	adc	r25, r19
    1a72:	20 91 4b 05 	lds	r18, 0x054B
    1a76:	30 91 4c 05 	lds	r19, 0x054C
    1a7a:	28 17       	cp	r18, r24
    1a7c:	39 07       	cpc	r19, r25
    1a7e:	69 f4       	brne	.+26     	; 0x1a9a <free+0x128>
    1a80:	30 97       	sbiw	r30, 0x00	; 0
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <free+0x11c>
    1a84:	10 92 4e 05 	sts	0x054E, r1
    1a88:	10 92 4d 05 	sts	0x054D, r1
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <free+0x120>
    1a8e:	13 82       	std	Z+3, r1	; 0x03
    1a90:	12 82       	std	Z+2, r1	; 0x02
    1a92:	70 93 4c 05 	sts	0x054C, r23
    1a96:	60 93 4b 05 	sts	0x054B, r22
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <atoi>:
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	88 27       	eor	r24, r24
    1aa8:	99 27       	eor	r25, r25
    1aaa:	e8 94       	clt
    1aac:	21 91       	ld	r18, Z+
    1aae:	20 32       	cpi	r18, 0x20	; 32
    1ab0:	e9 f3       	breq	.-6      	; 0x1aac <atoi+0x8>
    1ab2:	29 30       	cpi	r18, 0x09	; 9
    1ab4:	10 f0       	brcs	.+4      	; 0x1aba <atoi+0x16>
    1ab6:	2e 30       	cpi	r18, 0x0E	; 14
    1ab8:	c8 f3       	brcs	.-14     	; 0x1aac <atoi+0x8>
    1aba:	2b 32       	cpi	r18, 0x2B	; 43
    1abc:	41 f0       	breq	.+16     	; 0x1ace <atoi+0x2a>
    1abe:	2d 32       	cpi	r18, 0x2D	; 45
    1ac0:	39 f4       	brne	.+14     	; 0x1ad0 <atoi+0x2c>
    1ac2:	68 94       	set
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <atoi+0x2a>
    1ac6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulhi_const_10>
    1aca:	82 0f       	add	r24, r18
    1acc:	91 1d       	adc	r25, r1
    1ace:	21 91       	ld	r18, Z+
    1ad0:	20 53       	subi	r18, 0x30	; 48
    1ad2:	2a 30       	cpi	r18, 0x0A	; 10
    1ad4:	c0 f3       	brcs	.-16     	; 0x1ac6 <atoi+0x22>
    1ad6:	1e f4       	brtc	.+6      	; 0x1ade <atoi+0x3a>
    1ad8:	90 95       	com	r25
    1ada:	81 95       	neg	r24
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	08 95       	ret

00001ae0 <strtok>:
    1ae0:	4c e1       	ldi	r20, 0x1C	; 28
    1ae2:	54 e0       	ldi	r21, 0x04	; 4
    1ae4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <strtok_r>
    1ae8:	08 95       	ret

00001aea <strcmp>:
    1aea:	fb 01       	movw	r30, r22
    1aec:	dc 01       	movw	r26, r24
    1aee:	8d 91       	ld	r24, X+
    1af0:	01 90       	ld	r0, Z+
    1af2:	80 19       	sub	r24, r0
    1af4:	01 10       	cpse	r0, r1
    1af6:	d9 f3       	breq	.-10     	; 0x1aee <strcmp+0x4>
    1af8:	99 0b       	sbc	r25, r25
    1afa:	08 95       	ret

00001afc <strcpy>:
    1afc:	fb 01       	movw	r30, r22
    1afe:	dc 01       	movw	r26, r24
    1b00:	01 90       	ld	r0, Z+
    1b02:	0d 92       	st	X+, r0
    1b04:	00 20       	and	r0, r0
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <strcpy+0x4>
    1b08:	08 95       	ret

00001b0a <strtok_r>:
    1b0a:	fa 01       	movw	r30, r20
    1b0c:	a1 91       	ld	r26, Z+
    1b0e:	b0 81       	ld	r27, Z
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	19 f4       	brne	.+6      	; 0x1b1a <strtok_r+0x10>
    1b14:	10 97       	sbiw	r26, 0x00	; 0
    1b16:	e1 f0       	breq	.+56     	; 0x1b50 <strtok_r+0x46>
    1b18:	cd 01       	movw	r24, r26
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0d 90       	ld	r0, X+
    1b20:	00 20       	and	r0, r0
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <strtok_r+0x1e>
    1b24:	c0 01       	movw	r24, r0
    1b26:	13 c0       	rjmp	.+38     	; 0x1b4e <strtok_r+0x44>
    1b28:	fb 01       	movw	r30, r22
    1b2a:	21 91       	ld	r18, Z+
    1b2c:	22 23       	and	r18, r18
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <strtok_r+0x2c>
    1b30:	20 15       	cp	r18, r0
    1b32:	d9 f7       	brne	.-10     	; 0x1b2a <strtok_r+0x20>
    1b34:	f3 cf       	rjmp	.-26     	; 0x1b1c <strtok_r+0x12>
    1b36:	fb 01       	movw	r30, r22
    1b38:	21 91       	ld	r18, Z+
    1b3a:	20 15       	cp	r18, r0
    1b3c:	19 f4       	brne	.+6      	; 0x1b44 <strtok_r+0x3a>
    1b3e:	1e 92       	st	-X, r1
    1b40:	11 96       	adiw	r26, 0x01	; 1
    1b42:	06 c0       	rjmp	.+12     	; 0x1b50 <strtok_r+0x46>
    1b44:	22 23       	and	r18, r18
    1b46:	c1 f7       	brne	.-16     	; 0x1b38 <strtok_r+0x2e>
    1b48:	0d 90       	ld	r0, X+
    1b4a:	00 20       	and	r0, r0
    1b4c:	a1 f7       	brne	.-24     	; 0x1b36 <strtok_r+0x2c>
    1b4e:	d0 01       	movw	r26, r0
    1b50:	fa 01       	movw	r30, r20
    1b52:	a1 93       	st	Z+, r26
    1b54:	b0 83       	st	Z, r27
    1b56:	08 95       	ret

00001b58 <__mulhi_const_10>:
    1b58:	7a e0       	ldi	r23, 0x0A	; 10
    1b5a:	97 9f       	mul	r25, r23
    1b5c:	90 2d       	mov	r25, r0
    1b5e:	87 9f       	mul	r24, r23
    1b60:	80 2d       	mov	r24, r0
    1b62:	91 0d       	add	r25, r1
    1b64:	11 24       	eor	r1, r1
    1b66:	08 95       	ret

00001b68 <fgets>:
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	8c 01       	movw	r16, r24
    1b7a:	6a 01       	movw	r12, r20
    1b7c:	fa 01       	movw	r30, r20
    1b7e:	83 81       	ldd	r24, Z+3	; 0x03
    1b80:	80 ff       	sbrs	r24, 0
    1b82:	1a c0       	rjmp	.+52     	; 0x1bb8 <fgets+0x50>
    1b84:	16 16       	cp	r1, r22
    1b86:	17 06       	cpc	r1, r23
    1b88:	bc f4       	brge	.+46     	; 0x1bb8 <fgets+0x50>
    1b8a:	7b 01       	movw	r14, r22
    1b8c:	e8 01       	movw	r28, r16
    1b8e:	0e c0       	rjmp	.+28     	; 0x1bac <fgets+0x44>
    1b90:	c6 01       	movw	r24, r12
    1b92:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    1b96:	ff ef       	ldi	r31, 0xFF	; 255
    1b98:	8f 3f       	cpi	r24, 0xFF	; 255
    1b9a:	9f 07       	cpc	r25, r31
    1b9c:	69 f0       	breq	.+26     	; 0x1bb8 <fgets+0x50>
    1b9e:	89 93       	st	Y+, r24
    1ba0:	08 94       	sec
    1ba2:	e1 08       	sbc	r14, r1
    1ba4:	f1 08       	sbc	r15, r1
    1ba6:	8a 30       	cpi	r24, 0x0A	; 10
    1ba8:	91 05       	cpc	r25, r1
    1baa:	21 f0       	breq	.+8      	; 0x1bb4 <fgets+0x4c>
    1bac:	21 e0       	ldi	r18, 0x01	; 1
    1bae:	e2 16       	cp	r14, r18
    1bb0:	f1 04       	cpc	r15, r1
    1bb2:	71 f7       	brne	.-36     	; 0x1b90 <fgets+0x28>
    1bb4:	18 82       	st	Y, r1
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <fgets+0x54>
    1bb8:	00 e0       	ldi	r16, 0x00	; 0
    1bba:	10 e0       	ldi	r17, 0x00	; 0
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	df 90       	pop	r13
    1bcc:	cf 90       	pop	r12
    1bce:	08 95       	ret

00001bd0 <gets>:
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	8c 01       	movw	r16, r24
    1bda:	e0 91 4f 05 	lds	r30, 0x054F
    1bde:	f0 91 50 05 	lds	r31, 0x0550
    1be2:	83 81       	ldd	r24, Z+3	; 0x03
    1be4:	80 ff       	sbrs	r24, 0
    1be6:	12 c0       	rjmp	.+36     	; 0x1c0c <gets+0x3c>
    1be8:	e8 01       	movw	r28, r16
    1bea:	80 91 4f 05 	lds	r24, 0x054F
    1bee:	90 91 50 05 	lds	r25, 0x0550
    1bf2:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    1bf6:	2f ef       	ldi	r18, 0xFF	; 255
    1bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfa:	92 07       	cpc	r25, r18
    1bfc:	39 f0       	breq	.+14     	; 0x1c0c <gets+0x3c>
    1bfe:	89 93       	st	Y+, r24
    1c00:	8a 30       	cpi	r24, 0x0A	; 10
    1c02:	91 05       	cpc	r25, r1
    1c04:	91 f7       	brne	.-28     	; 0x1bea <gets+0x1a>
    1c06:	21 97       	sbiw	r28, 0x01	; 1
    1c08:	18 82       	st	Y, r1
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <gets+0x40>
    1c0c:	00 e0       	ldi	r16, 0x00	; 0
    1c0e:	10 e0       	ldi	r17, 0x00	; 0
    1c10:	c8 01       	movw	r24, r16
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <printf>:
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	fe 01       	movw	r30, r28
    1c26:	36 96       	adiw	r30, 0x06	; 6
    1c28:	61 91       	ld	r22, Z+
    1c2a:	71 91       	ld	r23, Z+
    1c2c:	80 91 51 05 	lds	r24, 0x0551
    1c30:	90 91 52 05 	lds	r25, 0x0552
    1c34:	af 01       	movw	r20, r30
    1c36:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <vfprintf>
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	08 95       	ret

00001c40 <putchar>:
    1c40:	60 91 51 05 	lds	r22, 0x0551
    1c44:	70 91 52 05 	lds	r23, 0x0552
    1c48:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    1c4c:	08 95       	ret

00001c4e <puts>:
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	8c 01       	movw	r16, r24
    1c58:	e0 91 51 05 	lds	r30, 0x0551
    1c5c:	f0 91 52 05 	lds	r31, 0x0552
    1c60:	83 81       	ldd	r24, Z+3	; 0x03
    1c62:	81 ff       	sbrs	r24, 1
    1c64:	1a c0       	rjmp	.+52     	; 0x1c9a <puts+0x4c>
    1c66:	c0 e0       	ldi	r28, 0x00	; 0
    1c68:	d0 e0       	ldi	r29, 0x00	; 0
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <puts+0x28>
    1c6c:	19 95       	eicall
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <puts+0x28>
    1c72:	cf ef       	ldi	r28, 0xFF	; 255
    1c74:	df ef       	ldi	r29, 0xFF	; 255
    1c76:	f8 01       	movw	r30, r16
    1c78:	81 91       	ld	r24, Z+
    1c7a:	8f 01       	movw	r16, r30
    1c7c:	60 91 51 05 	lds	r22, 0x0551
    1c80:	70 91 52 05 	lds	r23, 0x0552
    1c84:	db 01       	movw	r26, r22
    1c86:	18 96       	adiw	r26, 0x08	; 8
    1c88:	ed 91       	ld	r30, X+
    1c8a:	fc 91       	ld	r31, X
    1c8c:	19 97       	sbiw	r26, 0x09	; 9
    1c8e:	88 23       	and	r24, r24
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <puts+0x1e>
    1c92:	8a e0       	ldi	r24, 0x0A	; 10
    1c94:	19 95       	eicall
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <puts+0x50>
    1c9a:	cf ef       	ldi	r28, 0xFF	; 255
    1c9c:	df ef       	ldi	r29, 0xFF	; 255
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	08 95       	ret

00001caa <sprintf>:
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	2e 97       	sbiw	r28, 0x0e	; 14
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	0e 89       	ldd	r16, Y+22	; 0x16
    1cc4:	1f 89       	ldd	r17, Y+23	; 0x17
    1cc6:	86 e0       	ldi	r24, 0x06	; 6
    1cc8:	8c 83       	std	Y+4, r24	; 0x04
    1cca:	1a 83       	std	Y+2, r17	; 0x02
    1ccc:	09 83       	std	Y+1, r16	; 0x01
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	9f e7       	ldi	r25, 0x7F	; 127
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
    1cd6:	ae 01       	movw	r20, r28
    1cd8:	46 5e       	subi	r20, 0xE6	; 230
    1cda:	5f 4f       	sbci	r21, 0xFF	; 255
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	68 8d       	ldd	r22, Y+24	; 0x18
    1ce2:	79 8d       	ldd	r23, Y+25	; 0x19
    1ce4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <vfprintf>
    1ce8:	ef 81       	ldd	r30, Y+7	; 0x07
    1cea:	f8 85       	ldd	r31, Y+8	; 0x08
    1cec:	e0 0f       	add	r30, r16
    1cee:	f1 1f       	adc	r31, r17
    1cf0:	10 82       	st	Z, r1
    1cf2:	2e 96       	adiw	r28, 0x0e	; 14
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	08 95       	ret

00001d08 <sscanf>:
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	2e 97       	sbiw	r28, 0x0e	; 14
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	85 e0       	ldi	r24, 0x05	; 5
    1d1e:	8c 83       	std	Y+4, r24	; 0x04
    1d20:	8c 89       	ldd	r24, Y+20	; 0x14
    1d22:	9d 89       	ldd	r25, Y+21	; 0x15
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	ae 01       	movw	r20, r28
    1d2a:	48 5e       	subi	r20, 0xE8	; 232
    1d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	6e 89       	ldd	r22, Y+22	; 0x16
    1d34:	7f 89       	ldd	r23, Y+23	; 0x17
    1d36:	0e 94 51 12 	call	0x24a2	; 0x24a2 <vfscanf>
    1d3a:	2e 96       	adiw	r28, 0x0e	; 14
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <vfprintf>:
    1d4c:	2f 92       	push	r2
    1d4e:	3f 92       	push	r3
    1d50:	4f 92       	push	r4
    1d52:	5f 92       	push	r5
    1d54:	6f 92       	push	r6
    1d56:	7f 92       	push	r7
    1d58:	8f 92       	push	r8
    1d5a:	9f 92       	push	r9
    1d5c:	af 92       	push	r10
    1d5e:	bf 92       	push	r11
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	2d 97       	sbiw	r28, 0x0d	; 13
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	3c 01       	movw	r6, r24
    1d82:	7d 87       	std	Y+13, r23	; 0x0d
    1d84:	6c 87       	std	Y+12, r22	; 0x0c
    1d86:	5a 01       	movw	r10, r20
    1d88:	fc 01       	movw	r30, r24
    1d8a:	17 82       	std	Z+7, r1	; 0x07
    1d8c:	16 82       	std	Z+6, r1	; 0x06
    1d8e:	83 81       	ldd	r24, Z+3	; 0x03
    1d90:	81 ff       	sbrs	r24, 1
    1d92:	c8 c1       	rjmp	.+912    	; 0x2124 <vfprintf+0x3d8>
    1d94:	2e 01       	movw	r4, r28
    1d96:	08 94       	sec
    1d98:	41 1c       	adc	r4, r1
    1d9a:	51 1c       	adc	r5, r1
    1d9c:	f3 01       	movw	r30, r6
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1da2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1da4:	93 fd       	sbrc	r25, 3
    1da6:	85 91       	lpm	r24, Z+
    1da8:	93 ff       	sbrs	r25, 3
    1daa:	81 91       	ld	r24, Z+
    1dac:	fd 87       	std	Y+13, r31	; 0x0d
    1dae:	ec 87       	std	Y+12, r30	; 0x0c
    1db0:	88 23       	and	r24, r24
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <vfprintf+0x6a>
    1db4:	b3 c1       	rjmp	.+870    	; 0x211c <vfprintf+0x3d0>
    1db6:	85 32       	cpi	r24, 0x25	; 37
    1db8:	41 f4       	brne	.+16     	; 0x1dca <vfprintf+0x7e>
    1dba:	93 fd       	sbrc	r25, 3
    1dbc:	85 91       	lpm	r24, Z+
    1dbe:	93 ff       	sbrs	r25, 3
    1dc0:	81 91       	ld	r24, Z+
    1dc2:	fd 87       	std	Y+13, r31	; 0x0d
    1dc4:	ec 87       	std	Y+12, r30	; 0x0c
    1dc6:	85 32       	cpi	r24, 0x25	; 37
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <vfprintf+0x88>
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	b3 01       	movw	r22, r6
    1dce:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    1dd2:	e4 cf       	rjmp	.-56     	; 0x1d9c <vfprintf+0x50>
    1dd4:	ff 24       	eor	r15, r15
    1dd6:	ee 24       	eor	r14, r14
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	10 32       	cpi	r17, 0x20	; 32
    1ddc:	b0 f4       	brcc	.+44     	; 0x1e0a <vfprintf+0xbe>
    1dde:	8b 32       	cpi	r24, 0x2B	; 43
    1de0:	69 f0       	breq	.+26     	; 0x1dfc <vfprintf+0xb0>
    1de2:	8c 32       	cpi	r24, 0x2C	; 44
    1de4:	28 f4       	brcc	.+10     	; 0x1df0 <vfprintf+0xa4>
    1de6:	80 32       	cpi	r24, 0x20	; 32
    1de8:	51 f0       	breq	.+20     	; 0x1dfe <vfprintf+0xb2>
    1dea:	83 32       	cpi	r24, 0x23	; 35
    1dec:	71 f4       	brne	.+28     	; 0x1e0a <vfprintf+0xbe>
    1dee:	0b c0       	rjmp	.+22     	; 0x1e06 <vfprintf+0xba>
    1df0:	8d 32       	cpi	r24, 0x2D	; 45
    1df2:	39 f0       	breq	.+14     	; 0x1e02 <vfprintf+0xb6>
    1df4:	80 33       	cpi	r24, 0x30	; 48
    1df6:	49 f4       	brne	.+18     	; 0x1e0a <vfprintf+0xbe>
    1df8:	11 60       	ori	r17, 0x01	; 1
    1dfa:	2c c0       	rjmp	.+88     	; 0x1e54 <vfprintf+0x108>
    1dfc:	12 60       	ori	r17, 0x02	; 2
    1dfe:	14 60       	ori	r17, 0x04	; 4
    1e00:	29 c0       	rjmp	.+82     	; 0x1e54 <vfprintf+0x108>
    1e02:	18 60       	ori	r17, 0x08	; 8
    1e04:	27 c0       	rjmp	.+78     	; 0x1e54 <vfprintf+0x108>
    1e06:	10 61       	ori	r17, 0x10	; 16
    1e08:	25 c0       	rjmp	.+74     	; 0x1e54 <vfprintf+0x108>
    1e0a:	17 fd       	sbrc	r17, 7
    1e0c:	2e c0       	rjmp	.+92     	; 0x1e6a <vfprintf+0x11e>
    1e0e:	28 2f       	mov	r18, r24
    1e10:	20 53       	subi	r18, 0x30	; 48
    1e12:	2a 30       	cpi	r18, 0x0A	; 10
    1e14:	98 f4       	brcc	.+38     	; 0x1e3c <vfprintf+0xf0>
    1e16:	16 ff       	sbrs	r17, 6
    1e18:	08 c0       	rjmp	.+16     	; 0x1e2a <vfprintf+0xde>
    1e1a:	8f 2d       	mov	r24, r15
    1e1c:	88 0f       	add	r24, r24
    1e1e:	f8 2e       	mov	r15, r24
    1e20:	ff 0c       	add	r15, r15
    1e22:	ff 0c       	add	r15, r15
    1e24:	f8 0e       	add	r15, r24
    1e26:	f2 0e       	add	r15, r18
    1e28:	15 c0       	rjmp	.+42     	; 0x1e54 <vfprintf+0x108>
    1e2a:	8e 2d       	mov	r24, r14
    1e2c:	88 0f       	add	r24, r24
    1e2e:	e8 2e       	mov	r14, r24
    1e30:	ee 0c       	add	r14, r14
    1e32:	ee 0c       	add	r14, r14
    1e34:	e8 0e       	add	r14, r24
    1e36:	e2 0e       	add	r14, r18
    1e38:	10 62       	ori	r17, 0x20	; 32
    1e3a:	0c c0       	rjmp	.+24     	; 0x1e54 <vfprintf+0x108>
    1e3c:	8e 32       	cpi	r24, 0x2E	; 46
    1e3e:	21 f4       	brne	.+8      	; 0x1e48 <vfprintf+0xfc>
    1e40:	16 fd       	sbrc	r17, 6
    1e42:	6c c1       	rjmp	.+728    	; 0x211c <vfprintf+0x3d0>
    1e44:	10 64       	ori	r17, 0x40	; 64
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0x108>
    1e48:	8c 36       	cpi	r24, 0x6C	; 108
    1e4a:	11 f4       	brne	.+4      	; 0x1e50 <vfprintf+0x104>
    1e4c:	10 68       	ori	r17, 0x80	; 128
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <vfprintf+0x108>
    1e50:	88 36       	cpi	r24, 0x68	; 104
    1e52:	59 f4       	brne	.+22     	; 0x1e6a <vfprintf+0x11e>
    1e54:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e56:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e58:	93 fd       	sbrc	r25, 3
    1e5a:	85 91       	lpm	r24, Z+
    1e5c:	93 ff       	sbrs	r25, 3
    1e5e:	81 91       	ld	r24, Z+
    1e60:	fd 87       	std	Y+13, r31	; 0x0d
    1e62:	ec 87       	std	Y+12, r30	; 0x0c
    1e64:	88 23       	and	r24, r24
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <vfprintf+0x11e>
    1e68:	b8 cf       	rjmp	.-144    	; 0x1dda <vfprintf+0x8e>
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	95 54       	subi	r25, 0x45	; 69
    1e6e:	93 30       	cpi	r25, 0x03	; 3
    1e70:	18 f0       	brcs	.+6      	; 0x1e78 <vfprintf+0x12c>
    1e72:	90 52       	subi	r25, 0x20	; 32
    1e74:	93 30       	cpi	r25, 0x03	; 3
    1e76:	38 f4       	brcc	.+14     	; 0x1e86 <vfprintf+0x13a>
    1e78:	24 e0       	ldi	r18, 0x04	; 4
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	a2 0e       	add	r10, r18
    1e7e:	b3 1e       	adc	r11, r19
    1e80:	3f e3       	ldi	r19, 0x3F	; 63
    1e82:	39 83       	std	Y+1, r19	; 0x01
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <vfprintf+0x158>
    1e86:	83 36       	cpi	r24, 0x63	; 99
    1e88:	31 f0       	breq	.+12     	; 0x1e96 <vfprintf+0x14a>
    1e8a:	83 37       	cpi	r24, 0x73	; 115
    1e8c:	81 f0       	breq	.+32     	; 0x1eae <vfprintf+0x162>
    1e8e:	83 35       	cpi	r24, 0x53	; 83
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <vfprintf+0x148>
    1e92:	5a c0       	rjmp	.+180    	; 0x1f48 <vfprintf+0x1fc>
    1e94:	22 c0       	rjmp	.+68     	; 0x1eda <vfprintf+0x18e>
    1e96:	f5 01       	movw	r30, r10
    1e98:	80 81       	ld	r24, Z
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	22 e0       	ldi	r18, 0x02	; 2
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	a2 0e       	add	r10, r18
    1ea2:	b3 1e       	adc	r11, r19
    1ea4:	21 e0       	ldi	r18, 0x01	; 1
    1ea6:	c2 2e       	mov	r12, r18
    1ea8:	d1 2c       	mov	r13, r1
    1eaa:	42 01       	movw	r8, r4
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <vfprintf+0x18a>
    1eae:	92 e0       	ldi	r25, 0x02	; 2
    1eb0:	29 2e       	mov	r2, r25
    1eb2:	31 2c       	mov	r3, r1
    1eb4:	2a 0c       	add	r2, r10
    1eb6:	3b 1c       	adc	r3, r11
    1eb8:	f5 01       	movw	r30, r10
    1eba:	80 80       	ld	r8, Z
    1ebc:	91 80       	ldd	r9, Z+1	; 0x01
    1ebe:	16 ff       	sbrs	r17, 6
    1ec0:	03 c0       	rjmp	.+6      	; 0x1ec8 <vfprintf+0x17c>
    1ec2:	6f 2d       	mov	r22, r15
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <vfprintf+0x180>
    1ec8:	6f ef       	ldi	r22, 0xFF	; 255
    1eca:	7f ef       	ldi	r23, 0xFF	; 255
    1ecc:	c4 01       	movw	r24, r8
    1ece:	0e 94 9c 13 	call	0x2738	; 0x2738 <strnlen>
    1ed2:	6c 01       	movw	r12, r24
    1ed4:	51 01       	movw	r10, r2
    1ed6:	1f 77       	andi	r17, 0x7F	; 127
    1ed8:	15 c0       	rjmp	.+42     	; 0x1f04 <vfprintf+0x1b8>
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	28 2e       	mov	r2, r24
    1ede:	31 2c       	mov	r3, r1
    1ee0:	2a 0c       	add	r2, r10
    1ee2:	3b 1c       	adc	r3, r11
    1ee4:	f5 01       	movw	r30, r10
    1ee6:	80 80       	ld	r8, Z
    1ee8:	91 80       	ldd	r9, Z+1	; 0x01
    1eea:	16 ff       	sbrs	r17, 6
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <vfprintf+0x1a8>
    1eee:	6f 2d       	mov	r22, r15
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <vfprintf+0x1ac>
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	7f ef       	ldi	r23, 0xFF	; 255
    1ef8:	c4 01       	movw	r24, r8
    1efa:	0e 94 91 13 	call	0x2722	; 0x2722 <strnlen_P>
    1efe:	6c 01       	movw	r12, r24
    1f00:	10 68       	ori	r17, 0x80	; 128
    1f02:	51 01       	movw	r10, r2
    1f04:	13 fd       	sbrc	r17, 3
    1f06:	1c c0       	rjmp	.+56     	; 0x1f40 <vfprintf+0x1f4>
    1f08:	06 c0       	rjmp	.+12     	; 0x1f16 <vfprintf+0x1ca>
    1f0a:	80 e2       	ldi	r24, 0x20	; 32
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	b3 01       	movw	r22, r6
    1f10:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    1f14:	ea 94       	dec	r14
    1f16:	8e 2d       	mov	r24, r14
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	c8 16       	cp	r12, r24
    1f1c:	d9 06       	cpc	r13, r25
    1f1e:	a8 f3       	brcs	.-22     	; 0x1f0a <vfprintf+0x1be>
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <vfprintf+0x1f4>
    1f22:	f4 01       	movw	r30, r8
    1f24:	17 fd       	sbrc	r17, 7
    1f26:	85 91       	lpm	r24, Z+
    1f28:	17 ff       	sbrs	r17, 7
    1f2a:	81 91       	ld	r24, Z+
    1f2c:	4f 01       	movw	r8, r30
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	b3 01       	movw	r22, r6
    1f32:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    1f36:	e1 10       	cpse	r14, r1
    1f38:	ea 94       	dec	r14
    1f3a:	08 94       	sec
    1f3c:	c1 08       	sbc	r12, r1
    1f3e:	d1 08       	sbc	r13, r1
    1f40:	c1 14       	cp	r12, r1
    1f42:	d1 04       	cpc	r13, r1
    1f44:	71 f7       	brne	.-36     	; 0x1f22 <vfprintf+0x1d6>
    1f46:	e7 c0       	rjmp	.+462    	; 0x2116 <vfprintf+0x3ca>
    1f48:	84 36       	cpi	r24, 0x64	; 100
    1f4a:	11 f0       	breq	.+4      	; 0x1f50 <vfprintf+0x204>
    1f4c:	89 36       	cpi	r24, 0x69	; 105
    1f4e:	51 f5       	brne	.+84     	; 0x1fa4 <vfprintf+0x258>
    1f50:	f5 01       	movw	r30, r10
    1f52:	17 ff       	sbrs	r17, 7
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <vfprintf+0x218>
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	a2 81       	ldd	r26, Z+2	; 0x02
    1f5c:	b3 81       	ldd	r27, Z+3	; 0x03
    1f5e:	24 e0       	ldi	r18, 0x04	; 4
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	08 c0       	rjmp	.+16     	; 0x1f74 <vfprintf+0x228>
    1f64:	80 81       	ld	r24, Z
    1f66:	91 81       	ldd	r25, Z+1	; 0x01
    1f68:	aa 27       	eor	r26, r26
    1f6a:	97 fd       	sbrc	r25, 7
    1f6c:	a0 95       	com	r26
    1f6e:	ba 2f       	mov	r27, r26
    1f70:	22 e0       	ldi	r18, 0x02	; 2
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	a2 0e       	add	r10, r18
    1f76:	b3 1e       	adc	r11, r19
    1f78:	01 2f       	mov	r16, r17
    1f7a:	0f 76       	andi	r16, 0x6F	; 111
    1f7c:	b7 ff       	sbrs	r27, 7
    1f7e:	08 c0       	rjmp	.+16     	; 0x1f90 <vfprintf+0x244>
    1f80:	b0 95       	com	r27
    1f82:	a0 95       	com	r26
    1f84:	90 95       	com	r25
    1f86:	81 95       	neg	r24
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	af 4f       	sbci	r26, 0xFF	; 255
    1f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8e:	00 68       	ori	r16, 0x80	; 128
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	a2 01       	movw	r20, r4
    1f96:	2a e0       	ldi	r18, 0x0A	; 10
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	0e 94 30 14 	call	0x2860	; 0x2860 <__ultoa_invert>
    1f9e:	d8 2e       	mov	r13, r24
    1fa0:	d4 18       	sub	r13, r4
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <vfprintf+0x2d6>
    1fa4:	85 37       	cpi	r24, 0x75	; 117
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <vfprintf+0x264>
    1fa8:	1f 7e       	andi	r17, 0xEF	; 239
    1faa:	2a e0       	ldi	r18, 0x0A	; 10
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	20 c0       	rjmp	.+64     	; 0x1ff0 <vfprintf+0x2a4>
    1fb0:	19 7f       	andi	r17, 0xF9	; 249
    1fb2:	8f 36       	cpi	r24, 0x6F	; 111
    1fb4:	a9 f0       	breq	.+42     	; 0x1fe0 <vfprintf+0x294>
    1fb6:	80 37       	cpi	r24, 0x70	; 112
    1fb8:	20 f4       	brcc	.+8      	; 0x1fc2 <vfprintf+0x276>
    1fba:	88 35       	cpi	r24, 0x58	; 88
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <vfprintf+0x274>
    1fbe:	ae c0       	rjmp	.+348    	; 0x211c <vfprintf+0x3d0>
    1fc0:	0b c0       	rjmp	.+22     	; 0x1fd8 <vfprintf+0x28c>
    1fc2:	80 37       	cpi	r24, 0x70	; 112
    1fc4:	21 f0       	breq	.+8      	; 0x1fce <vfprintf+0x282>
    1fc6:	88 37       	cpi	r24, 0x78	; 120
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <vfprintf+0x280>
    1fca:	a8 c0       	rjmp	.+336    	; 0x211c <vfprintf+0x3d0>
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <vfprintf+0x284>
    1fce:	10 61       	ori	r17, 0x10	; 16
    1fd0:	14 ff       	sbrs	r17, 4
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <vfprintf+0x29a>
    1fd4:	14 60       	ori	r17, 0x04	; 4
    1fd6:	07 c0       	rjmp	.+14     	; 0x1fe6 <vfprintf+0x29a>
    1fd8:	14 ff       	sbrs	r17, 4
    1fda:	08 c0       	rjmp	.+16     	; 0x1fec <vfprintf+0x2a0>
    1fdc:	16 60       	ori	r17, 0x06	; 6
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <vfprintf+0x2a0>
    1fe0:	28 e0       	ldi	r18, 0x08	; 8
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <vfprintf+0x2a4>
    1fe6:	20 e1       	ldi	r18, 0x10	; 16
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vfprintf+0x2a4>
    1fec:	20 e1       	ldi	r18, 0x10	; 16
    1fee:	32 e0       	ldi	r19, 0x02	; 2
    1ff0:	f5 01       	movw	r30, r10
    1ff2:	17 ff       	sbrs	r17, 7
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <vfprintf+0x2b8>
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	44 e0       	ldi	r20, 0x04	; 4
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <vfprintf+0x2c4>
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	42 e0       	ldi	r20, 0x02	; 2
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	a4 0e       	add	r10, r20
    2012:	b5 1e       	adc	r11, r21
    2014:	a2 01       	movw	r20, r4
    2016:	0e 94 30 14 	call	0x2860	; 0x2860 <__ultoa_invert>
    201a:	d8 2e       	mov	r13, r24
    201c:	d4 18       	sub	r13, r4
    201e:	01 2f       	mov	r16, r17
    2020:	0f 77       	andi	r16, 0x7F	; 127
    2022:	06 ff       	sbrs	r16, 6
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <vfprintf+0x2ec>
    2026:	0e 7f       	andi	r16, 0xFE	; 254
    2028:	df 14       	cp	r13, r15
    202a:	30 f4       	brcc	.+12     	; 0x2038 <vfprintf+0x2ec>
    202c:	04 ff       	sbrs	r16, 4
    202e:	06 c0       	rjmp	.+12     	; 0x203c <vfprintf+0x2f0>
    2030:	02 fd       	sbrc	r16, 2
    2032:	04 c0       	rjmp	.+8      	; 0x203c <vfprintf+0x2f0>
    2034:	0f 7e       	andi	r16, 0xEF	; 239
    2036:	02 c0       	rjmp	.+4      	; 0x203c <vfprintf+0x2f0>
    2038:	1d 2d       	mov	r17, r13
    203a:	01 c0       	rjmp	.+2      	; 0x203e <vfprintf+0x2f2>
    203c:	1f 2d       	mov	r17, r15
    203e:	80 2f       	mov	r24, r16
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	04 ff       	sbrs	r16, 4
    2044:	0c c0       	rjmp	.+24     	; 0x205e <vfprintf+0x312>
    2046:	fe 01       	movw	r30, r28
    2048:	ed 0d       	add	r30, r13
    204a:	f1 1d       	adc	r31, r1
    204c:	20 81       	ld	r18, Z
    204e:	20 33       	cpi	r18, 0x30	; 48
    2050:	11 f4       	brne	.+4      	; 0x2056 <vfprintf+0x30a>
    2052:	09 7e       	andi	r16, 0xE9	; 233
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <vfprintf+0x31c>
    2056:	02 ff       	sbrs	r16, 2
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x31a>
    205a:	1e 5f       	subi	r17, 0xFE	; 254
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <vfprintf+0x31c>
    205e:	86 78       	andi	r24, 0x86	; 134
    2060:	90 70       	andi	r25, 0x00	; 0
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	09 f0       	breq	.+2      	; 0x2068 <vfprintf+0x31c>
    2066:	1f 5f       	subi	r17, 0xFF	; 255
    2068:	80 2e       	mov	r8, r16
    206a:	99 24       	eor	r9, r9
    206c:	03 fd       	sbrc	r16, 3
    206e:	12 c0       	rjmp	.+36     	; 0x2094 <vfprintf+0x348>
    2070:	00 ff       	sbrs	r16, 0
    2072:	0d c0       	rjmp	.+26     	; 0x208e <vfprintf+0x342>
    2074:	fd 2c       	mov	r15, r13
    2076:	1e 15       	cp	r17, r14
    2078:	50 f4       	brcc	.+20     	; 0x208e <vfprintf+0x342>
    207a:	fe 0c       	add	r15, r14
    207c:	f1 1a       	sub	r15, r17
    207e:	1e 2d       	mov	r17, r14
    2080:	06 c0       	rjmp	.+12     	; 0x208e <vfprintf+0x342>
    2082:	80 e2       	ldi	r24, 0x20	; 32
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	b3 01       	movw	r22, r6
    2088:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    208c:	1f 5f       	subi	r17, 0xFF	; 255
    208e:	1e 15       	cp	r17, r14
    2090:	c0 f3       	brcs	.-16     	; 0x2082 <vfprintf+0x336>
    2092:	04 c0       	rjmp	.+8      	; 0x209c <vfprintf+0x350>
    2094:	1e 15       	cp	r17, r14
    2096:	10 f4       	brcc	.+4      	; 0x209c <vfprintf+0x350>
    2098:	e1 1a       	sub	r14, r17
    209a:	01 c0       	rjmp	.+2      	; 0x209e <vfprintf+0x352>
    209c:	ee 24       	eor	r14, r14
    209e:	84 fe       	sbrs	r8, 4
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <vfprintf+0x374>
    20a2:	80 e3       	ldi	r24, 0x30	; 48
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	b3 01       	movw	r22, r6
    20a8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    20ac:	82 fe       	sbrs	r8, 2
    20ae:	1f c0       	rjmp	.+62     	; 0x20ee <vfprintf+0x3a2>
    20b0:	81 fe       	sbrs	r8, 1
    20b2:	03 c0       	rjmp	.+6      	; 0x20ba <vfprintf+0x36e>
    20b4:	88 e5       	ldi	r24, 0x58	; 88
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	10 c0       	rjmp	.+32     	; 0x20da <vfprintf+0x38e>
    20ba:	88 e7       	ldi	r24, 0x78	; 120
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0d c0       	rjmp	.+26     	; 0x20da <vfprintf+0x38e>
    20c0:	c4 01       	movw	r24, r8
    20c2:	86 78       	andi	r24, 0x86	; 134
    20c4:	90 70       	andi	r25, 0x00	; 0
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	91 f0       	breq	.+36     	; 0x20ee <vfprintf+0x3a2>
    20ca:	81 fc       	sbrc	r8, 1
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <vfprintf+0x386>
    20ce:	80 e2       	ldi	r24, 0x20	; 32
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <vfprintf+0x388>
    20d2:	8b e2       	ldi	r24, 0x2B	; 43
    20d4:	07 fd       	sbrc	r16, 7
    20d6:	8d e2       	ldi	r24, 0x2D	; 45
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	b3 01       	movw	r22, r6
    20dc:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    20e0:	06 c0       	rjmp	.+12     	; 0x20ee <vfprintf+0x3a2>
    20e2:	80 e3       	ldi	r24, 0x30	; 48
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	b3 01       	movw	r22, r6
    20e8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    20ec:	fa 94       	dec	r15
    20ee:	df 14       	cp	r13, r15
    20f0:	c0 f3       	brcs	.-16     	; 0x20e2 <vfprintf+0x396>
    20f2:	da 94       	dec	r13
    20f4:	f2 01       	movw	r30, r4
    20f6:	ed 0d       	add	r30, r13
    20f8:	f1 1d       	adc	r31, r1
    20fa:	80 81       	ld	r24, Z
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	b3 01       	movw	r22, r6
    2100:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    2104:	dd 20       	and	r13, r13
    2106:	a9 f7       	brne	.-22     	; 0x20f2 <vfprintf+0x3a6>
    2108:	06 c0       	rjmp	.+12     	; 0x2116 <vfprintf+0x3ca>
    210a:	80 e2       	ldi	r24, 0x20	; 32
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	b3 01       	movw	r22, r6
    2110:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    2114:	ea 94       	dec	r14
    2116:	ee 20       	and	r14, r14
    2118:	c1 f7       	brne	.-16     	; 0x210a <vfprintf+0x3be>
    211a:	40 ce       	rjmp	.-896    	; 0x1d9c <vfprintf+0x50>
    211c:	f3 01       	movw	r30, r6
    211e:	86 81       	ldd	r24, Z+6	; 0x06
    2120:	97 81       	ldd	r25, Z+7	; 0x07
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <vfprintf+0x3dc>
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	9f ef       	ldi	r25, 0xFF	; 255
    2128:	2d 96       	adiw	r28, 0x0d	; 13
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	bf 90       	pop	r11
    2146:	af 90       	pop	r10
    2148:	9f 90       	pop	r9
    214a:	8f 90       	pop	r8
    214c:	7f 90       	pop	r7
    214e:	6f 90       	pop	r6
    2150:	5f 90       	pop	r5
    2152:	4f 90       	pop	r4
    2154:	3f 90       	pop	r3
    2156:	2f 90       	pop	r2
    2158:	08 95       	ret

0000215a <putval>:
    215a:	20 fd       	sbrc	r18, 0
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <putval+0x16>
    215e:	fc 01       	movw	r30, r24
    2160:	23 fd       	sbrc	r18, 3
    2162:	05 c0       	rjmp	.+10     	; 0x216e <putval+0x14>
    2164:	22 ff       	sbrs	r18, 2
    2166:	02 c0       	rjmp	.+4      	; 0x216c <putval+0x12>
    2168:	73 83       	std	Z+3, r23	; 0x03
    216a:	62 83       	std	Z+2, r22	; 0x02
    216c:	51 83       	std	Z+1, r21	; 0x01
    216e:	40 83       	st	Z, r20
    2170:	08 95       	ret

00002172 <mulacc>:
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	6b 01       	movw	r12, r22
    217c:	7c 01       	movw	r14, r24
    217e:	44 fd       	sbrc	r20, 4
    2180:	10 c0       	rjmp	.+32     	; 0x21a2 <mulacc+0x30>
    2182:	46 fd       	sbrc	r20, 6
    2184:	10 c0       	rjmp	.+32     	; 0x21a6 <mulacc+0x34>
    2186:	d6 01       	movw	r26, r12
    2188:	f7 01       	movw	r30, r14
    218a:	aa 0f       	add	r26, r26
    218c:	bb 1f       	adc	r27, r27
    218e:	ee 1f       	adc	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	10 94       	com	r1
    2194:	d1 f7       	brne	.-12     	; 0x218a <mulacc+0x18>
    2196:	ca 0e       	add	r12, r26
    2198:	db 1e       	adc	r13, r27
    219a:	ee 1e       	adc	r14, r30
    219c:	ff 1e       	adc	r15, r31
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <mulacc+0x36>
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <mulacc+0x36>
    21a6:	84 e0       	ldi	r24, 0x04	; 4
    21a8:	cc 0c       	add	r12, r12
    21aa:	dd 1c       	adc	r13, r13
    21ac:	ee 1c       	adc	r14, r14
    21ae:	ff 1c       	adc	r15, r15
    21b0:	81 50       	subi	r24, 0x01	; 1
    21b2:	d1 f7       	brne	.-12     	; 0x21a8 <mulacc+0x36>
    21b4:	c2 0e       	add	r12, r18
    21b6:	d1 1c       	adc	r13, r1
    21b8:	e1 1c       	adc	r14, r1
    21ba:	f1 1c       	adc	r15, r1
    21bc:	b6 01       	movw	r22, r12
    21be:	c7 01       	movw	r24, r14
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	08 95       	ret

000021ca <skip_spaces>:
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	8c 01       	movw	r16, r24
    21d4:	c8 01       	movw	r24, r16
    21d6:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    21da:	ec 01       	movw	r28, r24
    21dc:	97 fd       	sbrc	r25, 7
    21de:	08 c0       	rjmp	.+16     	; 0x21f0 <skip_spaces+0x26>
    21e0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <isspace>
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	b1 f7       	brne	.-20     	; 0x21d4 <skip_spaces+0xa>
    21e8:	ce 01       	movw	r24, r28
    21ea:	b8 01       	movw	r22, r16
    21ec:	0e 94 13 14 	call	0x2826	; 0x2826 <ungetc>
    21f0:	ce 01       	movw	r24, r28
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	08 95       	ret

000021fc <conv_int>:
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	8c 01       	movw	r16, r24
    2212:	d6 2f       	mov	r29, r22
    2214:	5a 01       	movw	r10, r20
    2216:	c2 2f       	mov	r28, r18
    2218:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    221c:	8b 32       	cpi	r24, 0x2B	; 43
    221e:	19 f0       	breq	.+6      	; 0x2226 <__stack+0x27>
    2220:	8d 32       	cpi	r24, 0x2D	; 45
    2222:	49 f4       	brne	.+18     	; 0x2236 <__stack+0x37>
    2224:	c0 68       	ori	r28, 0x80	; 128
    2226:	d1 50       	subi	r29, 0x01	; 1
    2228:	09 f4       	brne	.+2      	; 0x222c <__stack+0x2d>
    222a:	61 c0       	rjmp	.+194    	; 0x22ee <__stack+0xef>
    222c:	c8 01       	movw	r24, r16
    222e:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    2232:	97 fd       	sbrc	r25, 7
    2234:	5c c0       	rjmp	.+184    	; 0x22ee <__stack+0xef>
    2236:	cd 7f       	andi	r28, 0xFD	; 253
    2238:	2c 2f       	mov	r18, r28
    223a:	20 73       	andi	r18, 0x30	; 48
    223c:	d1 f4       	brne	.+52     	; 0x2272 <__stack+0x73>
    223e:	80 33       	cpi	r24, 0x30	; 48
    2240:	c1 f4       	brne	.+48     	; 0x2272 <__stack+0x73>
    2242:	d1 50       	subi	r29, 0x01	; 1
    2244:	09 f4       	brne	.+2      	; 0x2248 <__stack+0x49>
    2246:	3e c0       	rjmp	.+124    	; 0x22c4 <__stack+0xc5>
    2248:	c8 01       	movw	r24, r16
    224a:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    224e:	97 fd       	sbrc	r25, 7
    2250:	39 c0       	rjmp	.+114    	; 0x22c4 <__stack+0xc5>
    2252:	c2 60       	ori	r28, 0x02	; 2
    2254:	88 37       	cpi	r24, 0x78	; 120
    2256:	11 f0       	breq	.+4      	; 0x225c <__stack+0x5d>
    2258:	88 35       	cpi	r24, 0x58	; 88
    225a:	49 f4       	brne	.+18     	; 0x226e <__stack+0x6f>
    225c:	c0 64       	ori	r28, 0x40	; 64
    225e:	d1 50       	subi	r29, 0x01	; 1
    2260:	89 f1       	breq	.+98     	; 0x22c4 <__stack+0xc5>
    2262:	c8 01       	movw	r24, r16
    2264:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    2268:	97 ff       	sbrs	r25, 7
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <__stack+0x73>
    226c:	2b c0       	rjmp	.+86     	; 0x22c4 <__stack+0xc5>
    226e:	c6 ff       	sbrs	r28, 6
    2270:	c0 61       	ori	r28, 0x10	; 16
    2272:	cc 24       	eor	r12, r12
    2274:	dd 24       	eor	r13, r13
    2276:	76 01       	movw	r14, r12
    2278:	28 2f       	mov	r18, r24
    227a:	20 53       	subi	r18, 0x30	; 48
    227c:	28 30       	cpi	r18, 0x08	; 8
    227e:	80 f0       	brcs	.+32     	; 0x22a0 <__stack+0xa1>
    2280:	c4 fd       	sbrc	r28, 4
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <__stack+0x97>
    2284:	2a 30       	cpi	r18, 0x0A	; 10
    2286:	60 f0       	brcs	.+24     	; 0x22a0 <__stack+0xa1>
    2288:	c6 ff       	sbrs	r28, 6
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <__stack+0x97>
    228c:	2f 7d       	andi	r18, 0xDF	; 223
    228e:	32 2f       	mov	r19, r18
    2290:	31 51       	subi	r19, 0x11	; 17
    2292:	36 30       	cpi	r19, 0x06	; 6
    2294:	20 f0       	brcs	.+8      	; 0x229e <__stack+0x9f>
    2296:	b8 01       	movw	r22, r16
    2298:	0e 94 13 14 	call	0x2826	; 0x2826 <ungetc>
    229c:	10 c0       	rjmp	.+32     	; 0x22be <__stack+0xbf>
    229e:	27 50       	subi	r18, 0x07	; 7
    22a0:	c7 01       	movw	r24, r14
    22a2:	b6 01       	movw	r22, r12
    22a4:	4c 2f       	mov	r20, r28
    22a6:	0e 94 b9 10 	call	0x2172	; 0x2172 <mulacc>
    22aa:	6b 01       	movw	r12, r22
    22ac:	7c 01       	movw	r14, r24
    22ae:	c2 60       	ori	r28, 0x02	; 2
    22b0:	d1 50       	subi	r29, 0x01	; 1
    22b2:	59 f0       	breq	.+22     	; 0x22ca <__stack+0xcb>
    22b4:	c8 01       	movw	r24, r16
    22b6:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    22ba:	97 ff       	sbrs	r25, 7
    22bc:	dd cf       	rjmp	.-70     	; 0x2278 <__stack+0x79>
    22be:	c1 fd       	sbrc	r28, 1
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <__stack+0xcb>
    22c2:	15 c0       	rjmp	.+42     	; 0x22ee <__stack+0xef>
    22c4:	cc 24       	eor	r12, r12
    22c6:	dd 24       	eor	r13, r13
    22c8:	76 01       	movw	r14, r12
    22ca:	c7 ff       	sbrs	r28, 7
    22cc:	08 c0       	rjmp	.+16     	; 0x22de <__stack+0xdf>
    22ce:	f0 94       	com	r15
    22d0:	e0 94       	com	r14
    22d2:	d0 94       	com	r13
    22d4:	c0 94       	com	r12
    22d6:	c1 1c       	adc	r12, r1
    22d8:	d1 1c       	adc	r13, r1
    22da:	e1 1c       	adc	r14, r1
    22dc:	f1 1c       	adc	r15, r1
    22de:	c5 01       	movw	r24, r10
    22e0:	b7 01       	movw	r22, r14
    22e2:	a6 01       	movw	r20, r12
    22e4:	2c 2f       	mov	r18, r28
    22e6:	0e 94 ad 10 	call	0x215a	; 0x215a <putval>
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <__stack+0xf1>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ff 90       	pop	r15
    22fa:	ef 90       	pop	r14
    22fc:	df 90       	pop	r13
    22fe:	cf 90       	pop	r12
    2300:	bf 90       	pop	r11
    2302:	af 90       	pop	r10
    2304:	08 95       	ret

00002306 <conv_brk>:
    2306:	4f 92       	push	r4
    2308:	5f 92       	push	r5
    230a:	6f 92       	push	r6
    230c:	7f 92       	push	r7
    230e:	8f 92       	push	r8
    2310:	9f 92       	push	r9
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	a0 97       	sbiw	r28, 0x20	; 32
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	5c 01       	movw	r10, r24
    2338:	06 2f       	mov	r16, r22
    233a:	7a 01       	movw	r14, r20
    233c:	69 01       	movw	r12, r18
    233e:	fe 01       	movw	r30, r28
    2340:	31 96       	adiw	r30, 0x01	; 1
    2342:	80 e2       	ldi	r24, 0x20	; 32
    2344:	df 01       	movw	r26, r30
    2346:	1d 92       	st	X+, r1
    2348:	8a 95       	dec	r24
    234a:	e9 f7       	brne	.-6      	; 0x2346 <conv_brk+0x40>
    234c:	d5 01       	movw	r26, r10
    234e:	13 96       	adiw	r26, 0x03	; 3
    2350:	1c 91       	ld	r17, X
    2352:	13 97       	sbiw	r26, 0x03	; 3
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4f 01       	movw	r8, r30
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	68 2e       	mov	r6, r24
    2364:	71 2c       	mov	r7, r1
    2366:	f6 01       	movw	r30, r12
    2368:	13 fd       	sbrc	r17, 3
    236a:	55 91       	lpm	r21, Z+
    236c:	13 ff       	sbrs	r17, 3
    236e:	51 91       	ld	r21, Z+
    2370:	6f 01       	movw	r12, r30
    2372:	55 23       	and	r21, r21
    2374:	09 f4       	brne	.+2      	; 0x2378 <conv_brk+0x72>
    2376:	7b c0       	rjmp	.+246    	; 0x246e <conv_brk+0x168>
    2378:	5e 35       	cpi	r21, 0x5E	; 94
    237a:	19 f4       	brne	.+6      	; 0x2382 <conv_brk+0x7c>
    237c:	61 15       	cp	r22, r1
    237e:	71 05       	cpc	r23, r1
    2380:	49 f1       	breq	.+82     	; 0x23d4 <conv_brk+0xce>
    2382:	83 2f       	mov	r24, r19
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	86 17       	cp	r24, r22
    2388:	97 07       	cpc	r25, r23
    238a:	3c f4       	brge	.+14     	; 0x239a <conv_brk+0x94>
    238c:	5d 35       	cpi	r21, 0x5D	; 93
    238e:	51 f1       	breq	.+84     	; 0x23e4 <conv_brk+0xde>
    2390:	5d 32       	cpi	r21, 0x2D	; 45
    2392:	19 f4       	brne	.+6      	; 0x239a <conv_brk+0x94>
    2394:	44 23       	and	r20, r20
    2396:	01 f1       	breq	.+64     	; 0x23d8 <conv_brk+0xd2>
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <conv_brk+0x9a>
    239a:	44 23       	and	r20, r20
    239c:	09 f4       	brne	.+2      	; 0x23a0 <conv_brk+0x9a>
    239e:	25 2f       	mov	r18, r21
    23a0:	85 2f       	mov	r24, r21
    23a2:	86 95       	lsr	r24
    23a4:	86 95       	lsr	r24
    23a6:	86 95       	lsr	r24
    23a8:	f4 01       	movw	r30, r8
    23aa:	e8 0f       	add	r30, r24
    23ac:	f1 1d       	adc	r31, r1
    23ae:	85 2f       	mov	r24, r21
    23b0:	87 70       	andi	r24, 0x07	; 7
    23b2:	23 01       	movw	r4, r6
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <conv_brk+0xb4>
    23b6:	44 0c       	add	r4, r4
    23b8:	55 1c       	adc	r5, r5
    23ba:	8a 95       	dec	r24
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <conv_brk+0xb0>
    23be:	80 81       	ld	r24, Z
    23c0:	84 29       	or	r24, r4
    23c2:	80 83       	st	Z, r24
    23c4:	52 17       	cp	r21, r18
    23c6:	51 f0       	breq	.+20     	; 0x23dc <conv_brk+0xd6>
    23c8:	52 17       	cp	r21, r18
    23ca:	10 f4       	brcc	.+4      	; 0x23d0 <conv_brk+0xca>
    23cc:	5f 5f       	subi	r21, 0xFF	; 255
    23ce:	e8 cf       	rjmp	.-48     	; 0x23a0 <conv_brk+0x9a>
    23d0:	51 50       	subi	r21, 0x01	; 1
    23d2:	e6 cf       	rjmp	.-52     	; 0x23a0 <conv_brk+0x9a>
    23d4:	31 e0       	ldi	r19, 0x01	; 1
    23d6:	03 c0       	rjmp	.+6      	; 0x23de <conv_brk+0xd8>
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	01 c0       	rjmp	.+2      	; 0x23de <conv_brk+0xd8>
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	6f 5f       	subi	r22, 0xFF	; 255
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	c1 cf       	rjmp	.-126    	; 0x2366 <conv_brk+0x60>
    23e4:	44 23       	and	r20, r20
    23e6:	19 f0       	breq	.+6      	; 0x23ee <conv_brk+0xe8>
    23e8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ea:	80 62       	ori	r24, 0x20	; 32
    23ec:	8e 83       	std	Y+6, r24	; 0x06
    23ee:	33 23       	and	r19, r19
    23f0:	51 f0       	breq	.+20     	; 0x2406 <conv_brk+0x100>
    23f2:	fe 01       	movw	r30, r28
    23f4:	31 96       	adiw	r30, 0x01	; 1
    23f6:	ce 01       	movw	r24, r28
    23f8:	81 96       	adiw	r24, 0x21	; 33
    23fa:	20 81       	ld	r18, Z
    23fc:	20 95       	com	r18
    23fe:	21 93       	st	Z+, r18
    2400:	e8 17       	cp	r30, r24
    2402:	f9 07       	cpc	r31, r25
    2404:	d1 f7       	brne	.-12     	; 0x23fa <conv_brk+0xf4>
    2406:	11 e0       	ldi	r17, 0x01	; 1
    2408:	01 c0       	rjmp	.+2      	; 0x240c <conv_brk+0x106>
    240a:	10 e0       	ldi	r17, 0x00	; 0
    240c:	c5 01       	movw	r24, r10
    240e:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    2412:	9c 01       	movw	r18, r24
    2414:	97 fd       	sbrc	r25, 7
    2416:	23 c0       	rjmp	.+70     	; 0x245e <conv_brk+0x158>
    2418:	86 95       	lsr	r24
    241a:	86 95       	lsr	r24
    241c:	86 95       	lsr	r24
    241e:	e1 e0       	ldi	r30, 0x01	; 1
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	ec 0f       	add	r30, r28
    2424:	fd 1f       	adc	r31, r29
    2426:	e8 0f       	add	r30, r24
    2428:	f1 1d       	adc	r31, r1
    242a:	40 81       	ld	r20, Z
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	c9 01       	movw	r24, r18
    2430:	87 70       	andi	r24, 0x07	; 7
    2432:	90 70       	andi	r25, 0x00	; 0
    2434:	02 c0       	rjmp	.+4      	; 0x243a <conv_brk+0x134>
    2436:	55 95       	asr	r21
    2438:	47 95       	ror	r20
    243a:	8a 95       	dec	r24
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <conv_brk+0x130>
    243e:	40 fd       	sbrc	r20, 0
    2440:	05 c0       	rjmp	.+10     	; 0x244c <conv_brk+0x146>
    2442:	c9 01       	movw	r24, r18
    2444:	b5 01       	movw	r22, r10
    2446:	0e 94 13 14 	call	0x2826	; 0x2826 <ungetc>
    244a:	09 c0       	rjmp	.+18     	; 0x245e <conv_brk+0x158>
    244c:	e1 14       	cp	r14, r1
    244e:	f1 04       	cpc	r15, r1
    2450:	19 f0       	breq	.+6      	; 0x2458 <conv_brk+0x152>
    2452:	d7 01       	movw	r26, r14
    2454:	2d 93       	st	X+, r18
    2456:	7d 01       	movw	r14, r26
    2458:	01 50       	subi	r16, 0x01	; 1
    245a:	b9 f6       	brne	.-82     	; 0x240a <conv_brk+0x104>
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <conv_brk+0x15c>
    245e:	11 23       	and	r17, r17
    2460:	31 f4       	brne	.+12     	; 0x246e <conv_brk+0x168>
    2462:	e1 14       	cp	r14, r1
    2464:	f1 04       	cpc	r15, r1
    2466:	29 f0       	breq	.+10     	; 0x2472 <conv_brk+0x16c>
    2468:	f7 01       	movw	r30, r14
    246a:	10 82       	st	Z, r1
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <conv_brk+0x16c>
    246e:	cc 24       	eor	r12, r12
    2470:	dd 24       	eor	r13, r13
    2472:	c6 01       	movw	r24, r12
    2474:	a0 96       	adiw	r28, 0x20	; 32
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	1f 91       	pop	r17
    2486:	0f 91       	pop	r16
    2488:	ff 90       	pop	r15
    248a:	ef 90       	pop	r14
    248c:	df 90       	pop	r13
    248e:	cf 90       	pop	r12
    2490:	bf 90       	pop	r11
    2492:	af 90       	pop	r10
    2494:	9f 90       	pop	r9
    2496:	8f 90       	pop	r8
    2498:	7f 90       	pop	r7
    249a:	6f 90       	pop	r6
    249c:	5f 90       	pop	r5
    249e:	4f 90       	pop	r4
    24a0:	08 95       	ret

000024a2 <vfscanf>:
    24a2:	5f 92       	push	r5
    24a4:	6f 92       	push	r6
    24a6:	7f 92       	push	r7
    24a8:	8f 92       	push	r8
    24aa:	9f 92       	push	r9
    24ac:	af 92       	push	r10
    24ae:	bf 92       	push	r11
    24b0:	cf 92       	push	r12
    24b2:	df 92       	push	r13
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	7c 01       	movw	r14, r24
    24c8:	5b 01       	movw	r10, r22
    24ca:	3a 01       	movw	r6, r20
    24cc:	fc 01       	movw	r30, r24
    24ce:	17 82       	std	Z+7, r1	; 0x07
    24d0:	16 82       	std	Z+6, r1	; 0x06
    24d2:	99 24       	eor	r9, r9
    24d4:	ef c0       	rjmp	.+478    	; 0x26b4 <vfscanf+0x212>
    24d6:	81 2f       	mov	r24, r17
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 7e 13 	call	0x26fc	; 0x26fc <isspace>
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	21 f0       	breq	.+8      	; 0x24ea <vfscanf+0x48>
    24e2:	c7 01       	movw	r24, r14
    24e4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <skip_spaces>
    24e8:	e5 c0       	rjmp	.+458    	; 0x26b4 <vfscanf+0x212>
    24ea:	15 32       	cpi	r17, 0x25	; 37
    24ec:	41 f4       	brne	.+16     	; 0x24fe <vfscanf+0x5c>
    24ee:	f5 01       	movw	r30, r10
    24f0:	03 fd       	sbrc	r16, 3
    24f2:	35 91       	lpm	r19, Z+
    24f4:	03 ff       	sbrs	r16, 3
    24f6:	31 91       	ld	r19, Z+
    24f8:	5f 01       	movw	r10, r30
    24fa:	35 32       	cpi	r19, 0x25	; 37
    24fc:	61 f4       	brne	.+24     	; 0x2516 <vfscanf+0x74>
    24fe:	c7 01       	movw	r24, r14
    2500:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    2504:	97 fd       	sbrc	r25, 7
    2506:	e2 c0       	rjmp	.+452    	; 0x26cc <vfscanf+0x22a>
    2508:	18 17       	cp	r17, r24
    250a:	09 f4       	brne	.+2      	; 0x250e <vfscanf+0x6c>
    250c:	d3 c0       	rjmp	.+422    	; 0x26b4 <vfscanf+0x212>
    250e:	b7 01       	movw	r22, r14
    2510:	0e 94 13 14 	call	0x2826	; 0x2826 <ungetc>
    2514:	dd c0       	rjmp	.+442    	; 0x26d0 <vfscanf+0x22e>
    2516:	3a 32       	cpi	r19, 0x2A	; 42
    2518:	41 f4       	brne	.+16     	; 0x252a <vfscanf+0x88>
    251a:	03 fd       	sbrc	r16, 3
    251c:	35 91       	lpm	r19, Z+
    251e:	03 ff       	sbrs	r16, 3
    2520:	31 91       	ld	r19, Z+
    2522:	5f 01       	movw	r10, r30
    2524:	55 24       	eor	r5, r5
    2526:	53 94       	inc	r5
    2528:	01 c0       	rjmp	.+2      	; 0x252c <vfscanf+0x8a>
    252a:	55 24       	eor	r5, r5
    252c:	88 24       	eor	r8, r8
    252e:	10 c0       	rjmp	.+32     	; 0x2550 <vfscanf+0xae>
    2530:	f2 e0       	ldi	r31, 0x02	; 2
    2532:	5f 2a       	or	r5, r31
    2534:	68 2d       	mov	r22, r8
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	0e 94 b9 10 	call	0x2172	; 0x2172 <mulacc>
    2542:	86 2e       	mov	r8, r22
    2544:	f5 01       	movw	r30, r10
    2546:	03 fd       	sbrc	r16, 3
    2548:	35 91       	lpm	r19, Z+
    254a:	03 ff       	sbrs	r16, 3
    254c:	31 91       	ld	r19, Z+
    254e:	5f 01       	movw	r10, r30
    2550:	23 2f       	mov	r18, r19
    2552:	20 53       	subi	r18, 0x30	; 48
    2554:	2a 30       	cpi	r18, 0x0A	; 10
    2556:	60 f3       	brcs	.-40     	; 0x2530 <vfscanf+0x8e>
    2558:	51 fe       	sbrs	r5, 1
    255a:	03 c0       	rjmp	.+6      	; 0x2562 <vfscanf+0xc0>
    255c:	88 20       	and	r8, r8
    255e:	19 f4       	brne	.+6      	; 0x2566 <vfscanf+0xc4>
    2560:	b7 c0       	rjmp	.+366    	; 0x26d0 <vfscanf+0x22e>
    2562:	88 24       	eor	r8, r8
    2564:	8a 94       	dec	r8
    2566:	38 36       	cpi	r19, 0x68	; 104
    2568:	19 f0       	breq	.+6      	; 0x2570 <vfscanf+0xce>
    256a:	3c 36       	cpi	r19, 0x6C	; 108
    256c:	99 f4       	brne	.+38     	; 0x2594 <vfscanf+0xf2>
    256e:	0a c0       	rjmp	.+20     	; 0x2584 <vfscanf+0xe2>
    2570:	f5 01       	movw	r30, r10
    2572:	03 fd       	sbrc	r16, 3
    2574:	35 91       	lpm	r19, Z+
    2576:	03 ff       	sbrs	r16, 3
    2578:	31 91       	ld	r19, Z+
    257a:	5f 01       	movw	r10, r30
    257c:	38 36       	cpi	r19, 0x68	; 104
    257e:	51 f4       	brne	.+20     	; 0x2594 <vfscanf+0xf2>
    2580:	f8 e0       	ldi	r31, 0x08	; 8
    2582:	5f 2a       	or	r5, r31
    2584:	44 e0       	ldi	r20, 0x04	; 4
    2586:	54 2a       	or	r5, r20
    2588:	f5 01       	movw	r30, r10
    258a:	03 fd       	sbrc	r16, 3
    258c:	35 91       	lpm	r19, Z+
    258e:	03 ff       	sbrs	r16, 3
    2590:	31 91       	ld	r19, Z+
    2592:	5f 01       	movw	r10, r30
    2594:	33 23       	and	r19, r19
    2596:	09 f4       	brne	.+2      	; 0x259a <vfscanf+0xf8>
    2598:	9b c0       	rjmp	.+310    	; 0x26d0 <vfscanf+0x22e>
    259a:	84 ee       	ldi	r24, 0xE4	; 228
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	63 2f       	mov	r22, r19
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	39 83       	std	Y+1, r19	; 0x01
    25a4:	0e 94 86 13 	call	0x270c	; 0x270c <strchr_P>
    25a8:	39 81       	ldd	r19, Y+1	; 0x01
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <vfscanf+0x10e>
    25ae:	90 c0       	rjmp	.+288    	; 0x26d0 <vfscanf+0x22e>
    25b0:	85 2d       	mov	r24, r5
    25b2:	50 fc       	sbrc	r5, 0
    25b4:	08 c0       	rjmp	.+16     	; 0x25c6 <vfscanf+0x124>
    25b6:	f3 01       	movw	r30, r6
    25b8:	00 81       	ld	r16, Z
    25ba:	11 81       	ldd	r17, Z+1	; 0x01
    25bc:	42 e0       	ldi	r20, 0x02	; 2
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	64 0e       	add	r6, r20
    25c2:	75 1e       	adc	r7, r21
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <vfscanf+0x128>
    25c6:	00 e0       	ldi	r16, 0x00	; 0
    25c8:	10 e0       	ldi	r17, 0x00	; 0
    25ca:	3e 36       	cpi	r19, 0x6E	; 110
    25cc:	51 f4       	brne	.+20     	; 0x25e2 <vfscanf+0x140>
    25ce:	f7 01       	movw	r30, r14
    25d0:	46 81       	ldd	r20, Z+6	; 0x06
    25d2:	57 81       	ldd	r21, Z+7	; 0x07
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	c8 01       	movw	r24, r16
    25da:	25 2d       	mov	r18, r5
    25dc:	0e 94 ad 10 	call	0x215a	; 0x215a <putval>
    25e0:	69 c0       	rjmp	.+210    	; 0x26b4 <vfscanf+0x212>
    25e2:	33 36       	cpi	r19, 0x63	; 99
    25e4:	91 f4       	brne	.+36     	; 0x260a <vfscanf+0x168>
    25e6:	81 fd       	sbrc	r24, 1
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <vfscanf+0x14c>
    25ea:	88 24       	eor	r8, r8
    25ec:	83 94       	inc	r8
    25ee:	c7 01       	movw	r24, r14
    25f0:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    25f4:	97 fd       	sbrc	r25, 7
    25f6:	6a c0       	rjmp	.+212    	; 0x26cc <vfscanf+0x22a>
    25f8:	01 15       	cp	r16, r1
    25fa:	11 05       	cpc	r17, r1
    25fc:	19 f0       	breq	.+6      	; 0x2604 <vfscanf+0x162>
    25fe:	f8 01       	movw	r30, r16
    2600:	81 93       	st	Z+, r24
    2602:	8f 01       	movw	r16, r30
    2604:	8a 94       	dec	r8
    2606:	99 f7       	brne	.-26     	; 0x25ee <vfscanf+0x14c>
    2608:	53 c0       	rjmp	.+166    	; 0x26b0 <vfscanf+0x20e>
    260a:	c7 01       	movw	r24, r14
    260c:	3b 35       	cpi	r19, 0x5B	; 91
    260e:	51 f4       	brne	.+20     	; 0x2624 <vfscanf+0x182>
    2610:	68 2d       	mov	r22, r8
    2612:	a8 01       	movw	r20, r16
    2614:	95 01       	movw	r18, r10
    2616:	0e 94 83 11 	call	0x2306	; 0x2306 <conv_brk>
    261a:	5c 01       	movw	r10, r24
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	09 f0       	breq	.+2      	; 0x2622 <vfscanf+0x180>
    2620:	47 c0       	rjmp	.+142    	; 0x26b0 <vfscanf+0x20e>
    2622:	41 c0       	rjmp	.+130    	; 0x26a6 <vfscanf+0x204>
    2624:	39 83       	std	Y+1, r19	; 0x01
    2626:	0e 94 e5 10 	call	0x21ca	; 0x21ca <skip_spaces>
    262a:	39 81       	ldd	r19, Y+1	; 0x01
    262c:	97 fd       	sbrc	r25, 7
    262e:	4e c0       	rjmp	.+156    	; 0x26cc <vfscanf+0x22a>
    2630:	3f 36       	cpi	r19, 0x6F	; 111
    2632:	61 f1       	breq	.+88     	; 0x268c <vfscanf+0x1ea>
    2634:	30 37       	cpi	r19, 0x70	; 112
    2636:	28 f4       	brcc	.+10     	; 0x2642 <vfscanf+0x1a0>
    2638:	34 36       	cpi	r19, 0x64	; 100
    263a:	29 f1       	breq	.+74     	; 0x2686 <vfscanf+0x1e4>
    263c:	39 36       	cpi	r19, 0x69	; 105
    263e:	49 f5       	brne	.+82     	; 0x2692 <vfscanf+0x1f0>
    2640:	2a c0       	rjmp	.+84     	; 0x2696 <vfscanf+0x1f4>
    2642:	33 37       	cpi	r19, 0x73	; 115
    2644:	19 f0       	breq	.+6      	; 0x264c <vfscanf+0x1aa>
    2646:	35 37       	cpi	r19, 0x75	; 117
    2648:	21 f5       	brne	.+72     	; 0x2692 <vfscanf+0x1f0>
    264a:	1d c0       	rjmp	.+58     	; 0x2686 <vfscanf+0x1e4>
    264c:	c7 01       	movw	r24, r14
    264e:	0e 94 a7 13 	call	0x274e	; 0x274e <fgetc>
    2652:	6c 01       	movw	r12, r24
    2654:	97 fd       	sbrc	r25, 7
    2656:	11 c0       	rjmp	.+34     	; 0x267a <vfscanf+0x1d8>
    2658:	0e 94 7e 13 	call	0x26fc	; 0x26fc <isspace>
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	29 f0       	breq	.+10     	; 0x266a <vfscanf+0x1c8>
    2660:	c6 01       	movw	r24, r12
    2662:	b7 01       	movw	r22, r14
    2664:	0e 94 13 14 	call	0x2826	; 0x2826 <ungetc>
    2668:	08 c0       	rjmp	.+16     	; 0x267a <vfscanf+0x1d8>
    266a:	01 15       	cp	r16, r1
    266c:	11 05       	cpc	r17, r1
    266e:	19 f0       	breq	.+6      	; 0x2676 <vfscanf+0x1d4>
    2670:	f8 01       	movw	r30, r16
    2672:	c1 92       	st	Z+, r12
    2674:	8f 01       	movw	r16, r30
    2676:	8a 94       	dec	r8
    2678:	49 f7       	brne	.-46     	; 0x264c <vfscanf+0x1aa>
    267a:	01 15       	cp	r16, r1
    267c:	11 05       	cpc	r17, r1
    267e:	c1 f0       	breq	.+48     	; 0x26b0 <vfscanf+0x20e>
    2680:	f8 01       	movw	r30, r16
    2682:	10 82       	st	Z, r1
    2684:	15 c0       	rjmp	.+42     	; 0x26b0 <vfscanf+0x20e>
    2686:	f0 e2       	ldi	r31, 0x20	; 32
    2688:	5f 2a       	or	r5, r31
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <vfscanf+0x1f4>
    268c:	40 e1       	ldi	r20, 0x10	; 16
    268e:	54 2a       	or	r5, r20
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <vfscanf+0x1f4>
    2692:	50 e4       	ldi	r21, 0x40	; 64
    2694:	55 2a       	or	r5, r21
    2696:	c7 01       	movw	r24, r14
    2698:	68 2d       	mov	r22, r8
    269a:	a8 01       	movw	r20, r16
    269c:	25 2d       	mov	r18, r5
    269e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <conv_int>
    26a2:	88 23       	and	r24, r24
    26a4:	29 f4       	brne	.+10     	; 0x26b0 <vfscanf+0x20e>
    26a6:	f7 01       	movw	r30, r14
    26a8:	83 81       	ldd	r24, Z+3	; 0x03
    26aa:	80 73       	andi	r24, 0x30	; 48
    26ac:	79 f4       	brne	.+30     	; 0x26cc <vfscanf+0x22a>
    26ae:	10 c0       	rjmp	.+32     	; 0x26d0 <vfscanf+0x22e>
    26b0:	50 fe       	sbrs	r5, 0
    26b2:	93 94       	inc	r9
    26b4:	f7 01       	movw	r30, r14
    26b6:	03 81       	ldd	r16, Z+3	; 0x03
    26b8:	f5 01       	movw	r30, r10
    26ba:	03 fd       	sbrc	r16, 3
    26bc:	15 91       	lpm	r17, Z+
    26be:	03 ff       	sbrs	r16, 3
    26c0:	11 91       	ld	r17, Z+
    26c2:	5f 01       	movw	r10, r30
    26c4:	11 23       	and	r17, r17
    26c6:	09 f0       	breq	.+2      	; 0x26ca <vfscanf+0x228>
    26c8:	06 cf       	rjmp	.-500    	; 0x24d6 <vfscanf+0x34>
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <vfscanf+0x22e>
    26cc:	99 20       	and	r9, r9
    26ce:	19 f0       	breq	.+6      	; 0x26d6 <vfscanf+0x234>
    26d0:	89 2d       	mov	r24, r9
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <vfscanf+0x238>
    26d6:	8f ef       	ldi	r24, 0xFF	; 255
    26d8:	9f ef       	ldi	r25, 0xFF	; 255
    26da:	0f 90       	pop	r0
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	cf 90       	pop	r12
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	7f 90       	pop	r7
    26f6:	6f 90       	pop	r6
    26f8:	5f 90       	pop	r5
    26fa:	08 95       	ret

000026fc <isspace>:
    26fc:	91 11       	cpse	r25, r1
    26fe:	0e c1       	rjmp	.+540    	; 0x291c <__ctype_isfalse>
    2700:	80 32       	cpi	r24, 0x20	; 32
    2702:	19 f0       	breq	.+6      	; 0x270a <isspace+0xe>
    2704:	89 50       	subi	r24, 0x09	; 9
    2706:	85 50       	subi	r24, 0x05	; 5
    2708:	d0 f7       	brcc	.-12     	; 0x26fe <isspace+0x2>
    270a:	08 95       	ret

0000270c <strchr_P>:
    270c:	fc 01       	movw	r30, r24
    270e:	05 90       	lpm	r0, Z+
    2710:	06 16       	cp	r0, r22
    2712:	21 f0       	breq	.+8      	; 0x271c <strchr_P+0x10>
    2714:	00 20       	and	r0, r0
    2716:	d9 f7       	brne	.-10     	; 0x270e <strchr_P+0x2>
    2718:	c0 01       	movw	r24, r0
    271a:	08 95       	ret
    271c:	31 97       	sbiw	r30, 0x01	; 1
    271e:	cf 01       	movw	r24, r30
    2720:	08 95       	ret

00002722 <strnlen_P>:
    2722:	fc 01       	movw	r30, r24
    2724:	05 90       	lpm	r0, Z+
    2726:	61 50       	subi	r22, 0x01	; 1
    2728:	70 40       	sbci	r23, 0x00	; 0
    272a:	01 10       	cpse	r0, r1
    272c:	d8 f7       	brcc	.-10     	; 0x2724 <strnlen_P+0x2>
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	8e 0f       	add	r24, r30
    2734:	9f 1f       	adc	r25, r31
    2736:	08 95       	ret

00002738 <strnlen>:
    2738:	fc 01       	movw	r30, r24
    273a:	61 50       	subi	r22, 0x01	; 1
    273c:	70 40       	sbci	r23, 0x00	; 0
    273e:	01 90       	ld	r0, Z+
    2740:	01 10       	cpse	r0, r1
    2742:	d8 f7       	brcc	.-10     	; 0x273a <strnlen+0x2>
    2744:	80 95       	com	r24
    2746:	90 95       	com	r25
    2748:	8e 0f       	add	r24, r30
    274a:	9f 1f       	adc	r25, r31
    274c:	08 95       	ret

0000274e <fgetc>:
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	ec 01       	movw	r28, r24
    2754:	2b 81       	ldd	r18, Y+3	; 0x03
    2756:	20 ff       	sbrs	r18, 0
    2758:	35 c0       	rjmp	.+106    	; 0x27c4 <fgetc+0x76>
    275a:	26 ff       	sbrs	r18, 6
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <fgetc+0x22>
    275e:	2f 7b       	andi	r18, 0xBF	; 191
    2760:	2b 83       	std	Y+3, r18	; 0x03
    2762:	8e 81       	ldd	r24, Y+6	; 0x06
    2764:	9f 81       	ldd	r25, Y+7	; 0x07
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	9f 83       	std	Y+7, r25	; 0x07
    276a:	8e 83       	std	Y+6, r24	; 0x06
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	28 c0       	rjmp	.+80     	; 0x27c0 <fgetc+0x72>
    2770:	22 ff       	sbrs	r18, 2
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <fgetc+0x44>
    2774:	e8 81       	ld	r30, Y
    2776:	f9 81       	ldd	r31, Y+1	; 0x01
    2778:	80 81       	ld	r24, Z
    277a:	99 27       	eor	r25, r25
    277c:	87 fd       	sbrc	r24, 7
    277e:	90 95       	com	r25
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	19 f4       	brne	.+6      	; 0x278a <fgetc+0x3c>
    2784:	20 62       	ori	r18, 0x20	; 32
    2786:	2b 83       	std	Y+3, r18	; 0x03
    2788:	1d c0       	rjmp	.+58     	; 0x27c4 <fgetc+0x76>
    278a:	31 96       	adiw	r30, 0x01	; 1
    278c:	f9 83       	std	Y+1, r31	; 0x01
    278e:	e8 83       	st	Y, r30
    2790:	11 c0       	rjmp	.+34     	; 0x27b4 <fgetc+0x66>
    2792:	ea 85       	ldd	r30, Y+10	; 0x0a
    2794:	fb 85       	ldd	r31, Y+11	; 0x0b
    2796:	ce 01       	movw	r24, r28
    2798:	19 95       	eicall
    279a:	97 ff       	sbrs	r25, 7
    279c:	0b c0       	rjmp	.+22     	; 0x27b4 <fgetc+0x66>
    279e:	2b 81       	ldd	r18, Y+3	; 0x03
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	8f 3f       	cpi	r24, 0xFF	; 255
    27a4:	93 07       	cpc	r25, r19
    27a6:	11 f4       	brne	.+4      	; 0x27ac <fgetc+0x5e>
    27a8:	80 e1       	ldi	r24, 0x10	; 16
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <fgetc+0x60>
    27ac:	80 e2       	ldi	r24, 0x20	; 32
    27ae:	82 2b       	or	r24, r18
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    27b2:	08 c0       	rjmp	.+16     	; 0x27c4 <fgetc+0x76>
    27b4:	2e 81       	ldd	r18, Y+6	; 0x06
    27b6:	3f 81       	ldd	r19, Y+7	; 0x07
    27b8:	2f 5f       	subi	r18, 0xFF	; 255
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	3f 83       	std	Y+7, r19	; 0x07
    27be:	2e 83       	std	Y+6, r18	; 0x06
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <fgetc+0x7a>
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	9f ef       	ldi	r25, 0xFF	; 255
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <fputc>:
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	8c 01       	movw	r16, r24
    27d8:	eb 01       	movw	r28, r22
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	81 ff       	sbrs	r24, 1
    27de:	1b c0       	rjmp	.+54     	; 0x2816 <fputc+0x48>
    27e0:	82 ff       	sbrs	r24, 2
    27e2:	0d c0       	rjmp	.+26     	; 0x27fe <fputc+0x30>
    27e4:	2e 81       	ldd	r18, Y+6	; 0x06
    27e6:	3f 81       	ldd	r19, Y+7	; 0x07
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	28 17       	cp	r18, r24
    27ee:	39 07       	cpc	r19, r25
    27f0:	64 f4       	brge	.+24     	; 0x280a <fputc+0x3c>
    27f2:	e8 81       	ld	r30, Y
    27f4:	f9 81       	ldd	r31, Y+1	; 0x01
    27f6:	01 93       	st	Z+, r16
    27f8:	f9 83       	std	Y+1, r31	; 0x01
    27fa:	e8 83       	st	Y, r30
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <fputc+0x3c>
    27fe:	e8 85       	ldd	r30, Y+8	; 0x08
    2800:	f9 85       	ldd	r31, Y+9	; 0x09
    2802:	80 2f       	mov	r24, r16
    2804:	19 95       	eicall
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	31 f4       	brne	.+12     	; 0x2816 <fputc+0x48>
    280a:	8e 81       	ldd	r24, Y+6	; 0x06
    280c:	9f 81       	ldd	r25, Y+7	; 0x07
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	9f 83       	std	Y+7, r25	; 0x07
    2812:	8e 83       	std	Y+6, r24	; 0x06
    2814:	02 c0       	rjmp	.+4      	; 0x281a <fputc+0x4c>
    2816:	0f ef       	ldi	r16, 0xFF	; 255
    2818:	1f ef       	ldi	r17, 0xFF	; 255
    281a:	c8 01       	movw	r24, r16
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	1f 91       	pop	r17
    2822:	0f 91       	pop	r16
    2824:	08 95       	ret

00002826 <ungetc>:
    2826:	fb 01       	movw	r30, r22
    2828:	23 81       	ldd	r18, Z+3	; 0x03
    282a:	20 ff       	sbrs	r18, 0
    282c:	13 c0       	rjmp	.+38     	; 0x2854 <ungetc+0x2e>
    282e:	26 fd       	sbrc	r18, 6
    2830:	11 c0       	rjmp	.+34     	; 0x2854 <ungetc+0x2e>
    2832:	3f ef       	ldi	r19, 0xFF	; 255
    2834:	8f 3f       	cpi	r24, 0xFF	; 255
    2836:	93 07       	cpc	r25, r19
    2838:	81 f0       	breq	.+32     	; 0x285a <ungetc+0x34>
    283a:	82 83       	std	Z+2, r24	; 0x02
    283c:	92 2f       	mov	r25, r18
    283e:	90 64       	ori	r25, 0x40	; 64
    2840:	9f 7d       	andi	r25, 0xDF	; 223
    2842:	93 83       	std	Z+3, r25	; 0x03
    2844:	26 81       	ldd	r18, Z+6	; 0x06
    2846:	37 81       	ldd	r19, Z+7	; 0x07
    2848:	21 50       	subi	r18, 0x01	; 1
    284a:	30 40       	sbci	r19, 0x00	; 0
    284c:	37 83       	std	Z+7, r19	; 0x07
    284e:	26 83       	std	Z+6, r18	; 0x06
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	08 95       	ret
    2854:	8f ef       	ldi	r24, 0xFF	; 255
    2856:	9f ef       	ldi	r25, 0xFF	; 255
    2858:	08 95       	ret
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	9f ef       	ldi	r25, 0xFF	; 255
    285e:	08 95       	ret

00002860 <__ultoa_invert>:
    2860:	fa 01       	movw	r30, r20
    2862:	aa 27       	eor	r26, r26
    2864:	28 30       	cpi	r18, 0x08	; 8
    2866:	51 f1       	breq	.+84     	; 0x28bc <__ultoa_invert+0x5c>
    2868:	20 31       	cpi	r18, 0x10	; 16
    286a:	81 f1       	breq	.+96     	; 0x28cc <__ultoa_invert+0x6c>
    286c:	e8 94       	clt
    286e:	6f 93       	push	r22
    2870:	6e 7f       	andi	r22, 0xFE	; 254
    2872:	6e 5f       	subi	r22, 0xFE	; 254
    2874:	7f 4f       	sbci	r23, 0xFF	; 255
    2876:	8f 4f       	sbci	r24, 0xFF	; 255
    2878:	9f 4f       	sbci	r25, 0xFF	; 255
    287a:	af 4f       	sbci	r26, 0xFF	; 255
    287c:	b1 e0       	ldi	r27, 0x01	; 1
    287e:	3e d0       	rcall	.+124    	; 0x28fc <__ultoa_invert+0x9c>
    2880:	b4 e0       	ldi	r27, 0x04	; 4
    2882:	3c d0       	rcall	.+120    	; 0x28fc <__ultoa_invert+0x9c>
    2884:	67 0f       	add	r22, r23
    2886:	78 1f       	adc	r23, r24
    2888:	89 1f       	adc	r24, r25
    288a:	9a 1f       	adc	r25, r26
    288c:	a1 1d       	adc	r26, r1
    288e:	68 0f       	add	r22, r24
    2890:	79 1f       	adc	r23, r25
    2892:	8a 1f       	adc	r24, r26
    2894:	91 1d       	adc	r25, r1
    2896:	a1 1d       	adc	r26, r1
    2898:	6a 0f       	add	r22, r26
    289a:	71 1d       	adc	r23, r1
    289c:	81 1d       	adc	r24, r1
    289e:	91 1d       	adc	r25, r1
    28a0:	a1 1d       	adc	r26, r1
    28a2:	20 d0       	rcall	.+64     	; 0x28e4 <__ultoa_invert+0x84>
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <__ultoa_invert+0x48>
    28a6:	68 94       	set
    28a8:	3f 91       	pop	r19
    28aa:	2a e0       	ldi	r18, 0x0A	; 10
    28ac:	26 9f       	mul	r18, r22
    28ae:	11 24       	eor	r1, r1
    28b0:	30 19       	sub	r19, r0
    28b2:	30 5d       	subi	r19, 0xD0	; 208
    28b4:	31 93       	st	Z+, r19
    28b6:	de f6       	brtc	.-74     	; 0x286e <__ultoa_invert+0xe>
    28b8:	cf 01       	movw	r24, r30
    28ba:	08 95       	ret
    28bc:	46 2f       	mov	r20, r22
    28be:	47 70       	andi	r20, 0x07	; 7
    28c0:	40 5d       	subi	r20, 0xD0	; 208
    28c2:	41 93       	st	Z+, r20
    28c4:	b3 e0       	ldi	r27, 0x03	; 3
    28c6:	0f d0       	rcall	.+30     	; 0x28e6 <__ultoa_invert+0x86>
    28c8:	c9 f7       	brne	.-14     	; 0x28bc <__ultoa_invert+0x5c>
    28ca:	f6 cf       	rjmp	.-20     	; 0x28b8 <__ultoa_invert+0x58>
    28cc:	46 2f       	mov	r20, r22
    28ce:	4f 70       	andi	r20, 0x0F	; 15
    28d0:	40 5d       	subi	r20, 0xD0	; 208
    28d2:	4a 33       	cpi	r20, 0x3A	; 58
    28d4:	18 f0       	brcs	.+6      	; 0x28dc <__ultoa_invert+0x7c>
    28d6:	49 5d       	subi	r20, 0xD9	; 217
    28d8:	31 fd       	sbrc	r19, 1
    28da:	40 52       	subi	r20, 0x20	; 32
    28dc:	41 93       	st	Z+, r20
    28de:	02 d0       	rcall	.+4      	; 0x28e4 <__ultoa_invert+0x84>
    28e0:	a9 f7       	brne	.-22     	; 0x28cc <__ultoa_invert+0x6c>
    28e2:	ea cf       	rjmp	.-44     	; 0x28b8 <__ultoa_invert+0x58>
    28e4:	b4 e0       	ldi	r27, 0x04	; 4
    28e6:	a6 95       	lsr	r26
    28e8:	97 95       	ror	r25
    28ea:	87 95       	ror	r24
    28ec:	77 95       	ror	r23
    28ee:	67 95       	ror	r22
    28f0:	ba 95       	dec	r27
    28f2:	c9 f7       	brne	.-14     	; 0x28e6 <__ultoa_invert+0x86>
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	61 05       	cpc	r22, r1
    28f8:	71 05       	cpc	r23, r1
    28fa:	08 95       	ret
    28fc:	9b 01       	movw	r18, r22
    28fe:	ac 01       	movw	r20, r24
    2900:	0a 2e       	mov	r0, r26
    2902:	06 94       	lsr	r0
    2904:	57 95       	ror	r21
    2906:	47 95       	ror	r20
    2908:	37 95       	ror	r19
    290a:	27 95       	ror	r18
    290c:	ba 95       	dec	r27
    290e:	c9 f7       	brne	.-14     	; 0x2902 <__ultoa_invert+0xa2>
    2910:	62 0f       	add	r22, r18
    2912:	73 1f       	adc	r23, r19
    2914:	84 1f       	adc	r24, r20
    2916:	95 1f       	adc	r25, r21
    2918:	a0 1d       	adc	r26, r0
    291a:	08 95       	ret

0000291c <__ctype_isfalse>:
    291c:	99 27       	eor	r25, r25
    291e:	88 27       	eor	r24, r24

00002920 <__ctype_istrue>:
    2920:	08 95       	ret

00002922 <_exit>:
    2922:	f8 94       	cli

00002924 <__stop_program>:
    2924:	ff cf       	rjmp	.-2      	; 0x2924 <__stop_program>

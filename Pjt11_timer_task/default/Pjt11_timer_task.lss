
Pjt11_timer_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800200  00001ffa  0000208e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013d  008002e0  008002e0  0000216e  2**0
                  ALLOC
  3 .stab         00001314  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000492  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000390  00000000  00000000  00003918  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003672  00000000  00000000  00003ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001985  00000000  00000000  0000731a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c11  00000000  00000000  00008c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a2c  00000000  00000000  0000a8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000968  00000000  00000000  0000b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002aaf  00000000  00000000  0000bc44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000e6f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_15>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_25>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_27>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      bc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      cc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      dc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      e0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	12 e0       	ldi	r17, 0x02	; 2
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	ea ef       	ldi	r30, 0xFA	; 250
     108:	ff e1       	ldi	r31, 0x1F	; 31
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 3e       	cpi	r26, 0xE0	; 224
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
     11a:	1b be       	out	0x3b, r1	; 59

0000011c <__do_clear_bss>:
     11c:	14 e0       	ldi	r17, 0x04	; 4
     11e:	a0 ee       	ldi	r26, 0xE0	; 224
     120:	b2 e0       	ldi	r27, 0x02	; 2
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	ad 31       	cpi	r26, 0x1D	; 29
     128:	b1 07       	cpc	r27, r17
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 6b 07 	call	0xed6	; 0xed6 <main>
     130:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <is_prime>:
#include "app.h"
#include "linkedlist.h"
#include "timerlinkedlist.h"

int is_prime(int n)
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
	int i; 
	for(i = 2; i<= n/2; i++)
     13e:	62 e0       	ldi	r22, 0x02	; 2
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     146:	eb 01       	movw	r28, r22
     148:	22 e0       	ldi	r18, 0x02	; 2
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	08 c0       	rjmp	.+16     	; 0x15e <is_prime+0x26>
		if ((n%i) == 0)
     14e:	cf 01       	movw	r24, r30
     150:	b9 01       	movw	r22, r18
     152:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     156:	00 97       	sbiw	r24, 0x00	; 0
     158:	41 f0       	breq	.+16     	; 0x16a <is_prime+0x32>
#include "timerlinkedlist.h"

int is_prime(int n)
{
	int i; 
	for(i = 2; i<= n/2; i++)
     15a:	2f 5f       	subi	r18, 0xFF	; 255
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	c2 17       	cp	r28, r18
     160:	d3 07       	cpc	r29, r19
     162:	ac f7       	brge	.-22     	; 0x14e <is_prime+0x16>
		if ((n%i) == 0)
			return(0);
	return (1);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 c0       	rjmp	.+4      	; 0x16e <is_prime+0x36>
int is_prime(int n)
{
	int i; 
	for(i = 2; i<= n/2; i++)
		if ((n%i) == 0)
			return(0);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <task_prime>:

void task_prime(char *ap)
{
     174:	cf 92       	push	r12
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
     184:	00 97       	sbiw	r24, 0x00	; 0
     186:	41 f0       	breq	.+16     	; 0x198 <task_prime+0x24>
     188:	fc 01       	movw	r30, r24
     18a:	20 81       	ld	r18, Z
     18c:	22 23       	and	r18, r18
     18e:	21 f0       	breq	.+8      	; 0x198 <task_prime+0x24>
     190:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <atoi>
     194:	8c 01       	movw	r16, r24
     196:	02 c0       	rjmp	.+4      	; 0x19c <task_prime+0x28>
	return (1);
}

void task_prime(char *ap)
{
	int n, t = 2000, count = 0;
     198:	00 ed       	ldi	r16, 0xD0	; 208
     19a:	17 e0       	ldi	r17, 0x07	; 7
     19c:	ee 24       	eor	r14, r14
     19e:	ff 24       	eor	r15, r15
	if(ap && *ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     1a0:	c2 e0       	ldi	r28, 0x02	; 2
     1a2:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	c8 2e       	mov	r12, r24
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	d8 2e       	mov	r13, r24

void task_prime(char *ap)
{
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     1ac:	17 c0       	rjmp	.+46     	; 0x1dc <task_prime+0x68>
		if(is_prime(n)) {
     1ae:	ce 01       	movw	r24, r28
     1b0:	0e 94 9c 00 	call	0x138	; 0x138 <is_prime>
     1b4:	00 97       	sbiw	r24, 0x00	; 0
     1b6:	89 f0       	breq	.+34     	; 0x1da <task_prime+0x66>
			count++;
     1b8:	08 94       	sec
     1ba:	e1 1c       	adc	r14, r1
     1bc:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!!\n", n);
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <task_prime+0x4c>
     1c0:	0f 92       	push	r0
     1c2:	ed b7       	in	r30, 0x3d	; 61
     1c4:	fe b7       	in	r31, 0x3e	; 62
     1c6:	d2 82       	std	Z+2, r13	; 0x02
     1c8:	c1 82       	std	Z+1, r12	; 0x01
     1ca:	d4 83       	std	Z+4, r29	; 0x04
     1cc:	c3 83       	std	Z+3, r28	; 0x03
     1ce:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0

void task_prime(char *ap)
{
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     1da:	21 96       	adiw	r28, 0x01	; 1
     1dc:	0c 17       	cp	r16, r28
     1de:	1d 07       	cpc	r17, r29
     1e0:	34 f7       	brge	.-52     	; 0x1ae <task_prime+0x3a>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <task_prime+0x70>
     1e4:	0f 92       	push	r0
     1e6:	8a e1       	ldi	r24, 0x1A	; 26
     1e8:	92 e0       	ldi	r25, 0x02	; 2
     1ea:	ed b7       	in	r30, 0x3d	; 61
     1ec:	fe b7       	in	r31, 0x3e	; 62
     1ee:	92 83       	std	Z+2, r25	; 0x02
     1f0:	81 83       	std	Z+1, r24	; 0x01
     1f2:	f4 82       	std	Z+4, r15	; 0x04
     1f4:	e3 82       	std	Z+3, r14	; 0x03
     1f6:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <app_prime>:


void app_prime(char *ap)
{
     214:	cf 92       	push	r12
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	21 f0       	breq	.+8      	; 0x230 <app_prime+0x1c>
     228:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <atoi>
     22c:	7c 01       	movw	r14, r24
     22e:	04 c0       	rjmp	.+8      	; 0x238 <app_prime+0x24>
}


void app_prime(char *ap)
{
	int t = 2000, n, count = 0;
     230:	20 ed       	ldi	r18, 0xD0	; 208
     232:	e2 2e       	mov	r14, r18
     234:	27 e0       	ldi	r18, 0x07	; 7
     236:	f2 2e       	mov	r15, r18
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	10 e0       	ldi	r17, 0x00	; 0
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     23c:	c2 e0       	ldi	r28, 0x02	; 2
     23e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(is_prime(n))
		{
			count++;
			printf("%d is a prime number!\n", n);
     240:	94 e2       	ldi	r25, 0x24	; 36
     242:	c9 2e       	mov	r12, r25
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	d9 2e       	mov	r13, r25
{
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     248:	16 c0       	rjmp	.+44     	; 0x276 <app_prime+0x62>
	{
		if(is_prime(n))
     24a:	ce 01       	movw	r24, r28
     24c:	0e 94 9c 00 	call	0x138	; 0x138 <is_prime>
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	81 f0       	breq	.+32     	; 0x274 <app_prime+0x60>
		{
			count++;
     254:	0f 5f       	subi	r16, 0xFF	; 255
     256:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!\n", n);
     258:	00 d0       	rcall	.+0      	; 0x25a <app_prime+0x46>
     25a:	0f 92       	push	r0
     25c:	ed b7       	in	r30, 0x3d	; 61
     25e:	fe b7       	in	r31, 0x3e	; 62
     260:	d2 82       	std	Z+2, r13	; 0x02
     262:	c1 82       	std	Z+1, r12	; 0x01
     264:	d4 83       	std	Z+4, r29	; 0x04
     266:	c3 83       	std	Z+3, r28	; 0x03
     268:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
{
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     274:	21 96       	adiw	r28, 0x01	; 1
     276:	ec 16       	cp	r14, r28
     278:	fd 06       	cpc	r15, r29
     27a:	3c f7       	brge	.-50     	; 0x24a <app_prime+0x36>
		{
			count++;
			printf("%d is a prime number!\n", n);
		}
	}
	printf("count = %d\n", count);
     27c:	00 d0       	rcall	.+0      	; 0x27e <app_prime+0x6a>
     27e:	0f 92       	push	r0
     280:	8b e3       	ldi	r24, 0x3B	; 59
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	ed b7       	in	r30, 0x3d	; 61
     286:	fe b7       	in	r31, 0x3e	; 62
     288:	92 83       	std	Z+2, r25	; 0x02
     28a:	81 83       	std	Z+1, r24	; 0x01
     28c:	14 83       	std	Z+4, r17	; 0x04
     28e:	03 83       	std	Z+3, r16	; 0x03
     290:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	08 95       	ret

000002ae <app_list>:

void app_list(char *ap)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	28 97       	sbiw	r28, 0x08	; 8
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	19 f0       	breq	.+6      	; 0x2d2 <app_list+0x24>
     2cc:	fc 01       	movw	r30, r24
     2ce:	10 81       	ld	r17, Z
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <app_list+0x26>
	printf("count = %d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     2d2:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     2d4:	37 e4       	ldi	r19, 0x47	; 71
     2d6:	e3 2e       	mov	r14, r19
     2d8:	32 e0       	ldi	r19, 0x02	; 2
     2da:	f3 2e       	mov	r15, r19
     2dc:	0f 92       	push	r0
     2de:	0f 92       	push	r0
     2e0:	ed b7       	in	r30, 0x3d	; 61
     2e2:	fe b7       	in	r31, 0x3e	; 62
     2e4:	f2 82       	std	Z+2, r15	; 0x02
     2e6:	e1 82       	std	Z+1, r14	; 0x01
     2e8:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
		if(fgets(buf, 8, stdin) == NULL)
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	40 91 17 04 	lds	r20, 0x0417
     2f4:	50 91 18 04 	lds	r21, 0x0418
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	68 e0       	ldi	r22, 0x08	; 8
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	0e 94 4d 09 	call	0x129a	; 0x129a <fgets>
     304:	00 97       	sbiw	r24, 0x00	; 0
     306:	c9 f0       	breq	.+50     	; 0x33a <app_list+0x8c>
			break;
		np = get_node();
     308:	0e 94 52 03 	call	0x6a4	; 0x6a4 <get_node>
		np->data = buf[0];
     30c:	29 81       	ldd	r18, Y+1	; 0x01
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
     312:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     314:	18 36       	cpi	r17, 0x68	; 104
     316:	29 f0       	breq	.+10     	; 0x322 <app_list+0x74>
     318:	14 37       	cpi	r17, 0x74	; 116
     31a:	31 f0       	breq	.+12     	; 0x328 <app_list+0x7a>
     31c:	14 36       	cpi	r17, 0x64	; 100
     31e:	51 f4       	brne	.+20     	; 0x334 <app_list+0x86>
     320:	06 c0       	rjmp	.+12     	; 0x32e <app_list+0x80>
			case 'h' : insert_node_head(np); break;
     322:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <insert_node_head>
     326:	da cf       	rjmp	.-76     	; 0x2dc <app_list+0x2e>
			case 't' : insert_node_tail(np); break;
     328:	0e 94 6f 03 	call	0x6de	; 0x6de <insert_node_tail>
     32c:	d7 cf       	rjmp	.-82     	; 0x2dc <app_list+0x2e>
			case 'd' : insert_node_desc(np); break;		
     32e:	0e 94 bd 03 	call	0x77a	; 0x77a <insert_node_desc>
     332:	d4 cf       	rjmp	.-88     	; 0x2dc <app_list+0x2e>
			default : insert_node_ascn(np);
     334:	0e 94 86 03 	call	0x70c	; 0x70c <insert_node_ascn>
     338:	d1 cf       	rjmp	.-94     	; 0x2dc <app_list+0x2e>
		}
	}
	tour_list();
     33a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <tour_list>
	free_list();
     33e:	0e 94 21 04 	call	0x842	; 0x842 <free_list>
}
     342:	28 96       	adiw	r28, 0x08	; 8
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	08 95       	ret

0000035a <app_timer>:

void app_timer(char *ap)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	62 97       	sbiw	r28, 0x12	; 18
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     372:	0a e4       	ldi	r16, 0x4A	; 74
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	0f 92       	push	r0
     378:	0f 92       	push	r0
     37a:	ed b7       	in	r30, 0x3d	; 61
     37c:	fe b7       	in	r31, 0x3e	; 62
     37e:	12 83       	std	Z+2, r17	; 0x02
     380:	01 83       	std	Z+1, r16	; 0x01
     382:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	40 91 17 04 	lds	r20, 0x0417
     38e:	50 91 18 04 	lds	r21, 0x0418
     392:	ce 01       	movw	r24, r28
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	68 e0       	ldi	r22, 0x08	; 8
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	0e 94 4d 09 	call	0x129a	; 0x129a <fgets>
     39e:	00 97       	sbiw	r24, 0x00	; 0
     3a0:	61 f0       	breq	.+24     	; 0x3ba <app_timer+0x60>
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <atoi>
     3aa:	bc 01       	movw	r22, r24
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	29 f0       	breq	.+10     	; 0x3ba <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     3b0:	ce 01       	movw	r24, r28
     3b2:	09 96       	adiw	r24, 0x09	; 9
     3b4:	0e 94 6f 06 	call	0xcde	; 0xcde <insert_timer>
	}
     3b8:	de cf       	rjmp	.-68     	; 0x376 <app_timer+0x1c>
	tour_timer();
     3ba:	0e 94 17 06 	call	0xc2e	; 0xc2e <tour_timer>
	free_timer();
     3be:	0e 94 59 06 	call	0xcb2	; 0xcb2 <free_timer>
}
     3c2:	62 96       	adiw	r28, 0x12	; 18
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret

000003d8 <app_cal>:

void app_cal(char *ap)
{
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	00 d0       	rcall	.+0      	; 0x3de <app_cal+0x6>
     3de:	0f 92       	push	r0
     3e0:	0f 92       	push	r0
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
	int x;
	int y;
	char c;
	sscanf(ap, "%d%c%d", &x, &c, &y);
     3e6:	2d b7       	in	r18, 0x3d	; 61
     3e8:	3e b7       	in	r19, 0x3e	; 62
     3ea:	2a 50       	subi	r18, 0x0A	; 10
     3ec:	30 40       	sbci	r19, 0x00	; 0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	3e bf       	out	0x3e, r19	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	2d bf       	out	0x3d, r18	; 61
     3f8:	ed b7       	in	r30, 0x3d	; 61
     3fa:	fe b7       	in	r31, 0x3e	; 62
     3fc:	31 96       	adiw	r30, 0x01	; 1
     3fe:	ad b7       	in	r26, 0x3d	; 61
     400:	be b7       	in	r27, 0x3e	; 62
     402:	12 96       	adiw	r26, 0x02	; 2
     404:	9c 93       	st	X, r25
     406:	8e 93       	st	-X, r24
     408:	11 97       	sbiw	r26, 0x01	; 1
     40a:	8e e4       	ldi	r24, 0x4E	; 78
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	93 83       	std	Z+3, r25	; 0x03
     410:	82 83       	std	Z+2, r24	; 0x02
     412:	ce 01       	movw	r24, r28
     414:	04 96       	adiw	r24, 0x04	; 4
     416:	95 83       	std	Z+5, r25	; 0x05
     418:	84 83       	std	Z+4, r24	; 0x04
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	97 83       	std	Z+7, r25	; 0x07
     420:	86 83       	std	Z+6, r24	; 0x06
     422:	ce 01       	movw	r24, r28
     424:	02 96       	adiw	r24, 0x02	; 2
     426:	91 87       	std	Z+9, r25	; 0x09
     428:	80 87       	std	Z+8, r24	; 0x08
     42a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <sscanf>
	if(c == '+') printf("%d", x + y);
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	ed b7       	in	r30, 0x3d	; 61
     432:	fe b7       	in	r31, 0x3e	; 62
     434:	3a 96       	adiw	r30, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	fe bf       	out	0x3e, r31	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	ed bf       	out	0x3d, r30	; 61
     440:	8b 32       	cpi	r24, 0x2B	; 43
     442:	89 f4       	brne	.+34     	; 0x466 <app_cal+0x8e>
     444:	00 d0       	rcall	.+0      	; 0x446 <app_cal+0x6e>
     446:	0f 92       	push	r0
     448:	85 e5       	ldi	r24, 0x55	; 85
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	ad b7       	in	r26, 0x3d	; 61
     44e:	be b7       	in	r27, 0x3e	; 62
     450:	12 96       	adiw	r26, 0x02	; 2
     452:	9c 93       	st	X, r25
     454:	8e 93       	st	-X, r24
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	2a 81       	ldd	r18, Y+2	; 0x02
     45e:	3b 81       	ldd	r19, Y+3	; 0x03
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	41 c0       	rjmp	.+130    	; 0x4e8 <app_cal+0x110>
	else if(c == '-') printf("%d", x-y);
     466:	8d 32       	cpi	r24, 0x2D	; 45
     468:	89 f4       	brne	.+34     	; 0x48c <app_cal+0xb4>
     46a:	00 d0       	rcall	.+0      	; 0x46c <app_cal+0x94>
     46c:	0f 92       	push	r0
     46e:	85 e5       	ldi	r24, 0x55	; 85
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	ed b7       	in	r30, 0x3d	; 61
     474:	fe b7       	in	r31, 0x3e	; 62
     476:	92 83       	std	Z+2, r25	; 0x02
     478:	81 83       	std	Z+1, r24	; 0x01
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	2a 81       	ldd	r18, Y+2	; 0x02
     480:	3b 81       	ldd	r19, Y+3	; 0x03
     482:	82 1b       	sub	r24, r18
     484:	93 0b       	sbc	r25, r19
     486:	94 83       	std	Z+4, r25	; 0x04
     488:	83 83       	std	Z+3, r24	; 0x03
     48a:	32 c0       	rjmp	.+100    	; 0x4f0 <app_cal+0x118>
	else if(c == '/') printf("%d", x/y);
     48c:	8f 32       	cpi	r24, 0x2F	; 47
     48e:	a9 f4       	brne	.+42     	; 0x4ba <app_cal+0xe2>
     490:	00 d0       	rcall	.+0      	; 0x492 <app_cal+0xba>
     492:	0f 92       	push	r0
     494:	85 e5       	ldi	r24, 0x55	; 85
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	ad b7       	in	r26, 0x3d	; 61
     49a:	be b7       	in	r27, 0x3e	; 62
     49c:	12 96       	adiw	r26, 0x02	; 2
     49e:	9c 93       	st	X, r25
     4a0:	8e 93       	st	-X, r24
     4a2:	11 97       	sbiw	r26, 0x01	; 1
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	9d 81       	ldd	r25, Y+5	; 0x05
     4a8:	6a 81       	ldd	r22, Y+2	; 0x02
     4aa:	7b 81       	ldd	r23, Y+3	; 0x03
     4ac:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     4b0:	ed b7       	in	r30, 0x3d	; 61
     4b2:	fe b7       	in	r31, 0x3e	; 62
     4b4:	74 83       	std	Z+4, r23	; 0x04
     4b6:	63 83       	std	Z+3, r22	; 0x03
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <app_cal+0x118>
	else if(c == '*') printf("%d", x*y);
     4ba:	8a 32       	cpi	r24, 0x2A	; 42
     4bc:	f9 f4       	brne	.+62     	; 0x4fc <app_cal+0x124>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <app_cal+0xe8>
     4c0:	0f 92       	push	r0
     4c2:	85 e5       	ldi	r24, 0x55	; 85
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	ad b7       	in	r26, 0x3d	; 61
     4c8:	be b7       	in	r27, 0x3e	; 62
     4ca:	12 96       	adiw	r26, 0x02	; 2
     4cc:	9c 93       	st	X, r25
     4ce:	8e 93       	st	-X, r24
     4d0:	11 97       	sbiw	r26, 0x01	; 1
     4d2:	4c 81       	ldd	r20, Y+4	; 0x04
     4d4:	5d 81       	ldd	r21, Y+5	; 0x05
     4d6:	2a 81       	ldd	r18, Y+2	; 0x02
     4d8:	3b 81       	ldd	r19, Y+3	; 0x03
     4da:	42 9f       	mul	r20, r18
     4dc:	c0 01       	movw	r24, r0
     4de:	43 9f       	mul	r20, r19
     4e0:	90 0d       	add	r25, r0
     4e2:	52 9f       	mul	r21, r18
     4e4:	90 0d       	add	r25, r0
     4e6:	11 24       	eor	r1, r1
     4e8:	14 96       	adiw	r26, 0x04	; 4
     4ea:	9c 93       	st	X, r25
     4ec:	8e 93       	st	-X, r24
     4ee:	13 97       	sbiw	r26, 0x03	; 3
     4f0:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <__vector_27>:

void task_cmd(char *arg);
static int echo_mode = 1;

ISR(USART0_TX_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	0b b6       	in	r0, 0x3b	; 59
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     532:	0e 94 a4 04 	call	0x948	; 0x948 <qo_delete>
     536:	88 23       	and	r24, r24
     538:	19 f4       	brne	.+6      	; 0x540 <__vector_27+0x34>
		uart_busy = 0;
     53a:	10 92 cc 03 	sts	0x03CC, r1
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__vector_27+0x38>
	else
		UDR0 = ch;
     540:	80 93 c6 00 	sts	0x00C6, r24
}
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	7f 91       	pop	r23
     552:	6f 91       	pop	r22
     554:	5f 91       	pop	r21
     556:	4f 91       	pop	r20
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	0b be       	out	0x3b, r0	; 59
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <__vector_25>:

ISR(USART0_RX_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	0b b6       	in	r0, 0x3b	; 59
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	1f 93       	push	r17
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2a 97       	sbiw	r28, 0x0a	; 10
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;

	ch = UDR0;
     5a0:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
     5a4:	1b 31       	cpi	r17, 0x1B	; 27
     5a6:	61 f4       	brne	.+24     	; 0x5c0 <__vector_25+0x56>
		echo_mode = (echo_mode +1) & 0x01;
     5a8:	80 91 59 02 	lds	r24, 0x0259
     5ac:	90 91 5a 02 	lds	r25, 0x025A
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	81 70       	andi	r24, 0x01	; 1
     5b4:	90 70       	andi	r25, 0x00	; 0
     5b6:	90 93 5a 02 	sts	0x025A, r25
     5ba:	80 93 59 02 	sts	0x0259, r24
		return;
     5be:	24 c0       	rjmp	.+72     	; 0x608 <__vector_25+0x9e>
	}

	if(ch != EOT)
     5c0:	14 30       	cpi	r17, 0x04	; 4
     5c2:	69 f0       	breq	.+26     	; 0x5de <__vector_25+0x74>
	{
		if(ch == '\r')	ch = '\n';
     5c4:	1d 30       	cpi	r17, 0x0D	; 13
     5c6:	09 f4       	brne	.+2      	; 0x5ca <__vector_25+0x60>
     5c8:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode) uart_echo(ch);
     5ca:	20 91 59 02 	lds	r18, 0x0259
     5ce:	30 91 5a 02 	lds	r19, 0x025A
     5d2:	21 15       	cp	r18, r1
     5d4:	31 05       	cpc	r19, r1
     5d6:	19 f0       	breq	.+6      	; 0x5de <__vector_25+0x74>
     5d8:	81 2f       	mov	r24, r17
     5da:	0e 94 39 07 	call	0xe72	; 0xe72 <uart_echo>
	}
	qi_insert(ch);
     5de:	81 2f       	mov	r24, r17
     5e0:	0e 94 43 04 	call	0x886	; 0x886 <qi_insert>
	if(ch == EOT || ch == '\n') {
     5e4:	14 30       	cpi	r17, 0x04	; 4
     5e6:	11 f0       	breq	.+4      	; 0x5ec <__vector_25+0x82>
     5e8:	1a 30       	cpi	r17, 0x0A	; 10
     5ea:	71 f4       	brne	.+28     	; 0x608 <__vector_25+0x9e>
		task.fun = task_cmd;
     5ec:	8f e3       	ldi	r24, 0x3F	; 63
     5ee:	95 e0       	ldi	r25, 0x05	; 5
     5f0:	9a 83       	std	Y+2, r25	; 0x02
     5f2:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     5f4:	ce 01       	movw	r24, r28
     5f6:	03 96       	adiw	r24, 0x03	; 3
     5f8:	68 e5       	ldi	r22, 0x58	; 88
     5fa:	72 e0       	ldi	r23, 0x02	; 2
     5fc:	0e 94 17 09 	call	0x122e	; 0x122e <strcpy>
		task_insert(&task);
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 ca 04 	call	0x994	; 0x994 <task_insert>
	}
}
     608:	2a 96       	adiw	r28, 0x0a	; 10
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	1f 91       	pop	r17
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <__vector_15>:

ISR(TIMER2_OVF_vect)
{
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	0b b6       	in	r0, 0x3b	; 59
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	2f 93       	push	r18
     64a:	3f 93       	push	r19
     64c:	4f 93       	push	r20
     64e:	5f 93       	push	r21
     650:	6f 93       	push	r22
     652:	7f 93       	push	r23
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	ef 93       	push	r30
     65e:	ff 93       	push	r31
	if(!Thead)
     660:	e0 91 e2 02 	lds	r30, 0x02E2
     664:	f0 91 e3 02 	lds	r31, 0x02E3
     668:	30 97       	sbiw	r30, 0x00	; 0
     66a:	49 f0       	breq	.+18     	; 0x67e <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	80 83       	st	Z, r24
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	11 f4       	brne	.+4      	; 0x67e <__vector_15+0x44>
		timer_expire();
     67a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <timer_expire>
}
     67e:	ff 91       	pop	r31
     680:	ef 91       	pop	r30
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	0f 90       	pop	r0
     698:	0b be       	out	0x3b, r0	; 59
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 bc 07 	call	0xf78	; 0xf78 <malloc>
	return(cp);
}
     6ac:	08 95       	ret

000006ae <free_node>:

void free_node(struct node *np)
{
	free(np);
     6ae:	0e 94 52 08 	call	0x10a4	; 0x10a4 <free>
}
     6b2:	08 95       	ret

000006b4 <insert_node_head>:

void insert_node_head(struct node *np)
{
     6b4:	fc 01       	movw	r30, r24
	if(!Head) {
     6b6:	80 91 e0 02 	lds	r24, 0x02E0
     6ba:	90 91 e1 02 	lds	r25, 0x02E1
     6be:	00 97       	sbiw	r24, 0x00	; 0
     6c0:	39 f4       	brne	.+14     	; 0x6d0 <insert_node_head+0x1c>
		Head = np;
     6c2:	f0 93 e1 02 	sts	0x02E1, r31
     6c6:	e0 93 e0 02 	sts	0x02E0, r30
		np->link = NULL;
     6ca:	13 82       	std	Z+3, r1	; 0x03
     6cc:	12 82       	std	Z+2, r1	; 0x02
     6ce:	08 95       	ret
	}
	else {
		np->link = Head;
     6d0:	93 83       	std	Z+3, r25	; 0x03
     6d2:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     6d4:	f0 93 e1 02 	sts	0x02E1, r31
     6d8:	e0 93 e0 02 	sts	0x02E0, r30
     6dc:	08 95       	ret

000006de <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     6de:	e0 91 e0 02 	lds	r30, 0x02E0
     6e2:	f0 91 e1 02 	lds	r31, 0x02E1
     6e6:	30 97       	sbiw	r30, 0x00	; 0
     6e8:	31 f4       	brne	.+12     	; 0x6f6 <insert_node_tail+0x18>
		Head = np;
     6ea:	90 93 e1 02 	sts	0x02E1, r25
     6ee:	80 93 e0 02 	sts	0x02E0, r24
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link);
     6f4:	f9 01       	movw	r30, r18
     6f6:	22 81       	ldd	r18, Z+2	; 0x02
     6f8:	33 81       	ldd	r19, Z+3	; 0x03
     6fa:	21 15       	cp	r18, r1
     6fc:	31 05       	cpc	r19, r1
     6fe:	d1 f7       	brne	.-12     	; 0x6f4 <insert_node_tail+0x16>
		cp->link = np;
     700:	93 83       	std	Z+3, r25	; 0x03
     702:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     704:	fc 01       	movw	r30, r24
     706:	13 82       	std	Z+3, r1	; 0x03
     708:	12 82       	std	Z+2, r1	; 0x02
}
     70a:	08 95       	ret

0000070c <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	fc 01       	movw	r30, r24
	struct node *cp, *pp;

	if(!Head) {
     712:	20 91 e0 02 	lds	r18, 0x02E0
     716:	30 91 e1 02 	lds	r19, 0x02E1
     71a:	21 15       	cp	r18, r1
     71c:	31 05       	cpc	r19, r1
     71e:	31 f0       	breq	.+12     	; 0x72c <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link);
     720:	40 81       	ld	r20, Z
     722:	51 81       	ldd	r21, Z+1	; 0x01
     724:	d9 01       	movw	r26, r18
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	d0 e0       	ldi	r29, 0x00	; 0
     72a:	0f c0       	rjmp	.+30     	; 0x74a <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;

	if(!Head) {
		Head = np;
     72c:	90 93 e1 02 	sts	0x02E1, r25
     730:	80 93 e0 02 	sts	0x02E0, r24
		np->link = NULL;
     734:	13 82       	std	Z+3, r1	; 0x03
     736:	12 82       	std	Z+2, r1	; 0x02
     738:	1d c0       	rjmp	.+58     	; 0x774 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link);
     73a:	12 96       	adiw	r26, 0x02	; 2
     73c:	8d 91       	ld	r24, X+
     73e:	9c 91       	ld	r25, X
     740:	13 97       	sbiw	r26, 0x03	; 3
     742:	ed 01       	movw	r28, r26
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	39 f0       	breq	.+14     	; 0x756 <insert_node_ascn+0x4a>
     748:	dc 01       	movw	r26, r24
     74a:	8d 91       	ld	r24, X+
     74c:	9c 91       	ld	r25, X
     74e:	11 97       	sbiw	r26, 0x01	; 1
     750:	84 17       	cp	r24, r20
     752:	95 07       	cpc	r25, r21
     754:	94 f3       	brlt	.-28     	; 0x73a <insert_node_ascn+0x2e>

		if(pp == NULL) {
     756:	20 97       	sbiw	r28, 0x00	; 0
     758:	39 f4       	brne	.+14     	; 0x768 <insert_node_ascn+0x5c>
			np->link = Head;
     75a:	33 83       	std	Z+3, r19	; 0x03
     75c:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     75e:	f0 93 e1 02 	sts	0x02E1, r31
     762:	e0 93 e0 02 	sts	0x02E0, r30
     766:	06 c0       	rjmp	.+12     	; 0x774 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	9b 81       	ldd	r25, Y+3	; 0x03
     76c:	93 83       	std	Z+3, r25	; 0x03
     76e:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     770:	fb 83       	std	Y+3, r31	; 0x03
     772:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <insert_node_desc>:

void insert_node_desc(struct node *np)
{
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	fc 01       	movw	r30, r24
	struct node *cp, *pp;

	if(!Head) {
     780:	20 91 e0 02 	lds	r18, 0x02E0
     784:	30 91 e1 02 	lds	r19, 0x02E1
     788:	21 15       	cp	r18, r1
     78a:	31 05       	cpc	r19, r1
     78c:	31 f0       	breq	.+12     	; 0x79a <insert_node_desc+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     78e:	40 81       	ld	r20, Z
     790:	51 81       	ldd	r21, Z+1	; 0x01
     792:	d9 01       	movw	r26, r18
     794:	c0 e0       	ldi	r28, 0x00	; 0
     796:	d0 e0       	ldi	r29, 0x00	; 0
     798:	0f c0       	rjmp	.+30     	; 0x7b8 <insert_node_desc+0x3e>
void insert_node_desc(struct node *np)
{
	struct node *cp, *pp;

	if(!Head) {
		Head = np;
     79a:	90 93 e1 02 	sts	0x02E1, r25
     79e:	80 93 e0 02 	sts	0x02E0, r24
		np->link = NULL;
     7a2:	13 82       	std	Z+3, r1	; 0x03
     7a4:	12 82       	std	Z+2, r1	; 0x02
     7a6:	1d c0       	rjmp	.+58     	; 0x7e2 <insert_node_desc+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     7a8:	12 96       	adiw	r26, 0x02	; 2
     7aa:	8d 91       	ld	r24, X+
     7ac:	9c 91       	ld	r25, X
     7ae:	13 97       	sbiw	r26, 0x03	; 3
     7b0:	ed 01       	movw	r28, r26
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	39 f0       	breq	.+14     	; 0x7c4 <insert_node_desc+0x4a>
     7b6:	dc 01       	movw	r26, r24
     7b8:	8d 91       	ld	r24, X+
     7ba:	9c 91       	ld	r25, X
     7bc:	11 97       	sbiw	r26, 0x01	; 1
     7be:	48 17       	cp	r20, r24
     7c0:	59 07       	cpc	r21, r25
     7c2:	94 f3       	brlt	.-28     	; 0x7a8 <insert_node_desc+0x2e>

		if(pp == NULL) {
     7c4:	20 97       	sbiw	r28, 0x00	; 0
     7c6:	39 f4       	brne	.+14     	; 0x7d6 <insert_node_desc+0x5c>
			np->link = Head;
     7c8:	33 83       	std	Z+3, r19	; 0x03
     7ca:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     7cc:	f0 93 e1 02 	sts	0x02E1, r31
     7d0:	e0 93 e0 02 	sts	0x02E0, r30
     7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <insert_node_desc+0x68>
		} else {
			np->link = pp->link;
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	93 83       	std	Z+3, r25	; 0x03
     7dc:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     7de:	fb 83       	std	Y+3, r31	; 0x03
     7e0:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <tour_list>:

void tour_list()
{
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     7f0:	8a e0       	ldi	r24, 0x0A	; 10
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 b9 09 	call	0x1372	; 0x1372 <putchar>
	for(cp = Head; cp != NULL; cp = cp->link) 
     7f8:	c0 91 e0 02 	lds	r28, 0x02E0
     7fc:	d0 91 e1 02 	lds	r29, 0x02E1
		printf("-->%c ", cp->data);
     800:	0b e5       	ldi	r16, 0x5B	; 91
     802:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp != NULL; cp = cp->link) 
     804:	13 c0       	rjmp	.+38     	; 0x82c <tour_list+0x44>
		printf("-->%c ", cp->data);
     806:	00 d0       	rcall	.+0      	; 0x808 <tour_list+0x20>
     808:	0f 92       	push	r0
     80a:	ed b7       	in	r30, 0x3d	; 61
     80c:	fe b7       	in	r31, 0x3e	; 62
     80e:	12 83       	std	Z+2, r17	; 0x02
     810:	01 83       	std	Z+1, r16	; 0x01
     812:	88 81       	ld	r24, Y
     814:	99 81       	ldd	r25, Y+1	; 0x01
     816:	94 83       	std	Z+4, r25	; 0x04
     818:	83 83       	std	Z+3, r24	; 0x03
     81a:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp != NULL; cp = cp->link) 
     81e:	0a 80       	ldd	r0, Y+2	; 0x02
     820:	db 81       	ldd	r29, Y+3	; 0x03
     822:	c0 2d       	mov	r28, r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	20 97       	sbiw	r28, 0x00	; 0
     82e:	59 f7       	brne	.-42     	; 0x806 <tour_list+0x1e>
		printf("-->%c ", cp->data);
		printf("\n");
     830:	8a e0       	ldi	r24, 0x0A	; 10
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 b9 09 	call	0x1372	; 0x1372 <putchar>
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <free_list>:

void free_list()
{
	struct node *cp;

	for( ; Head != NULL; ) {
     842:	09 c0       	rjmp	.+18     	; 0x856 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     844:	fc 01       	movw	r30, r24
     846:	22 81       	ldd	r18, Z+2	; 0x02
     848:	33 81       	ldd	r19, Z+3	; 0x03
     84a:	30 93 e1 02 	sts	0x02E1, r19
     84e:	20 93 e0 02 	sts	0x02E0, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     852:	0e 94 52 08 	call	0x10a4	; 0x10a4 <free>

void free_list()
{
	struct node *cp;

	for( ; Head != NULL; ) {
     856:	80 91 e0 02 	lds	r24, 0x02E0
     85a:	90 91 e1 02 	lds	r25, 0x02E1
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	89 f7       	brne	.-30     	; 0x844 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     862:	08 95       	ret

00000864 <q_init>:

int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     864:	10 92 d0 03 	sts	0x03D0, r1
     868:	10 92 cf 03 	sts	0x03CF, r1
     86c:	10 92 ce 03 	sts	0x03CE, r1
     870:	10 92 cd 03 	sts	0x03CD, r1
     874:	10 92 d2 03 	sts	0x03D2, r1
     878:	10 92 d1 03 	sts	0x03D1, r1
     87c:	10 92 8b 03 	sts	0x038B, r1
     880:	10 92 8a 03 	sts	0x038A, r1
}
     884:	08 95       	ret

00000886 <qi_insert>:

int qi_insert(char ch)
{
     886:	48 2f       	mov	r20, r24
	if((ri+1) % QI_SIZE == fi)
     888:	20 91 d1 03 	lds	r18, 0x03D1
     88c:	30 91 d2 03 	lds	r19, 0x03D2
     890:	2f 5f       	subi	r18, 0xFF	; 255
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	c9 01       	movw	r24, r18
     896:	60 e4       	ldi	r22, 0x40	; 64
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     89e:	9c 01       	movw	r18, r24
     8a0:	80 91 8a 03 	lds	r24, 0x038A
     8a4:	90 91 8b 03 	lds	r25, 0x038B
     8a8:	28 17       	cp	r18, r24
     8aa:	39 07       	cpc	r19, r25
     8ac:	59 f0       	breq	.+22     	; 0x8c4 <qi_insert+0x3e>
		return 0; //full
	ri = (ri + 1) % QI_SIZE;
     8ae:	30 93 d2 03 	sts	0x03D2, r19
     8b2:	20 93 d1 03 	sts	0x03D1, r18
	qi[ri] = ch;
     8b6:	2d 52       	subi	r18, 0x2D	; 45
     8b8:	3c 4f       	sbci	r19, 0xFC	; 252
     8ba:	f9 01       	movw	r30, r18
     8bc:	40 83       	st	Z, r20
	return 1;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri+1) % QI_SIZE == fi)
		return 0; //full
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     8c8:	08 95       	ret

000008ca <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     8ca:	80 91 8a 03 	lds	r24, 0x038A
     8ce:	90 91 8b 03 	lds	r25, 0x038B
     8d2:	20 91 d1 03 	lds	r18, 0x03D1
     8d6:	30 91 d2 03 	lds	r19, 0x03D2
     8da:	28 17       	cp	r18, r24
     8dc:	39 07       	cpc	r19, r25
     8de:	79 f0       	breq	.+30     	; 0x8fe <qi_delete+0x34>
		return 0;
	fi = (fi+1) % QI_SIZE;
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	60 e4       	ldi	r22, 0x40	; 64
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     8ea:	90 93 8b 03 	sts	0x038B, r25
     8ee:	80 93 8a 03 	sts	0x038A, r24

	return qi[fi];
     8f2:	8d 52       	subi	r24, 0x2D	; 45
     8f4:	9c 4f       	sbci	r25, 0xFC	; 252
     8f6:	fc 01       	movw	r30, r24
     8f8:	80 81       	ld	r24, Z
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi+1) % QI_SIZE;

	return qi[fi];
}
     902:	08 95       	ret

00000904 <qo_insert>:

int qo_insert(char ch)
{
     904:	48 2f       	mov	r20, r24
	if((ro+1) % QO_SIZE == fo)
     906:	20 91 cf 03 	lds	r18, 0x03CF
     90a:	30 91 d0 03 	lds	r19, 0x03D0
     90e:	2f 5f       	subi	r18, 0xFF	; 255
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	c9 01       	movw	r24, r18
     914:	60 e4       	ldi	r22, 0x40	; 64
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     91c:	9c 01       	movw	r18, r24
     91e:	80 91 cd 03 	lds	r24, 0x03CD
     922:	90 91 ce 03 	lds	r25, 0x03CE
     926:	28 17       	cp	r18, r24
     928:	39 07       	cpc	r19, r25
     92a:	59 f0       	breq	.+22     	; 0x942 <qo_insert+0x3e>
		return 0; //full
	ro = (ro + 1) % QO_SIZE;
     92c:	30 93 d0 03 	sts	0x03D0, r19
     930:	20 93 cf 03 	sts	0x03CF, r18
	qo[ro] = ch;
     934:	24 57       	subi	r18, 0x74	; 116
     936:	3c 4f       	sbci	r19, 0xFC	; 252
     938:	f9 01       	movw	r30, r18
     93a:	40 83       	st	Z, r20

	return 1;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro+1) % QO_SIZE == fo)
		return 0; //full
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;

	return 1;
}
     946:	08 95       	ret

00000948 <qo_delete>:

int qo_delete()
{
	if (ro == fo)
     948:	80 91 cd 03 	lds	r24, 0x03CD
     94c:	90 91 ce 03 	lds	r25, 0x03CE
     950:	20 91 cf 03 	lds	r18, 0x03CF
     954:	30 91 d0 03 	lds	r19, 0x03D0
     958:	28 17       	cp	r18, r24
     95a:	39 07       	cpc	r19, r25
     95c:	79 f0       	breq	.+30     	; 0x97c <qo_delete+0x34>
		return 0;
	fo = (fo+1) % QO_SIZE;
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	60 e4       	ldi	r22, 0x40	; 64
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     968:	90 93 ce 03 	sts	0x03CE, r25
     96c:	80 93 cd 03 	sts	0x03CD, r24

	return qo[fo];
     970:	84 57       	subi	r24, 0x74	; 116
     972:	9c 4f       	sbci	r25, 0xFC	; 252
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	08 95       	ret
}

int qo_delete()
{
	if (ro == fo)
		return 0;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo+1) % QO_SIZE;

	return qo[fo];
}
     980:	08 95       	ret

00000982 <task_init>:
#include "app.h"
#include "uart.h"

void task_init()
{
	Task_f = Task_r = 0;
     982:	10 92 e7 02 	sts	0x02E7, r1
     986:	10 92 e6 02 	sts	0x02E6, r1
     98a:	10 92 89 03 	sts	0x0389, r1
     98e:	10 92 88 03 	sts	0x0388, r1
}
     992:	08 95       	ret

00000994 <task_insert>:

int task_insert(struct task *tskp)
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	48 2f       	mov	r20, r24
     99a:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     99c:	80 91 e6 02 	lds	r24, 0x02E6
     9a0:	90 91 e7 02 	lds	r25, 0x02E7
     9a4:	c0 91 88 03 	lds	r28, 0x0388
     9a8:	d0 91 89 03 	lds	r29, 0x0389
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	20 e1       	ldi	r18, 0x10	; 16
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	b9 01       	movw	r22, r18
     9b4:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     9b8:	8c 17       	cp	r24, r28
     9ba:	9d 07       	cpc	r25, r29
     9bc:	31 f1       	breq	.+76     	; 0xa0a <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     9be:	80 91 e6 02 	lds	r24, 0x02E6
     9c2:	90 91 e7 02 	lds	r25, 0x02E7
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	b9 01       	movw	r22, r18
     9ca:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     9ce:	90 93 e7 02 	sts	0x02E7, r25
     9d2:	80 93 e6 02 	sts	0x02E6, r24
	Task_q[Task_r] = *tskp;
     9d6:	80 91 e6 02 	lds	r24, 0x02E6
     9da:	90 91 e7 02 	lds	r25, 0x02E7
     9de:	dc 01       	movw	r26, r24
     9e0:	aa 0f       	add	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	63 e0       	ldi	r22, 0x03	; 3
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	6a 95       	dec	r22
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <task_insert+0x52>
     9ee:	a8 0f       	add	r26, r24
     9f0:	b9 1f       	adc	r27, r25
     9f2:	a8 51       	subi	r26, 0x18	; 24
     9f4:	bd 4f       	sbci	r27, 0xFD	; 253
     9f6:	c4 2f       	mov	r28, r20
     9f8:	de 2f       	mov	r29, r30
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	09 90       	ld	r0, Y+
     9fe:	0d 92       	st	X+, r0
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	e1 f7       	brne	.-8      	; 0x9fc <task_insert+0x68>
	return(1);
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <task_delete>:

int task_delete(struct task *tskp)
{
     a14:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     a16:	40 91 e6 02 	lds	r20, 0x02E6
     a1a:	50 91 e7 02 	lds	r21, 0x02E7
     a1e:	80 91 88 03 	lds	r24, 0x0388
     a22:	90 91 89 03 	lds	r25, 0x0389
     a26:	48 17       	cp	r20, r24
     a28:	59 07       	cpc	r21, r25
     a2a:	31 f1       	breq	.+76     	; 0xa78 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     a2c:	80 91 88 03 	lds	r24, 0x0388
     a30:	90 91 89 03 	lds	r25, 0x0389
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	60 e1       	ldi	r22, 0x10	; 16
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     a3e:	90 93 89 03 	sts	0x0389, r25
     a42:	80 93 88 03 	sts	0x0388, r24
	*tskp = Task_q[Task_f];
     a46:	80 91 88 03 	lds	r24, 0x0388
     a4a:	90 91 89 03 	lds	r25, 0x0389
     a4e:	fc 01       	movw	r30, r24
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	a3 e0       	ldi	r26, 0x03	; 3
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	aa 95       	dec	r26
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <task_delete+0x42>
     a5e:	e8 0f       	add	r30, r24
     a60:	f9 1f       	adc	r31, r25
     a62:	d9 01       	movw	r26, r18
     a64:	e8 51       	subi	r30, 0x18	; 24
     a66:	fd 4f       	sbci	r31, 0xFD	; 253
     a68:	8a e0       	ldi	r24, 0x0A	; 10
     a6a:	01 90       	ld	r0, Z+
     a6c:	0d 92       	st	X+, r0
     a6e:	81 50       	subi	r24, 0x01	; 1
     a70:	e1 f7       	brne	.-8      	; 0xa6a <task_delete+0x56>
	return(1);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	08 95       	ret
}

int task_delete(struct task *tskp)
{
	if(Task_r == Task_f)
		return(0);
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     a7c:	08 95       	ret

00000a7e <task_cmd>:

void task_cmd(char *arg)
{
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	ca 54       	subi	r28, 0x4A	; 74
     a98:	d0 40       	sbci	r29, 0x00	; 0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(!uart_peek()) return;
     aa4:	0e 94 68 07 	call	0xed0	; 0xed0 <uart_peek>
     aa8:	00 97       	sbiw	r24, 0x00	; 0
     aaa:	09 f4       	brne	.+2      	; 0xaae <task_cmd+0x30>
     aac:	7c c0       	rjmp	.+248    	; 0xba6 <task_cmd+0x128>

	if(gets(buf) == NULL) {
     aae:	ce 01       	movw	r24, r28
     ab0:	0b 96       	adiw	r24, 0x0b	; 11
     ab2:	0e 94 81 09 	call	0x1302	; 0x1302 <gets>
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	29 f4       	brne	.+10     	; 0xac4 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     aba:	85 e6       	ldi	r24, 0x65	; 101
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	0e 94 c0 09 	call	0x1380	; 0x1380 <puts>
     ac2:	ff cf       	rjmp	.-2      	; 0xac2 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     ac4:	ce 01       	movw	r24, r28
     ac6:	0b 96       	adiw	r24, 0x0b	; 11
     ac8:	6a e7       	ldi	r22, 0x7A	; 122
     aca:	72 e0       	ldi	r23, 0x02	; 2
     acc:	0e 94 09 09 	call	0x1212	; 0x1212 <strtok>
     ad0:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	6a e7       	ldi	r22, 0x7A	; 122
     ad8:	72 e0       	ldi	r23, 0x02	; 2
     ada:	0e 94 09 09 	call	0x1212	; 0x1212 <strtok>
     ade:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	6a e7       	ldi	r22, 0x7A	; 122
     ae6:	72 e0       	ldi	r23, 0x02	; 2
     ae8:	0e 94 09 09 	call	0x1212	; 0x1212 <strtok>
     aec:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	6a e7       	ldi	r22, 0x7A	; 122
     af4:	72 e0       	ldi	r23, 0x02	; 2
     af6:	0e 94 09 09 	call	0x1212	; 0x1212 <strtok>
     afa:	6c 01       	movw	r12, r24

	if(cp0 == NULL) {
     afc:	01 15       	cp	r16, r1
     afe:	11 05       	cpc	r17, r1
     b00:	09 f4       	brne	.+2      	; 0xb04 <task_cmd+0x86>
     b02:	45 c0       	rjmp	.+138    	; 0xb8e <task_cmd+0x110>
		// printf("!!!-111\n");
		printf( "$ "); return;
	}

	if(!strcmp(cp0, "prime"))
     b04:	c8 01       	movw	r24, r16
     b06:	62 e8       	ldi	r22, 0x82	; 130
     b08:	72 e0       	ldi	r23, 0x02	; 2
     b0a:	0e 94 0e 09 	call	0x121c	; 0x121c <strcmp>
     b0e:	00 97       	sbiw	r24, 0x00	; 0
     b10:	21 f4       	brne	.+8      	; 0xb1a <task_cmd+0x9c>
		task_prime(cp1);
     b12:	c7 01       	movw	r24, r14
     b14:	0e 94 ba 00 	call	0x174	; 0x174 <task_prime>
     b18:	3a c0       	rjmp	.+116    	; 0xb8e <task_cmd+0x110>
	else if(!strcmp(cp0, "timer")) {
     b1a:	c8 01       	movw	r24, r16
     b1c:	68 e8       	ldi	r22, 0x88	; 136
     b1e:	72 e0       	ldi	r23, 0x02	; 2
     b20:	0e 94 0e 09 	call	0x121c	; 0x121c <strcmp>
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	79 f5       	brne	.+94     	; 0xb86 <task_cmd+0x108>
		if(cp1 == NULL) {
     b28:	e1 14       	cp	r14, r1
     b2a:	f1 04       	cpc	r15, r1
     b2c:	19 f4       	brne	.+6      	; 0xb34 <task_cmd+0xb6>
			printf("!!!-222\n");
     b2e:	8e e8       	ldi	r24, 0x8E	; 142
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	2b c0       	rjmp	.+86     	; 0xb8a <task_cmd+0x10c>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     b34:	c7 01       	movw	r24, r14
     b36:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <atoi>
     b3a:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     b3c:	c5 01       	movw	r24, r10
     b3e:	62 e8       	ldi	r22, 0x82	; 130
     b40:	72 e0       	ldi	r23, 0x02	; 2
     b42:	0e 94 0e 09 	call	0x121c	; 0x121c <strcmp>
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	d9 f4       	brne	.+54     	; 0xb80 <task_cmd+0x102>
			task.fun = task_prime;
     b4a:	8a eb       	ldi	r24, 0xBA	; 186
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	9a 83       	std	Y+2, r25	; 0x02
     b50:	89 83       	std	Y+1, r24	; 0x01
			if(cp3) strcpy(task.arg, cp3);
     b52:	ce 01       	movw	r24, r28
     b54:	03 96       	adiw	r24, 0x03	; 3
     b56:	c1 14       	cp	r12, r1
     b58:	d1 04       	cpc	r13, r1
     b5a:	11 f0       	breq	.+4      	; 0xb60 <task_cmd+0xe2>
     b5c:	b6 01       	movw	r22, r12
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <task_cmd+0xe6>
			else strcpy(task.arg, "");
     b60:	66 e9       	ldi	r22, 0x96	; 150
     b62:	72 e0       	ldi	r23, 0x02	; 2
     b64:	0e 94 17 09 	call	0x122e	; 0x122e <strcpy>
			cli();
     b68:	f8 94       	cli
		if(cp1 == NULL) {
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     b6a:	c8 01       	movw	r24, r16
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3) strcpy(task.arg, cp3);
			else strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 6f 06 	call	0xcde	; 0xcde <insert_timer>
			sei();
     b7c:	78 94       	sei
     b7e:	07 c0       	rjmp	.+14     	; 0xb8e <task_cmd+0x110>
		}
		else printf("!!!-333\n");
     b80:	87 e9       	ldi	r24, 0x97	; 151
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <task_cmd+0x10c>
	}
	else printf("Unknown command...\n");
     b86:	8f e9       	ldi	r24, 0x9F	; 159
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	0e 94 c0 09 	call	0x1380	; 0x1380 <puts>

	printf("$ ");
     b8e:	0f 92       	push	r0
     b90:	0f 92       	push	r0
     b92:	8f e7       	ldi	r24, 0x7F	; 127
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	ed b7       	in	r30, 0x3d	; 61
     b98:	fe b7       	in	r31, 0x3e	; 62
     b9a:	92 83       	std	Z+2, r25	; 0x02
     b9c:	81 83       	std	Z+1, r24	; 0x01
     b9e:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
}
     ba6:	c6 5b       	subi	r28, 0xB6	; 182
     ba8:	df 4f       	sbci	r29, 0xFF	; 255
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	08 95       	ret

00000bca <timer_init>:
#include "interrupt.h"
#include "queue.h"
#include "linkedlist.h"

void timer_init() {
	TCNT2 = 0;
     bca:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     bce:	e6 eb       	ldi	r30, 0xB6	; 182
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 62       	ori	r24, 0x20	; 32
     bd6:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     bd8:	e0 e7       	ldi	r30, 0x70	; 112
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); 
     be2:	e1 eb       	ldi	r30, 0xB1	; 177
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	81 60       	ori	r24, 0x01	; 1
     bea:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     bec:	80 81       	ld	r24, Z
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	80 83       	st	Z, r24
}
     bf2:	08 95       	ret

00000bf4 <timer_expire>:


void timer_expire(void)
{
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     bfa:	8c 85       	ldd	r24, Y+12	; 0x0c
     bfc:	9d 85       	ldd	r25, Y+13	; 0x0d
     bfe:	90 93 e3 02 	sts	0x02E3, r25
     c02:	80 93 e2 02 	sts	0x02E2, r24
		
		task_insert(&tp->task);
     c06:	ce 01       	movw	r24, r28
     c08:	02 96       	adiw	r24, 0x02	; 2
     c0a:	0e 94 ca 04 	call	0x994	; 0x994 <task_insert>
		
		free(tp);
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 52 08 	call	0x10a4	; 0x10a4 <free>

void timer_expire(void)
{
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     c14:	c0 91 e2 02 	lds	r28, 0x02E2
     c18:	d0 91 e3 02 	lds	r29, 0x02E3
     c1c:	20 97       	sbiw	r28, 0x00	; 0
     c1e:	21 f0       	breq	.+8      	; 0xc28 <timer_expire+0x34>
     c20:	88 81       	ld	r24, Y
     c22:	99 81       	ldd	r25, Y+1	; 0x01
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	49 f3       	breq	.-46     	; 0xbfa <timer_expire+0x6>
		
		task_insert(&tp->task);
		
		free(tp);
	}
} 
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <tour_timer>:
		tp->link = cp;
	}
}

void tour_timer()
{
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     c3a:	8a e0       	ldi	r24, 0x0A	; 10
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 b9 09 	call	0x1372	; 0x1372 <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     c42:	c0 91 e2 02 	lds	r28, 0x02E2
     c46:	d0 91 e3 02 	lds	r29, 0x02E3
}

void tour_timer()
{
	struct timer *cp;
	int total = 0;
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     c4e:	82 eb       	ldi	r24, 0xB2	; 178
     c50:	e8 2e       	mov	r14, r24
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     c56:	20 c0       	rjmp	.+64     	; 0xc98 <tour_timer+0x6a>
		total += cp->time;
     c58:	88 81       	ld	r24, Y
     c5a:	99 81       	ldd	r25, Y+1	; 0x01
     c5c:	08 0f       	add	r16, r24
     c5e:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     c60:	00 d0       	rcall	.+0      	; 0xc62 <tour_timer+0x34>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <tour_timer+0x36>
     c64:	ed b7       	in	r30, 0x3d	; 61
     c66:	fe b7       	in	r31, 0x3e	; 62
     c68:	31 96       	adiw	r30, 0x01	; 1
     c6a:	ad b7       	in	r26, 0x3d	; 61
     c6c:	be b7       	in	r27, 0x3e	; 62
     c6e:	12 96       	adiw	r26, 0x02	; 2
     c70:	fc 92       	st	X, r15
     c72:	ee 92       	st	-X, r14
     c74:	11 97       	sbiw	r26, 0x01	; 1
     c76:	93 83       	std	Z+3, r25	; 0x03
     c78:	82 83       	std	Z+2, r24	; 0x02
     c7a:	15 83       	std	Z+5, r17	; 0x05
     c7c:	04 83       	std	Z+4, r16	; 0x04
     c7e:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     c82:	0c 84       	ldd	r0, Y+12	; 0x0c
     c84:	dd 85       	ldd	r29, Y+13	; 0x0d
     c86:	c0 2d       	mov	r28, r0
     c88:	8d b7       	in	r24, 0x3d	; 61
     c8a:	9e b7       	in	r25, 0x3e	; 62
     c8c:	06 96       	adiw	r24, 0x06	; 6
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	9e bf       	out	0x3e, r25	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	8d bf       	out	0x3d, r24	; 61
     c98:	20 97       	sbiw	r28, 0x00	; 0
     c9a:	f1 f6       	brne	.-68     	; 0xc58 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 b9 09 	call	0x1372	; 0x1372 <putchar>
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	08 95       	ret

00000cb2 <free_timer>:

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     cb4:	fc 01       	movw	r30, r24
     cb6:	24 85       	ldd	r18, Z+12	; 0x0c
     cb8:	35 85       	ldd	r19, Z+13	; 0x0d
     cba:	30 93 e3 02 	sts	0x02E3, r19
     cbe:	20 93 e2 02 	sts	0x02E2, r18
		free(cp);
     cc2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <free>
}

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     cc6:	80 91 e2 02 	lds	r24, 0x02E2
     cca:	90 91 e3 02 	lds	r25, 0x02E3
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	89 f7       	brne	.-30     	; 0xcb4 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     cd2:	08 95       	ret

00000cd4 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;
	tp = (struct timer *)malloc(sizeof(*tp));
     cd4:	8e e0       	ldi	r24, 0x0E	; 14
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 bc 07 	call	0xf78	; 0xf78 <malloc>
	return(tp);
}
     cdc:	08 95       	ret

00000cde <insert_timer>:
#include "timerlinkedlist.h"
#include <stdio.h>

struct timer *Thead = NULL;
void insert_timer(struct task *tskp, int ms)
{
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	f8 2e       	mov	r15, r24
     cec:	e9 2e       	mov	r14, r25
     cee:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     cf0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <get_timer>
     cf4:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     cf6:	dc 01       	movw	r26, r24
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	ef 2d       	mov	r30, r15
     cfc:	fe 2d       	mov	r31, r14
     cfe:	8a e0       	ldi	r24, 0x0A	; 10
     d00:	01 90       	ld	r0, Z+
     d02:	0d 92       	st	X+, r0
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	e1 f7       	brne	.-8      	; 0xd00 <insert_timer+0x22>
	tp->time = ms;
     d08:	19 83       	std	Y+1, r17	; 0x01
     d0a:	08 83       	st	Y, r16

	if(Thead == NULL) {
     d0c:	e0 91 e2 02 	lds	r30, 0x02E2
     d10:	f0 91 e3 02 	lds	r31, 0x02E3
     d14:	30 97       	sbiw	r30, 0x00	; 0
     d16:	29 f4       	brne	.+10     	; 0xd22 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     d18:	d0 93 e3 02 	sts	0x02E3, r29
     d1c:	c0 93 e2 02 	sts	0x02E2, r28
     d20:	2f c0       	rjmp	.+94     	; 0xd80 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     d2c:	fd 01       	movw	r30, r26
		total += cp->time;
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	28 0f       	add	r18, r24
     d34:	39 1f       	adc	r19, r25
		if(total >= ms) 
     d36:	20 17       	cp	r18, r16
     d38:	31 07       	cpc	r19, r17
     d3a:	34 f4       	brge	.+12     	; 0xd48 <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     d3c:	a4 85       	ldd	r26, Z+12	; 0x0c
     d3e:	b5 85       	ldd	r27, Z+13	; 0x0d
     d40:	af 01       	movw	r20, r30
     d42:	10 97       	sbiw	r26, 0x00	; 0
     d44:	99 f7       	brne	.-26     	; 0xd2c <insert_timer+0x4e>
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms) 
     d48:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}
	if(pp == NULL) {
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	79 f4       	brne	.+30     	; 0xd6e <insert_timer+0x90>
		cp->time -= tp->time;
     d50:	8d 91       	ld	r24, X+
     d52:	9c 91       	ld	r25, X
     d54:	11 97       	sbiw	r26, 0x01	; 1
     d56:	80 1b       	sub	r24, r16
     d58:	91 0b       	sbc	r25, r17
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	9c 93       	st	X, r25
     d5e:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     d60:	bd 87       	std	Y+13, r27	; 0x0d
     d62:	ac 87       	std	Y+12, r26	; 0x0c
     d64:	d0 93 e3 02 	sts	0x02E3, r29
     d68:	c0 93 e2 02 	sts	0x02E2, r28
     d6c:	24 c0       	rjmp	.+72     	; 0xdb6 <insert_timer+0xd8>
	}
	else if(cp == NULL) {
     d6e:	10 97       	sbiw	r26, 0x00	; 0
     d70:	51 f4       	brne	.+20     	; 0xd86 <insert_timer+0xa8>
		tp->time -= total;
     d72:	02 1b       	sub	r16, r18
     d74:	13 0b       	sbc	r17, r19
     d76:	19 83       	std	Y+1, r17	; 0x01
     d78:	08 83       	st	Y, r16
		pp->link = tp;
     d7a:	fa 01       	movw	r30, r20
     d7c:	d5 87       	std	Z+13, r29	; 0x0d
     d7e:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     d80:	1d 86       	std	Y+13, r1	; 0x0d
     d82:	1c 86       	std	Y+12, r1	; 0x0c
     d84:	18 c0       	rjmp	.+48     	; 0xdb6 <insert_timer+0xd8>
	}	
	else {
		total -= cp->time;
     d86:	8d 91       	ld	r24, X+
     d88:	9c 91       	ld	r25, X
     d8a:	11 97       	sbiw	r26, 0x01	; 1
     d8c:	b9 01       	movw	r22, r18
     d8e:	68 1b       	sub	r22, r24
     d90:	79 0b       	sbc	r23, r25
		tp->time -= total;
     d92:	98 01       	movw	r18, r16
     d94:	26 1b       	sub	r18, r22
     d96:	37 0b       	sbc	r19, r23
     d98:	39 83       	std	Y+1, r19	; 0x01
     d9a:	28 83       	st	Y, r18
		cp->time -= tp->time;
     d9c:	8d 91       	ld	r24, X+
     d9e:	9c 91       	ld	r25, X
     da0:	11 97       	sbiw	r26, 0x01	; 1
     da2:	82 1b       	sub	r24, r18
     da4:	93 0b       	sbc	r25, r19
     da6:	11 96       	adiw	r26, 0x01	; 1
     da8:	9c 93       	st	X, r25
     daa:	8e 93       	st	-X, r24
		pp->link = tp;
     dac:	fa 01       	movw	r30, r20
     dae:	d5 87       	std	Z+13, r29	; 0x0d
     db0:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     db2:	bd 87       	std	Y+13, r27	; 0x0d
     db4:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	08 95       	ret

00000dc4 <uart_getchar>:
{
	char ch;

	do
	{
		cli();
     dc4:	f8 94       	cli
		ch = qi_delete();
     dc6:	0e 94 65 04 	call	0x8ca	; 0x8ca <qi_delete>
		sei();
     dca:	78 94       	sei
	}while(ch == 0);
     dcc:	88 23       	and	r24, r24
     dce:	d1 f3       	breq	.-12     	; 0xdc4 <uart_getchar>

	if(ch == EOT)
     dd0:	84 30       	cpi	r24, 0x04	; 4
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <uart_getchar+0x14>
		return -1;
	else
		return ch;
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	08 95       	ret
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if(ch == EOT)
		return -1;
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	9f ef       	ldi	r25, 0xFF	; 255
		return ch;

	if(ch == BS)
		ch = ch-1;
		return ch;
}
     ddc:	08 95       	ret

00000dde <uart_putchar>:
	sbi(UCSR0B, RXEN0); // RX enable
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     dde:	cf 93       	push	r28
     de0:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     de2:	8a 30       	cpi	r24, 0x0A	; 10
     de4:	19 f4       	brne	.+6      	; 0xdec <uart_putchar+0xe>
		uart_putchar('\r', stream);
     de6:	8d e0       	ldi	r24, 0x0D	; 13
     de8:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_putchar>
	
	cli();
     dec:	f8 94       	cli

	if(!uart_busy)
     dee:	80 91 cc 03 	lds	r24, 0x03CC
     df2:	88 23       	and	r24, r24
     df4:	59 f4       	brne	.+22     	; 0xe0c <uart_putchar+0x2e>
	{
		UDR0 = ch;
     df6:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 cc 03 	sts	0x03CC, r24
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <uart_putchar+0x38>
	}
	else
	{
		while(qo_insert(ch) == 0)
		{
			sei();
     e02:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e04:	86 ef       	ldi	r24, 0xF6	; 246
     e06:	8a 95       	dec	r24
     e08:	f1 f7       	brne	.-4      	; 0xe06 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     e0a:	f8 94       	cli
		UDR0 = ch;
		uart_busy = 1;
	}
	else
	{
		while(qo_insert(ch) == 0)
     e0c:	8c 2f       	mov	r24, r28
     e0e:	0e 94 82 04 	call	0x904	; 0x904 <qo_insert>
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	b1 f3       	breq	.-20     	; 0xe02 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     e16:	78 94       	sei

	return 1;
}
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init()
{
	stdout = &Mystdout;
     e20:	8b ec       	ldi	r24, 0xCB	; 203
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	90 93 1a 04 	sts	0x041A, r25
     e28:	80 93 19 04 	sts	0x0419, r24
	stdin = &Mystdin;
     e2c:	8d eb       	ldi	r24, 0xBD	; 189
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	90 93 18 04 	sts	0x0418, r25
     e34:	80 93 17 04 	sts	0x0417, r24
	uart_busy = 0; // false
     e38:	10 92 cc 03 	sts	0x03CC, r1
	q_init();
     e3c:	0e 94 32 04 	call	0x864	; 0x864 <q_init>
	UBRR0H = 0x00;
     e40:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07; // 115.2KBPS
     e44:	87 e0       	ldi	r24, 0x07	; 7
     e46:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     e4a:	e0 ec       	ldi	r30, 0xC0	; 192
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	82 60       	ori	r24, 0x02	; 2
     e52:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     e54:	e1 ec       	ldi	r30, 0xC1	; 193
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     e5e:	80 81       	ld	r24, Z
     e60:	80 64       	ori	r24, 0x40	; 64
     e62:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0); // RX enable
     e64:	80 81       	ld	r24, Z
     e66:	80 61       	ori	r24, 0x10	; 16
     e68:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     e6a:	80 81       	ld	r24, Z
     e6c:	80 68       	ori	r24, 0x80	; 128
     e6e:	80 83       	st	Z, r24
}
     e70:	08 95       	ret

00000e72 <uart_echo>:
		ch = ch-1;
		return ch;
}

void uart_echo(char ch)
{
     e72:	cf 93       	push	r28
     e74:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     e76:	8a 30       	cpi	r24, 0x0A	; 10
     e78:	19 f4       	brne	.+6      	; 0xe80 <uart_echo+0xe>
		uart_echo('\r');
     e7a:	8d e0       	ldi	r24, 0x0D	; 13
     e7c:	0e 94 39 07 	call	0xe72	; 0xe72 <uart_echo>
	if(!uart_busy)
     e80:	80 91 cc 03 	lds	r24, 0x03CC
     e84:	88 23       	and	r24, r24
     e86:	31 f4       	brne	.+12     	; 0xe94 <uart_echo+0x22>
	{
		UDR0 = ch;
     e88:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 cc 03 	sts	0x03CC, r24
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     e94:	8c 2f       	mov	r24, r28
     e96:	0e 94 82 04 	call	0x904	; 0x904 <qo_insert>
}
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <qi_peek>:

int qi_peek()
{
	if(fi == ri)
     e9e:	80 91 8a 03 	lds	r24, 0x038A
     ea2:	90 91 8b 03 	lds	r25, 0x038B
     ea6:	20 91 d1 03 	lds	r18, 0x03D1
     eaa:	30 91 d2 03 	lds	r19, 0x03D2
     eae:	82 17       	cp	r24, r18
     eb0:	93 07       	cpc	r25, r19
     eb2:	59 f0       	breq	.+22     	; 0xeca <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	60 e4       	ldi	r22, 0x40	; 64
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divmodhi4>
     ebe:	8d 52       	subi	r24, 0x2D	; 45
     ec0:	9c 4f       	sbci	r25, 0xFC	; 252
     ec2:	fc 01       	movw	r30, r24
     ec4:	80 81       	ld	r24, Z
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	08 95       	ret
}

int qi_peek()
{
	if(fi == ri)
		return 0;
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     ece:	08 95       	ret

00000ed0 <uart_peek>:

int uart_peek()
{
	return(qi_peek());
     ed0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <qi_peek>
}
     ed4:	08 95       	ret

00000ed6 <main>:
#include "uart.h"



int main()
{
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	2a 97       	sbiw	r28, 0x0a	; 10
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;

	uart_init();
     eea:	0e 94 10 07 	call	0xe20	; 0xe20 <uart_init>
	task_init();
     eee:	0e 94 c1 04 	call	0x982	; 0x982 <task_init>
	timer_init();
     ef2:	0e 94 e5 05 	call	0xbca	; 0xbca <timer_init>

	printf("$ ");
     ef6:	0f 92       	push	r0
     ef8:	0f 92       	push	r0
     efa:	82 e6       	ldi	r24, 0x62	; 98
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	ed b7       	in	r30, 0x3d	; 61
     f00:	fe b7       	in	r31, 0x3e	; 62
     f02:	92 83       	std	Z+2, r25	; 0x02
     f04:	81 83       	std	Z+1, r24	; 0x01
     f06:	0e 94 a7 09 	call	0x134e	; 0x134e <printf>
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0

	while(1) {
		cli();
     f0e:	f8 94       	cli
			tag = task_delete(&task);
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	0e 94 0a 05 	call	0xa14	; 0xa14 <task_delete>
			sei();
     f18:	78 94       	sei
			if(tag)
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	c1 f3       	breq	.-16     	; 0xf0e <main+0x38>
				(*(task.fun))(task.arg);
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	ce 01       	movw	r24, r28
     f24:	03 96       	adiw	r24, 0x03	; 3
     f26:	19 95       	eicall
     f28:	f2 cf       	rjmp	.-28     	; 0xf0e <main+0x38>

00000f2a <__divmodhi4>:
     f2a:	97 fb       	bst	r25, 7
     f2c:	09 2e       	mov	r0, r25
     f2e:	07 26       	eor	r0, r23
     f30:	0a d0       	rcall	.+20     	; 0xf46 <__divmodhi4_neg1>
     f32:	77 fd       	sbrc	r23, 7
     f34:	04 d0       	rcall	.+8      	; 0xf3e <__divmodhi4_neg2>
     f36:	0c d0       	rcall	.+24     	; 0xf50 <__udivmodhi4>
     f38:	06 d0       	rcall	.+12     	; 0xf46 <__divmodhi4_neg1>
     f3a:	00 20       	and	r0, r0
     f3c:	1a f4       	brpl	.+6      	; 0xf44 <__divmodhi4_exit>

00000f3e <__divmodhi4_neg2>:
     f3e:	70 95       	com	r23
     f40:	61 95       	neg	r22
     f42:	7f 4f       	sbci	r23, 0xFF	; 255

00000f44 <__divmodhi4_exit>:
     f44:	08 95       	ret

00000f46 <__divmodhi4_neg1>:
     f46:	f6 f7       	brtc	.-4      	; 0xf44 <__divmodhi4_exit>
     f48:	90 95       	com	r25
     f4a:	81 95       	neg	r24
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <__udivmodhi4>:
     f50:	aa 1b       	sub	r26, r26
     f52:	bb 1b       	sub	r27, r27
     f54:	51 e1       	ldi	r21, 0x11	; 17
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <__udivmodhi4_ep>

00000f58 <__udivmodhi4_loop>:
     f58:	aa 1f       	adc	r26, r26
     f5a:	bb 1f       	adc	r27, r27
     f5c:	a6 17       	cp	r26, r22
     f5e:	b7 07       	cpc	r27, r23
     f60:	10 f0       	brcs	.+4      	; 0xf66 <__udivmodhi4_ep>
     f62:	a6 1b       	sub	r26, r22
     f64:	b7 0b       	sbc	r27, r23

00000f66 <__udivmodhi4_ep>:
     f66:	88 1f       	adc	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	5a 95       	dec	r21
     f6c:	a9 f7       	brne	.-22     	; 0xf58 <__udivmodhi4_loop>
     f6e:	80 95       	com	r24
     f70:	90 95       	com	r25
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	08 95       	ret

00000f78 <malloc>:
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ac 01       	movw	r20, r24
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	91 05       	cpc	r25, r1
     f82:	10 f4       	brcc	.+4      	; 0xf88 <malloc+0x10>
     f84:	42 e0       	ldi	r20, 0x02	; 2
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	e0 91 15 04 	lds	r30, 0x0415
     f8c:	f0 91 16 04 	lds	r31, 0x0416
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	24 c0       	rjmp	.+72     	; 0xfe2 <malloc+0x6a>
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	84 17       	cp	r24, r20
     fa0:	95 07       	cpc	r25, r21
     fa2:	d0 f0       	brcs	.+52     	; 0xfd8 <malloc+0x60>
     fa4:	84 17       	cp	r24, r20
     fa6:	95 07       	cpc	r25, r21
     fa8:	71 f4       	brne	.+28     	; 0xfc6 <malloc+0x4e>
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	10 97       	sbiw	r26, 0x00	; 0
     fb0:	29 f0       	breq	.+10     	; 0xfbc <malloc+0x44>
     fb2:	13 96       	adiw	r26, 0x03	; 3
     fb4:	9c 93       	st	X, r25
     fb6:	8e 93       	st	-X, r24
     fb8:	12 97       	sbiw	r26, 0x02	; 2
     fba:	2c c0       	rjmp	.+88     	; 0x1014 <malloc+0x9c>
     fbc:	90 93 16 04 	sts	0x0416, r25
     fc0:	80 93 15 04 	sts	0x0415, r24
     fc4:	27 c0       	rjmp	.+78     	; 0x1014 <malloc+0x9c>
     fc6:	21 15       	cp	r18, r1
     fc8:	31 05       	cpc	r19, r1
     fca:	19 f0       	breq	.+6      	; 0xfd2 <malloc+0x5a>
     fcc:	82 17       	cp	r24, r18
     fce:	93 07       	cpc	r25, r19
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <malloc+0x60>
     fd2:	9c 01       	movw	r18, r24
     fd4:	bd 01       	movw	r22, r26
     fd6:	ef 01       	movw	r28, r30
     fd8:	92 81       	ldd	r25, Z+2	; 0x02
     fda:	83 81       	ldd	r24, Z+3	; 0x03
     fdc:	df 01       	movw	r26, r30
     fde:	e9 2f       	mov	r30, r25
     fe0:	f8 2f       	mov	r31, r24
     fe2:	30 97       	sbiw	r30, 0x00	; 0
     fe4:	d1 f6       	brne	.-76     	; 0xf9a <malloc+0x22>
     fe6:	21 15       	cp	r18, r1
     fe8:	31 05       	cpc	r19, r1
     fea:	f9 f0       	breq	.+62     	; 0x102a <malloc+0xb2>
     fec:	c9 01       	movw	r24, r18
     fee:	84 1b       	sub	r24, r20
     ff0:	95 0b       	sbc	r25, r21
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	91 05       	cpc	r25, r1
     ff6:	80 f4       	brcc	.+32     	; 0x1018 <malloc+0xa0>
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	61 15       	cp	r22, r1
     ffe:	71 05       	cpc	r23, r1
    1000:	21 f0       	breq	.+8      	; 0x100a <malloc+0x92>
    1002:	fb 01       	movw	r30, r22
    1004:	93 83       	std	Z+3, r25	; 0x03
    1006:	82 83       	std	Z+2, r24	; 0x02
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <malloc+0x9a>
    100a:	90 93 16 04 	sts	0x0416, r25
    100e:	80 93 15 04 	sts	0x0415, r24
    1012:	fe 01       	movw	r30, r28
    1014:	32 96       	adiw	r30, 0x02	; 2
    1016:	42 c0       	rjmp	.+132    	; 0x109c <malloc+0x124>
    1018:	fe 01       	movw	r30, r28
    101a:	e8 0f       	add	r30, r24
    101c:	f9 1f       	adc	r31, r25
    101e:	41 93       	st	Z+, r20
    1020:	51 93       	st	Z+, r21
    1022:	02 97       	sbiw	r24, 0x02	; 2
    1024:	99 83       	std	Y+1, r25	; 0x01
    1026:	88 83       	st	Y, r24
    1028:	39 c0       	rjmp	.+114    	; 0x109c <malloc+0x124>
    102a:	80 91 13 04 	lds	r24, 0x0413
    102e:	90 91 14 04 	lds	r25, 0x0414
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	41 f4       	brne	.+16     	; 0x1046 <malloc+0xce>
    1036:	80 91 db 02 	lds	r24, 0x02DB
    103a:	90 91 dc 02 	lds	r25, 0x02DC
    103e:	90 93 14 04 	sts	0x0414, r25
    1042:	80 93 13 04 	sts	0x0413, r24
    1046:	20 91 d9 02 	lds	r18, 0x02D9
    104a:	30 91 da 02 	lds	r19, 0x02DA
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	41 f4       	brne	.+16     	; 0x1064 <malloc+0xec>
    1054:	2d b7       	in	r18, 0x3d	; 61
    1056:	3e b7       	in	r19, 0x3e	; 62
    1058:	80 91 dd 02 	lds	r24, 0x02DD
    105c:	90 91 de 02 	lds	r25, 0x02DE
    1060:	28 1b       	sub	r18, r24
    1062:	39 0b       	sbc	r19, r25
    1064:	e0 91 13 04 	lds	r30, 0x0413
    1068:	f0 91 14 04 	lds	r31, 0x0414
    106c:	e2 17       	cp	r30, r18
    106e:	f3 07       	cpc	r31, r19
    1070:	98 f4       	brcc	.+38     	; 0x1098 <malloc+0x120>
    1072:	2e 1b       	sub	r18, r30
    1074:	3f 0b       	sbc	r19, r31
    1076:	24 17       	cp	r18, r20
    1078:	35 07       	cpc	r19, r21
    107a:	70 f0       	brcs	.+28     	; 0x1098 <malloc+0x120>
    107c:	ca 01       	movw	r24, r20
    107e:	02 96       	adiw	r24, 0x02	; 2
    1080:	28 17       	cp	r18, r24
    1082:	39 07       	cpc	r19, r25
    1084:	48 f0       	brcs	.+18     	; 0x1098 <malloc+0x120>
    1086:	8e 0f       	add	r24, r30
    1088:	9f 1f       	adc	r25, r31
    108a:	90 93 14 04 	sts	0x0414, r25
    108e:	80 93 13 04 	sts	0x0413, r24
    1092:	41 93       	st	Z+, r20
    1094:	51 93       	st	Z+, r21
    1096:	02 c0       	rjmp	.+4      	; 0x109c <malloc+0x124>
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	cf 01       	movw	r24, r30
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <free>:
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	9c 01       	movw	r18, r24
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <free+0x10>
    10b2:	8c c0       	rjmp	.+280    	; 0x11cc <free+0x128>
    10b4:	dc 01       	movw	r26, r24
    10b6:	12 97       	sbiw	r26, 0x02	; 2
    10b8:	13 96       	adiw	r26, 0x03	; 3
    10ba:	1c 92       	st	X, r1
    10bc:	1e 92       	st	-X, r1
    10be:	12 97       	sbiw	r26, 0x02	; 2
    10c0:	60 91 15 04 	lds	r22, 0x0415
    10c4:	70 91 16 04 	lds	r23, 0x0416
    10c8:	61 15       	cp	r22, r1
    10ca:	71 05       	cpc	r23, r1
    10cc:	89 f4       	brne	.+34     	; 0x10f0 <free+0x4c>
    10ce:	8d 91       	ld	r24, X+
    10d0:	9c 91       	ld	r25, X
    10d2:	11 97       	sbiw	r26, 0x01	; 1
    10d4:	82 0f       	add	r24, r18
    10d6:	93 1f       	adc	r25, r19
    10d8:	20 91 13 04 	lds	r18, 0x0413
    10dc:	30 91 14 04 	lds	r19, 0x0414
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	69 f5       	brne	.+90     	; 0x1140 <free+0x9c>
    10e6:	b0 93 14 04 	sts	0x0414, r27
    10ea:	a0 93 13 04 	sts	0x0413, r26
    10ee:	6e c0       	rjmp	.+220    	; 0x11cc <free+0x128>
    10f0:	fb 01       	movw	r30, r22
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <free+0x56>
    10f8:	fc 01       	movw	r30, r24
    10fa:	ea 17       	cp	r30, r26
    10fc:	fb 07       	cpc	r31, r27
    10fe:	30 f4       	brcc	.+12     	; 0x110c <free+0x68>
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	af 01       	movw	r20, r30
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	b9 f7       	brne	.-18     	; 0x10f8 <free+0x54>
    110a:	1f c0       	rjmp	.+62     	; 0x114a <free+0xa6>
    110c:	e9 01       	movw	r28, r18
    110e:	22 97       	sbiw	r28, 0x02	; 2
    1110:	fb 83       	std	Y+3, r31	; 0x03
    1112:	ea 83       	std	Y+2, r30	; 0x02
    1114:	08 81       	ld	r16, Y
    1116:	19 81       	ldd	r17, Y+1	; 0x01
    1118:	c9 01       	movw	r24, r18
    111a:	80 0f       	add	r24, r16
    111c:	91 1f       	adc	r25, r17
    111e:	8e 17       	cp	r24, r30
    1120:	9f 07       	cpc	r25, r31
    1122:	59 f4       	brne	.+22     	; 0x113a <free+0x96>
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	80 0f       	add	r24, r16
    112a:	91 1f       	adc	r25, r17
    112c:	02 96       	adiw	r24, 0x02	; 2
    112e:	99 83       	std	Y+1, r25	; 0x01
    1130:	88 83       	st	Y, r24
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	9b 83       	std	Y+3, r25	; 0x03
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	41 15       	cp	r20, r1
    113c:	51 05       	cpc	r21, r1
    113e:	29 f4       	brne	.+10     	; 0x114a <free+0xa6>
    1140:	b0 93 16 04 	sts	0x0416, r27
    1144:	a0 93 15 04 	sts	0x0415, r26
    1148:	41 c0       	rjmp	.+130    	; 0x11cc <free+0x128>
    114a:	fa 01       	movw	r30, r20
    114c:	b3 83       	std	Z+3, r27	; 0x03
    114e:	a2 83       	std	Z+2, r26	; 0x02
    1150:	c1 91       	ld	r28, Z+
    1152:	d1 91       	ld	r29, Z+
    1154:	ec 0f       	add	r30, r28
    1156:	fd 1f       	adc	r31, r29
    1158:	ae 17       	cp	r26, r30
    115a:	bf 07       	cpc	r27, r31
    115c:	81 f4       	brne	.+32     	; 0x117e <free+0xda>
    115e:	f9 01       	movw	r30, r18
    1160:	92 91       	ld	r25, -Z
    1162:	82 91       	ld	r24, -Z
    1164:	8c 0f       	add	r24, r28
    1166:	9d 1f       	adc	r25, r29
    1168:	02 96       	adiw	r24, 0x02	; 2
    116a:	da 01       	movw	r26, r20
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	9c 93       	st	X, r25
    1170:	8e 93       	st	-X, r24
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	13 96       	adiw	r26, 0x03	; 3
    1178:	9c 93       	st	X, r25
    117a:	8e 93       	st	-X, r24
    117c:	12 97       	sbiw	r26, 0x02	; 2
    117e:	e0 e0       	ldi	r30, 0x00	; 0
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <free+0xe4>
    1184:	fb 01       	movw	r30, r22
    1186:	bc 01       	movw	r22, r24
    1188:	db 01       	movw	r26, r22
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	8d 91       	ld	r24, X+
    118e:	9c 91       	ld	r25, X
    1190:	13 97       	sbiw	r26, 0x03	; 3
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	b9 f7       	brne	.-18     	; 0x1184 <free+0xe0>
    1196:	cb 01       	movw	r24, r22
    1198:	02 96       	adiw	r24, 0x02	; 2
    119a:	2d 91       	ld	r18, X+
    119c:	3c 91       	ld	r19, X
    119e:	11 97       	sbiw	r26, 0x01	; 1
    11a0:	82 0f       	add	r24, r18
    11a2:	93 1f       	adc	r25, r19
    11a4:	20 91 13 04 	lds	r18, 0x0413
    11a8:	30 91 14 04 	lds	r19, 0x0414
    11ac:	28 17       	cp	r18, r24
    11ae:	39 07       	cpc	r19, r25
    11b0:	69 f4       	brne	.+26     	; 0x11cc <free+0x128>
    11b2:	30 97       	sbiw	r30, 0x00	; 0
    11b4:	29 f4       	brne	.+10     	; 0x11c0 <free+0x11c>
    11b6:	10 92 16 04 	sts	0x0416, r1
    11ba:	10 92 15 04 	sts	0x0415, r1
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <free+0x120>
    11c0:	13 82       	std	Z+3, r1	; 0x03
    11c2:	12 82       	std	Z+2, r1	; 0x02
    11c4:	70 93 14 04 	sts	0x0414, r23
    11c8:	60 93 13 04 	sts	0x0413, r22
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <atoi>:
    11d6:	fc 01       	movw	r30, r24
    11d8:	88 27       	eor	r24, r24
    11da:	99 27       	eor	r25, r25
    11dc:	e8 94       	clt
    11de:	21 91       	ld	r18, Z+
    11e0:	20 32       	cpi	r18, 0x20	; 32
    11e2:	e9 f3       	breq	.-6      	; 0x11de <atoi+0x8>
    11e4:	29 30       	cpi	r18, 0x09	; 9
    11e6:	10 f0       	brcs	.+4      	; 0x11ec <atoi+0x16>
    11e8:	2e 30       	cpi	r18, 0x0E	; 14
    11ea:	c8 f3       	brcs	.-14     	; 0x11de <atoi+0x8>
    11ec:	2b 32       	cpi	r18, 0x2B	; 43
    11ee:	41 f0       	breq	.+16     	; 0x1200 <atoi+0x2a>
    11f0:	2d 32       	cpi	r18, 0x2D	; 45
    11f2:	39 f4       	brne	.+14     	; 0x1202 <atoi+0x2c>
    11f4:	68 94       	set
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <atoi+0x2a>
    11f8:	0e 94 45 09 	call	0x128a	; 0x128a <__mulhi_const_10>
    11fc:	82 0f       	add	r24, r18
    11fe:	91 1d       	adc	r25, r1
    1200:	21 91       	ld	r18, Z+
    1202:	20 53       	subi	r18, 0x30	; 48
    1204:	2a 30       	cpi	r18, 0x0A	; 10
    1206:	c0 f3       	brcs	.-16     	; 0x11f8 <atoi+0x22>
    1208:	1e f4       	brtc	.+6      	; 0x1210 <atoi+0x3a>
    120a:	90 95       	com	r25
    120c:	81 95       	neg	r24
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	08 95       	ret

00001212 <strtok>:
    1212:	44 ee       	ldi	r20, 0xE4	; 228
    1214:	52 e0       	ldi	r21, 0x02	; 2
    1216:	0e 94 1e 09 	call	0x123c	; 0x123c <strtok_r>
    121a:	08 95       	ret

0000121c <strcmp>:
    121c:	fb 01       	movw	r30, r22
    121e:	dc 01       	movw	r26, r24
    1220:	8d 91       	ld	r24, X+
    1222:	01 90       	ld	r0, Z+
    1224:	80 19       	sub	r24, r0
    1226:	01 10       	cpse	r0, r1
    1228:	d9 f3       	breq	.-10     	; 0x1220 <strcmp+0x4>
    122a:	99 0b       	sbc	r25, r25
    122c:	08 95       	ret

0000122e <strcpy>:
    122e:	fb 01       	movw	r30, r22
    1230:	dc 01       	movw	r26, r24
    1232:	01 90       	ld	r0, Z+
    1234:	0d 92       	st	X+, r0
    1236:	00 20       	and	r0, r0
    1238:	e1 f7       	brne	.-8      	; 0x1232 <strcpy+0x4>
    123a:	08 95       	ret

0000123c <strtok_r>:
    123c:	fa 01       	movw	r30, r20
    123e:	a1 91       	ld	r26, Z+
    1240:	b0 81       	ld	r27, Z
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	19 f4       	brne	.+6      	; 0x124c <strtok_r+0x10>
    1246:	10 97       	sbiw	r26, 0x00	; 0
    1248:	e1 f0       	breq	.+56     	; 0x1282 <strtok_r+0x46>
    124a:	cd 01       	movw	r24, r26
    124c:	dc 01       	movw	r26, r24
    124e:	cd 01       	movw	r24, r26
    1250:	0d 90       	ld	r0, X+
    1252:	00 20       	and	r0, r0
    1254:	11 f4       	brne	.+4      	; 0x125a <strtok_r+0x1e>
    1256:	c0 01       	movw	r24, r0
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <strtok_r+0x44>
    125a:	fb 01       	movw	r30, r22
    125c:	21 91       	ld	r18, Z+
    125e:	22 23       	and	r18, r18
    1260:	19 f0       	breq	.+6      	; 0x1268 <strtok_r+0x2c>
    1262:	20 15       	cp	r18, r0
    1264:	d9 f7       	brne	.-10     	; 0x125c <strtok_r+0x20>
    1266:	f3 cf       	rjmp	.-26     	; 0x124e <strtok_r+0x12>
    1268:	fb 01       	movw	r30, r22
    126a:	21 91       	ld	r18, Z+
    126c:	20 15       	cp	r18, r0
    126e:	19 f4       	brne	.+6      	; 0x1276 <strtok_r+0x3a>
    1270:	1e 92       	st	-X, r1
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <strtok_r+0x46>
    1276:	22 23       	and	r18, r18
    1278:	c1 f7       	brne	.-16     	; 0x126a <strtok_r+0x2e>
    127a:	0d 90       	ld	r0, X+
    127c:	00 20       	and	r0, r0
    127e:	a1 f7       	brne	.-24     	; 0x1268 <strtok_r+0x2c>
    1280:	d0 01       	movw	r26, r0
    1282:	fa 01       	movw	r30, r20
    1284:	a1 93       	st	Z+, r26
    1286:	b0 83       	st	Z, r27
    1288:	08 95       	ret

0000128a <__mulhi_const_10>:
    128a:	7a e0       	ldi	r23, 0x0A	; 10
    128c:	97 9f       	mul	r25, r23
    128e:	90 2d       	mov	r25, r0
    1290:	87 9f       	mul	r24, r23
    1292:	80 2d       	mov	r24, r0
    1294:	91 0d       	add	r25, r1
    1296:	11 24       	eor	r1, r1
    1298:	08 95       	ret

0000129a <fgets>:
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	8c 01       	movw	r16, r24
    12ac:	6a 01       	movw	r12, r20
    12ae:	fa 01       	movw	r30, r20
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
    12b2:	80 ff       	sbrs	r24, 0
    12b4:	1a c0       	rjmp	.+52     	; 0x12ea <fgets+0x50>
    12b6:	16 16       	cp	r1, r22
    12b8:	17 06       	cpc	r1, r23
    12ba:	bc f4       	brge	.+46     	; 0x12ea <fgets+0x50>
    12bc:	7b 01       	movw	r14, r22
    12be:	e8 01       	movw	r28, r16
    12c0:	0e c0       	rjmp	.+28     	; 0x12de <fgets+0x44>
    12c2:	c6 01       	movw	r24, r12
    12c4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    12c8:	ff ef       	ldi	r31, 0xFF	; 255
    12ca:	8f 3f       	cpi	r24, 0xFF	; 255
    12cc:	9f 07       	cpc	r25, r31
    12ce:	69 f0       	breq	.+26     	; 0x12ea <fgets+0x50>
    12d0:	89 93       	st	Y+, r24
    12d2:	08 94       	sec
    12d4:	e1 08       	sbc	r14, r1
    12d6:	f1 08       	sbc	r15, r1
    12d8:	8a 30       	cpi	r24, 0x0A	; 10
    12da:	91 05       	cpc	r25, r1
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <fgets+0x4c>
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	e2 16       	cp	r14, r18
    12e2:	f1 04       	cpc	r15, r1
    12e4:	71 f7       	brne	.-36     	; 0x12c2 <fgets+0x28>
    12e6:	18 82       	st	Y, r1
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <fgets+0x54>
    12ea:	00 e0       	ldi	r16, 0x00	; 0
    12ec:	10 e0       	ldi	r17, 0x00	; 0
    12ee:	c8 01       	movw	r24, r16
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	08 95       	ret

00001302 <gets>:
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	8c 01       	movw	r16, r24
    130c:	e0 91 17 04 	lds	r30, 0x0417
    1310:	f0 91 18 04 	lds	r31, 0x0418
    1314:	83 81       	ldd	r24, Z+3	; 0x03
    1316:	80 ff       	sbrs	r24, 0
    1318:	12 c0       	rjmp	.+36     	; 0x133e <gets+0x3c>
    131a:	e8 01       	movw	r28, r16
    131c:	80 91 17 04 	lds	r24, 0x0417
    1320:	90 91 18 04 	lds	r25, 0x0418
    1324:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	8f 3f       	cpi	r24, 0xFF	; 255
    132c:	92 07       	cpc	r25, r18
    132e:	39 f0       	breq	.+14     	; 0x133e <gets+0x3c>
    1330:	89 93       	st	Y+, r24
    1332:	8a 30       	cpi	r24, 0x0A	; 10
    1334:	91 05       	cpc	r25, r1
    1336:	91 f7       	brne	.-28     	; 0x131c <gets+0x1a>
    1338:	21 97       	sbiw	r28, 0x01	; 1
    133a:	18 82       	st	Y, r1
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <gets+0x40>
    133e:	00 e0       	ldi	r16, 0x00	; 0
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	c8 01       	movw	r24, r16
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <printf>:
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	fe 01       	movw	r30, r28
    1358:	36 96       	adiw	r30, 0x06	; 6
    135a:	61 91       	ld	r22, Z+
    135c:	71 91       	ld	r23, Z+
    135e:	80 91 19 04 	lds	r24, 0x0419
    1362:	90 91 1a 04 	lds	r25, 0x041A
    1366:	af 01       	movw	r20, r30
    1368:	0e 94 10 0a 	call	0x1420	; 0x1420 <vfprintf>
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <putchar>:
    1372:	60 91 19 04 	lds	r22, 0x0419
    1376:	70 91 1a 04 	lds	r23, 0x041A
    137a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    137e:	08 95       	ret

00001380 <puts>:
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	8c 01       	movw	r16, r24
    138a:	e0 91 19 04 	lds	r30, 0x0419
    138e:	f0 91 1a 04 	lds	r31, 0x041A
    1392:	83 81       	ldd	r24, Z+3	; 0x03
    1394:	81 ff       	sbrs	r24, 1
    1396:	1a c0       	rjmp	.+52     	; 0x13cc <puts+0x4c>
    1398:	c0 e0       	ldi	r28, 0x00	; 0
    139a:	d0 e0       	ldi	r29, 0x00	; 0
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <puts+0x28>
    139e:	19 95       	eicall
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <puts+0x28>
    13a4:	cf ef       	ldi	r28, 0xFF	; 255
    13a6:	df ef       	ldi	r29, 0xFF	; 255
    13a8:	f8 01       	movw	r30, r16
    13aa:	81 91       	ld	r24, Z+
    13ac:	8f 01       	movw	r16, r30
    13ae:	60 91 19 04 	lds	r22, 0x0419
    13b2:	70 91 1a 04 	lds	r23, 0x041A
    13b6:	db 01       	movw	r26, r22
    13b8:	18 96       	adiw	r26, 0x08	; 8
    13ba:	ed 91       	ld	r30, X+
    13bc:	fc 91       	ld	r31, X
    13be:	19 97       	sbiw	r26, 0x09	; 9
    13c0:	88 23       	and	r24, r24
    13c2:	69 f7       	brne	.-38     	; 0x139e <puts+0x1e>
    13c4:	8a e0       	ldi	r24, 0x0A	; 10
    13c6:	19 95       	eicall
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	11 f0       	breq	.+4      	; 0x13d0 <puts+0x50>
    13cc:	cf ef       	ldi	r28, 0xFF	; 255
    13ce:	df ef       	ldi	r29, 0xFF	; 255
    13d0:	ce 01       	movw	r24, r28
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <sscanf>:
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	2e 97       	sbiw	r28, 0x0e	; 14
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	85 e0       	ldi	r24, 0x05	; 5
    13f2:	8c 83       	std	Y+4, r24	; 0x04
    13f4:	8c 89       	ldd	r24, Y+20	; 0x14
    13f6:	9d 89       	ldd	r25, Y+21	; 0x15
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	ae 01       	movw	r20, r28
    13fe:	48 5e       	subi	r20, 0xE8	; 232
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	6e 89       	ldd	r22, Y+22	; 0x16
    1408:	7f 89       	ldd	r23, Y+23	; 0x17
    140a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <vfscanf>
    140e:	2e 96       	adiw	r28, 0x0e	; 14
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <vfprintf>:
    1420:	2f 92       	push	r2
    1422:	3f 92       	push	r3
    1424:	4f 92       	push	r4
    1426:	5f 92       	push	r5
    1428:	6f 92       	push	r6
    142a:	7f 92       	push	r7
    142c:	8f 92       	push	r8
    142e:	9f 92       	push	r9
    1430:	af 92       	push	r10
    1432:	bf 92       	push	r11
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	2d 97       	sbiw	r28, 0x0d	; 13
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	3c 01       	movw	r6, r24
    1456:	7d 87       	std	Y+13, r23	; 0x0d
    1458:	6c 87       	std	Y+12, r22	; 0x0c
    145a:	5a 01       	movw	r10, r20
    145c:	fc 01       	movw	r30, r24
    145e:	17 82       	std	Z+7, r1	; 0x07
    1460:	16 82       	std	Z+6, r1	; 0x06
    1462:	83 81       	ldd	r24, Z+3	; 0x03
    1464:	81 ff       	sbrs	r24, 1
    1466:	c8 c1       	rjmp	.+912    	; 0x17f8 <vfprintf+0x3d8>
    1468:	2e 01       	movw	r4, r28
    146a:	08 94       	sec
    146c:	41 1c       	adc	r4, r1
    146e:	51 1c       	adc	r5, r1
    1470:	f3 01       	movw	r30, r6
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	ec 85       	ldd	r30, Y+12	; 0x0c
    1476:	fd 85       	ldd	r31, Y+13	; 0x0d
    1478:	93 fd       	sbrc	r25, 3
    147a:	85 91       	lpm	r24, Z+
    147c:	93 ff       	sbrs	r25, 3
    147e:	81 91       	ld	r24, Z+
    1480:	fd 87       	std	Y+13, r31	; 0x0d
    1482:	ec 87       	std	Y+12, r30	; 0x0c
    1484:	88 23       	and	r24, r24
    1486:	09 f4       	brne	.+2      	; 0x148a <vfprintf+0x6a>
    1488:	b3 c1       	rjmp	.+870    	; 0x17f0 <vfprintf+0x3d0>
    148a:	85 32       	cpi	r24, 0x25	; 37
    148c:	41 f4       	brne	.+16     	; 0x149e <vfprintf+0x7e>
    148e:	93 fd       	sbrc	r25, 3
    1490:	85 91       	lpm	r24, Z+
    1492:	93 ff       	sbrs	r25, 3
    1494:	81 91       	ld	r24, Z+
    1496:	fd 87       	std	Y+13, r31	; 0x0d
    1498:	ec 87       	std	Y+12, r30	; 0x0c
    149a:	85 32       	cpi	r24, 0x25	; 37
    149c:	29 f4       	brne	.+10     	; 0x14a8 <vfprintf+0x88>
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	b3 01       	movw	r22, r6
    14a2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    14a6:	e4 cf       	rjmp	.-56     	; 0x1470 <vfprintf+0x50>
    14a8:	ff 24       	eor	r15, r15
    14aa:	ee 24       	eor	r14, r14
    14ac:	10 e0       	ldi	r17, 0x00	; 0
    14ae:	10 32       	cpi	r17, 0x20	; 32
    14b0:	b0 f4       	brcc	.+44     	; 0x14de <vfprintf+0xbe>
    14b2:	8b 32       	cpi	r24, 0x2B	; 43
    14b4:	69 f0       	breq	.+26     	; 0x14d0 <vfprintf+0xb0>
    14b6:	8c 32       	cpi	r24, 0x2C	; 44
    14b8:	28 f4       	brcc	.+10     	; 0x14c4 <vfprintf+0xa4>
    14ba:	80 32       	cpi	r24, 0x20	; 32
    14bc:	51 f0       	breq	.+20     	; 0x14d2 <vfprintf+0xb2>
    14be:	83 32       	cpi	r24, 0x23	; 35
    14c0:	71 f4       	brne	.+28     	; 0x14de <vfprintf+0xbe>
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <vfprintf+0xba>
    14c4:	8d 32       	cpi	r24, 0x2D	; 45
    14c6:	39 f0       	breq	.+14     	; 0x14d6 <vfprintf+0xb6>
    14c8:	80 33       	cpi	r24, 0x30	; 48
    14ca:	49 f4       	brne	.+18     	; 0x14de <vfprintf+0xbe>
    14cc:	11 60       	ori	r17, 0x01	; 1
    14ce:	2c c0       	rjmp	.+88     	; 0x1528 <vfprintf+0x108>
    14d0:	12 60       	ori	r17, 0x02	; 2
    14d2:	14 60       	ori	r17, 0x04	; 4
    14d4:	29 c0       	rjmp	.+82     	; 0x1528 <vfprintf+0x108>
    14d6:	18 60       	ori	r17, 0x08	; 8
    14d8:	27 c0       	rjmp	.+78     	; 0x1528 <vfprintf+0x108>
    14da:	10 61       	ori	r17, 0x10	; 16
    14dc:	25 c0       	rjmp	.+74     	; 0x1528 <vfprintf+0x108>
    14de:	17 fd       	sbrc	r17, 7
    14e0:	2e c0       	rjmp	.+92     	; 0x153e <vfprintf+0x11e>
    14e2:	28 2f       	mov	r18, r24
    14e4:	20 53       	subi	r18, 0x30	; 48
    14e6:	2a 30       	cpi	r18, 0x0A	; 10
    14e8:	98 f4       	brcc	.+38     	; 0x1510 <vfprintf+0xf0>
    14ea:	16 ff       	sbrs	r17, 6
    14ec:	08 c0       	rjmp	.+16     	; 0x14fe <vfprintf+0xde>
    14ee:	8f 2d       	mov	r24, r15
    14f0:	88 0f       	add	r24, r24
    14f2:	f8 2e       	mov	r15, r24
    14f4:	ff 0c       	add	r15, r15
    14f6:	ff 0c       	add	r15, r15
    14f8:	f8 0e       	add	r15, r24
    14fa:	f2 0e       	add	r15, r18
    14fc:	15 c0       	rjmp	.+42     	; 0x1528 <vfprintf+0x108>
    14fe:	8e 2d       	mov	r24, r14
    1500:	88 0f       	add	r24, r24
    1502:	e8 2e       	mov	r14, r24
    1504:	ee 0c       	add	r14, r14
    1506:	ee 0c       	add	r14, r14
    1508:	e8 0e       	add	r14, r24
    150a:	e2 0e       	add	r14, r18
    150c:	10 62       	ori	r17, 0x20	; 32
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <vfprintf+0x108>
    1510:	8e 32       	cpi	r24, 0x2E	; 46
    1512:	21 f4       	brne	.+8      	; 0x151c <vfprintf+0xfc>
    1514:	16 fd       	sbrc	r17, 6
    1516:	6c c1       	rjmp	.+728    	; 0x17f0 <vfprintf+0x3d0>
    1518:	10 64       	ori	r17, 0x40	; 64
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <vfprintf+0x108>
    151c:	8c 36       	cpi	r24, 0x6C	; 108
    151e:	11 f4       	brne	.+4      	; 0x1524 <vfprintf+0x104>
    1520:	10 68       	ori	r17, 0x80	; 128
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0x108>
    1524:	88 36       	cpi	r24, 0x68	; 104
    1526:	59 f4       	brne	.+22     	; 0x153e <vfprintf+0x11e>
    1528:	ec 85       	ldd	r30, Y+12	; 0x0c
    152a:	fd 85       	ldd	r31, Y+13	; 0x0d
    152c:	93 fd       	sbrc	r25, 3
    152e:	85 91       	lpm	r24, Z+
    1530:	93 ff       	sbrs	r25, 3
    1532:	81 91       	ld	r24, Z+
    1534:	fd 87       	std	Y+13, r31	; 0x0d
    1536:	ec 87       	std	Y+12, r30	; 0x0c
    1538:	88 23       	and	r24, r24
    153a:	09 f0       	breq	.+2      	; 0x153e <vfprintf+0x11e>
    153c:	b8 cf       	rjmp	.-144    	; 0x14ae <vfprintf+0x8e>
    153e:	98 2f       	mov	r25, r24
    1540:	95 54       	subi	r25, 0x45	; 69
    1542:	93 30       	cpi	r25, 0x03	; 3
    1544:	18 f0       	brcs	.+6      	; 0x154c <vfprintf+0x12c>
    1546:	90 52       	subi	r25, 0x20	; 32
    1548:	93 30       	cpi	r25, 0x03	; 3
    154a:	38 f4       	brcc	.+14     	; 0x155a <vfprintf+0x13a>
    154c:	24 e0       	ldi	r18, 0x04	; 4
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	a2 0e       	add	r10, r18
    1552:	b3 1e       	adc	r11, r19
    1554:	3f e3       	ldi	r19, 0x3F	; 63
    1556:	39 83       	std	Y+1, r19	; 0x01
    1558:	0f c0       	rjmp	.+30     	; 0x1578 <vfprintf+0x158>
    155a:	83 36       	cpi	r24, 0x63	; 99
    155c:	31 f0       	breq	.+12     	; 0x156a <vfprintf+0x14a>
    155e:	83 37       	cpi	r24, 0x73	; 115
    1560:	81 f0       	breq	.+32     	; 0x1582 <vfprintf+0x162>
    1562:	83 35       	cpi	r24, 0x53	; 83
    1564:	09 f0       	breq	.+2      	; 0x1568 <vfprintf+0x148>
    1566:	5a c0       	rjmp	.+180    	; 0x161c <vfprintf+0x1fc>
    1568:	22 c0       	rjmp	.+68     	; 0x15ae <vfprintf+0x18e>
    156a:	f5 01       	movw	r30, r10
    156c:	80 81       	ld	r24, Z
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	22 e0       	ldi	r18, 0x02	; 2
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	a2 0e       	add	r10, r18
    1576:	b3 1e       	adc	r11, r19
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	c2 2e       	mov	r12, r18
    157c:	d1 2c       	mov	r13, r1
    157e:	42 01       	movw	r8, r4
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <vfprintf+0x18a>
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	29 2e       	mov	r2, r25
    1586:	31 2c       	mov	r3, r1
    1588:	2a 0c       	add	r2, r10
    158a:	3b 1c       	adc	r3, r11
    158c:	f5 01       	movw	r30, r10
    158e:	80 80       	ld	r8, Z
    1590:	91 80       	ldd	r9, Z+1	; 0x01
    1592:	16 ff       	sbrs	r17, 6
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfprintf+0x17c>
    1596:	6f 2d       	mov	r22, r15
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x180>
    159c:	6f ef       	ldi	r22, 0xFF	; 255
    159e:	7f ef       	ldi	r23, 0xFF	; 255
    15a0:	c4 01       	movw	r24, r8
    15a2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <strnlen>
    15a6:	6c 01       	movw	r12, r24
    15a8:	51 01       	movw	r10, r2
    15aa:	1f 77       	andi	r17, 0x7F	; 127
    15ac:	15 c0       	rjmp	.+42     	; 0x15d8 <vfprintf+0x1b8>
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	28 2e       	mov	r2, r24
    15b2:	31 2c       	mov	r3, r1
    15b4:	2a 0c       	add	r2, r10
    15b6:	3b 1c       	adc	r3, r11
    15b8:	f5 01       	movw	r30, r10
    15ba:	80 80       	ld	r8, Z
    15bc:	91 80       	ldd	r9, Z+1	; 0x01
    15be:	16 ff       	sbrs	r17, 6
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <vfprintf+0x1a8>
    15c2:	6f 2d       	mov	r22, r15
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x1ac>
    15c8:	6f ef       	ldi	r22, 0xFF	; 255
    15ca:	7f ef       	ldi	r23, 0xFF	; 255
    15cc:	c4 01       	movw	r24, r8
    15ce:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <strnlen_P>
    15d2:	6c 01       	movw	r12, r24
    15d4:	10 68       	ori	r17, 0x80	; 128
    15d6:	51 01       	movw	r10, r2
    15d8:	13 fd       	sbrc	r17, 3
    15da:	1c c0       	rjmp	.+56     	; 0x1614 <vfprintf+0x1f4>
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0x1ca>
    15de:	80 e2       	ldi	r24, 0x20	; 32
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	b3 01       	movw	r22, r6
    15e4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    15e8:	ea 94       	dec	r14
    15ea:	8e 2d       	mov	r24, r14
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	c8 16       	cp	r12, r24
    15f0:	d9 06       	cpc	r13, r25
    15f2:	a8 f3       	brcs	.-22     	; 0x15de <vfprintf+0x1be>
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <vfprintf+0x1f4>
    15f6:	f4 01       	movw	r30, r8
    15f8:	17 fd       	sbrc	r17, 7
    15fa:	85 91       	lpm	r24, Z+
    15fc:	17 ff       	sbrs	r17, 7
    15fe:	81 91       	ld	r24, Z+
    1600:	4f 01       	movw	r8, r30
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	b3 01       	movw	r22, r6
    1606:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    160a:	e1 10       	cpse	r14, r1
    160c:	ea 94       	dec	r14
    160e:	08 94       	sec
    1610:	c1 08       	sbc	r12, r1
    1612:	d1 08       	sbc	r13, r1
    1614:	c1 14       	cp	r12, r1
    1616:	d1 04       	cpc	r13, r1
    1618:	71 f7       	brne	.-36     	; 0x15f6 <vfprintf+0x1d6>
    161a:	e7 c0       	rjmp	.+462    	; 0x17ea <vfprintf+0x3ca>
    161c:	84 36       	cpi	r24, 0x64	; 100
    161e:	11 f0       	breq	.+4      	; 0x1624 <vfprintf+0x204>
    1620:	89 36       	cpi	r24, 0x69	; 105
    1622:	51 f5       	brne	.+84     	; 0x1678 <vfprintf+0x258>
    1624:	f5 01       	movw	r30, r10
    1626:	17 ff       	sbrs	r17, 7
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <vfprintf+0x218>
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	a2 81       	ldd	r26, Z+2	; 0x02
    1630:	b3 81       	ldd	r27, Z+3	; 0x03
    1632:	24 e0       	ldi	r18, 0x04	; 4
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	08 c0       	rjmp	.+16     	; 0x1648 <vfprintf+0x228>
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	aa 27       	eor	r26, r26
    163e:	97 fd       	sbrc	r25, 7
    1640:	a0 95       	com	r26
    1642:	ba 2f       	mov	r27, r26
    1644:	22 e0       	ldi	r18, 0x02	; 2
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	a2 0e       	add	r10, r18
    164a:	b3 1e       	adc	r11, r19
    164c:	01 2f       	mov	r16, r17
    164e:	0f 76       	andi	r16, 0x6F	; 111
    1650:	b7 ff       	sbrs	r27, 7
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <vfprintf+0x244>
    1654:	b0 95       	com	r27
    1656:	a0 95       	com	r26
    1658:	90 95       	com	r25
    165a:	81 95       	neg	r24
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	af 4f       	sbci	r26, 0xFF	; 255
    1660:	bf 4f       	sbci	r27, 0xFF	; 255
    1662:	00 68       	ori	r16, 0x80	; 128
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	a2 01       	movw	r20, r4
    166a:	2a e0       	ldi	r18, 0x0A	; 10
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__ultoa_invert>
    1672:	d8 2e       	mov	r13, r24
    1674:	d4 18       	sub	r13, r4
    1676:	3f c0       	rjmp	.+126    	; 0x16f6 <vfprintf+0x2d6>
    1678:	85 37       	cpi	r24, 0x75	; 117
    167a:	21 f4       	brne	.+8      	; 0x1684 <vfprintf+0x264>
    167c:	1f 7e       	andi	r17, 0xEF	; 239
    167e:	2a e0       	ldi	r18, 0x0A	; 10
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	20 c0       	rjmp	.+64     	; 0x16c4 <vfprintf+0x2a4>
    1684:	19 7f       	andi	r17, 0xF9	; 249
    1686:	8f 36       	cpi	r24, 0x6F	; 111
    1688:	a9 f0       	breq	.+42     	; 0x16b4 <vfprintf+0x294>
    168a:	80 37       	cpi	r24, 0x70	; 112
    168c:	20 f4       	brcc	.+8      	; 0x1696 <vfprintf+0x276>
    168e:	88 35       	cpi	r24, 0x58	; 88
    1690:	09 f0       	breq	.+2      	; 0x1694 <vfprintf+0x274>
    1692:	ae c0       	rjmp	.+348    	; 0x17f0 <vfprintf+0x3d0>
    1694:	0b c0       	rjmp	.+22     	; 0x16ac <vfprintf+0x28c>
    1696:	80 37       	cpi	r24, 0x70	; 112
    1698:	21 f0       	breq	.+8      	; 0x16a2 <vfprintf+0x282>
    169a:	88 37       	cpi	r24, 0x78	; 120
    169c:	09 f0       	breq	.+2      	; 0x16a0 <vfprintf+0x280>
    169e:	a8 c0       	rjmp	.+336    	; 0x17f0 <vfprintf+0x3d0>
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <vfprintf+0x284>
    16a2:	10 61       	ori	r17, 0x10	; 16
    16a4:	14 ff       	sbrs	r17, 4
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <vfprintf+0x29a>
    16a8:	14 60       	ori	r17, 0x04	; 4
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <vfprintf+0x29a>
    16ac:	14 ff       	sbrs	r17, 4
    16ae:	08 c0       	rjmp	.+16     	; 0x16c0 <vfprintf+0x2a0>
    16b0:	16 60       	ori	r17, 0x06	; 6
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <vfprintf+0x2a0>
    16b4:	28 e0       	ldi	r18, 0x08	; 8
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <vfprintf+0x2a4>
    16ba:	20 e1       	ldi	r18, 0x10	; 16
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x2a4>
    16c0:	20 e1       	ldi	r18, 0x10	; 16
    16c2:	32 e0       	ldi	r19, 0x02	; 2
    16c4:	f5 01       	movw	r30, r10
    16c6:	17 ff       	sbrs	r17, 7
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <vfprintf+0x2b8>
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	44 e0       	ldi	r20, 0x04	; 4
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x2c4>
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	42 e0       	ldi	r20, 0x02	; 2
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	a4 0e       	add	r10, r20
    16e6:	b5 1e       	adc	r11, r21
    16e8:	a2 01       	movw	r20, r4
    16ea:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__ultoa_invert>
    16ee:	d8 2e       	mov	r13, r24
    16f0:	d4 18       	sub	r13, r4
    16f2:	01 2f       	mov	r16, r17
    16f4:	0f 77       	andi	r16, 0x7F	; 127
    16f6:	06 ff       	sbrs	r16, 6
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <vfprintf+0x2ec>
    16fa:	0e 7f       	andi	r16, 0xFE	; 254
    16fc:	df 14       	cp	r13, r15
    16fe:	30 f4       	brcc	.+12     	; 0x170c <vfprintf+0x2ec>
    1700:	04 ff       	sbrs	r16, 4
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <vfprintf+0x2f0>
    1704:	02 fd       	sbrc	r16, 2
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <vfprintf+0x2f0>
    1708:	0f 7e       	andi	r16, 0xEF	; 239
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x2f0>
    170c:	1d 2d       	mov	r17, r13
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <vfprintf+0x2f2>
    1710:	1f 2d       	mov	r17, r15
    1712:	80 2f       	mov	r24, r16
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	04 ff       	sbrs	r16, 4
    1718:	0c c0       	rjmp	.+24     	; 0x1732 <vfprintf+0x312>
    171a:	fe 01       	movw	r30, r28
    171c:	ed 0d       	add	r30, r13
    171e:	f1 1d       	adc	r31, r1
    1720:	20 81       	ld	r18, Z
    1722:	20 33       	cpi	r18, 0x30	; 48
    1724:	11 f4       	brne	.+4      	; 0x172a <vfprintf+0x30a>
    1726:	09 7e       	andi	r16, 0xE9	; 233
    1728:	09 c0       	rjmp	.+18     	; 0x173c <vfprintf+0x31c>
    172a:	02 ff       	sbrs	r16, 2
    172c:	06 c0       	rjmp	.+12     	; 0x173a <vfprintf+0x31a>
    172e:	1e 5f       	subi	r17, 0xFE	; 254
    1730:	05 c0       	rjmp	.+10     	; 0x173c <vfprintf+0x31c>
    1732:	86 78       	andi	r24, 0x86	; 134
    1734:	90 70       	andi	r25, 0x00	; 0
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	09 f0       	breq	.+2      	; 0x173c <vfprintf+0x31c>
    173a:	1f 5f       	subi	r17, 0xFF	; 255
    173c:	80 2e       	mov	r8, r16
    173e:	99 24       	eor	r9, r9
    1740:	03 fd       	sbrc	r16, 3
    1742:	12 c0       	rjmp	.+36     	; 0x1768 <vfprintf+0x348>
    1744:	00 ff       	sbrs	r16, 0
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <vfprintf+0x342>
    1748:	fd 2c       	mov	r15, r13
    174a:	1e 15       	cp	r17, r14
    174c:	50 f4       	brcc	.+20     	; 0x1762 <vfprintf+0x342>
    174e:	fe 0c       	add	r15, r14
    1750:	f1 1a       	sub	r15, r17
    1752:	1e 2d       	mov	r17, r14
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x342>
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	b3 01       	movw	r22, r6
    175c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    1760:	1f 5f       	subi	r17, 0xFF	; 255
    1762:	1e 15       	cp	r17, r14
    1764:	c0 f3       	brcs	.-16     	; 0x1756 <vfprintf+0x336>
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <vfprintf+0x350>
    1768:	1e 15       	cp	r17, r14
    176a:	10 f4       	brcc	.+4      	; 0x1770 <vfprintf+0x350>
    176c:	e1 1a       	sub	r14, r17
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <vfprintf+0x352>
    1770:	ee 24       	eor	r14, r14
    1772:	84 fe       	sbrs	r8, 4
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <vfprintf+0x374>
    1776:	80 e3       	ldi	r24, 0x30	; 48
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	b3 01       	movw	r22, r6
    177c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    1780:	82 fe       	sbrs	r8, 2
    1782:	1f c0       	rjmp	.+62     	; 0x17c2 <vfprintf+0x3a2>
    1784:	81 fe       	sbrs	r8, 1
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x36e>
    1788:	88 e5       	ldi	r24, 0x58	; 88
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	10 c0       	rjmp	.+32     	; 0x17ae <vfprintf+0x38e>
    178e:	88 e7       	ldi	r24, 0x78	; 120
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x38e>
    1794:	c4 01       	movw	r24, r8
    1796:	86 78       	andi	r24, 0x86	; 134
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	91 f0       	breq	.+36     	; 0x17c2 <vfprintf+0x3a2>
    179e:	81 fc       	sbrc	r8, 1
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x386>
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <vfprintf+0x388>
    17a6:	8b e2       	ldi	r24, 0x2B	; 43
    17a8:	07 fd       	sbrc	r16, 7
    17aa:	8d e2       	ldi	r24, 0x2D	; 45
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	b3 01       	movw	r22, r6
    17b0:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <vfprintf+0x3a2>
    17b6:	80 e3       	ldi	r24, 0x30	; 48
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	b3 01       	movw	r22, r6
    17bc:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    17c0:	fa 94       	dec	r15
    17c2:	df 14       	cp	r13, r15
    17c4:	c0 f3       	brcs	.-16     	; 0x17b6 <vfprintf+0x396>
    17c6:	da 94       	dec	r13
    17c8:	f2 01       	movw	r30, r4
    17ca:	ed 0d       	add	r30, r13
    17cc:	f1 1d       	adc	r31, r1
    17ce:	80 81       	ld	r24, Z
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	b3 01       	movw	r22, r6
    17d4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    17d8:	dd 20       	and	r13, r13
    17da:	a9 f7       	brne	.-22     	; 0x17c6 <vfprintf+0x3a6>
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <vfprintf+0x3ca>
    17de:	80 e2       	ldi	r24, 0x20	; 32
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	b3 01       	movw	r22, r6
    17e4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <fputc>
    17e8:	ea 94       	dec	r14
    17ea:	ee 20       	and	r14, r14
    17ec:	c1 f7       	brne	.-16     	; 0x17de <vfprintf+0x3be>
    17ee:	40 ce       	rjmp	.-896    	; 0x1470 <vfprintf+0x50>
    17f0:	f3 01       	movw	r30, r6
    17f2:	86 81       	ldd	r24, Z+6	; 0x06
    17f4:	97 81       	ldd	r25, Z+7	; 0x07
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x3dc>
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	9f ef       	ldi	r25, 0xFF	; 255
    17fc:	2d 96       	adiw	r28, 0x0d	; 13
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	7f 90       	pop	r7
    1822:	6f 90       	pop	r6
    1824:	5f 90       	pop	r5
    1826:	4f 90       	pop	r4
    1828:	3f 90       	pop	r3
    182a:	2f 90       	pop	r2
    182c:	08 95       	ret

0000182e <putval>:
    182e:	20 fd       	sbrc	r18, 0
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <putval+0x16>
    1832:	fc 01       	movw	r30, r24
    1834:	23 fd       	sbrc	r18, 3
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <putval+0x14>
    1838:	22 ff       	sbrs	r18, 2
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <putval+0x12>
    183c:	73 83       	std	Z+3, r23	; 0x03
    183e:	62 83       	std	Z+2, r22	; 0x02
    1840:	51 83       	std	Z+1, r21	; 0x01
    1842:	40 83       	st	Z, r20
    1844:	08 95       	ret

00001846 <mulacc>:
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	6b 01       	movw	r12, r22
    1850:	7c 01       	movw	r14, r24
    1852:	44 fd       	sbrc	r20, 4
    1854:	10 c0       	rjmp	.+32     	; 0x1876 <mulacc+0x30>
    1856:	46 fd       	sbrc	r20, 6
    1858:	10 c0       	rjmp	.+32     	; 0x187a <mulacc+0x34>
    185a:	d6 01       	movw	r26, r12
    185c:	f7 01       	movw	r30, r14
    185e:	aa 0f       	add	r26, r26
    1860:	bb 1f       	adc	r27, r27
    1862:	ee 1f       	adc	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	10 94       	com	r1
    1868:	d1 f7       	brne	.-12     	; 0x185e <mulacc+0x18>
    186a:	ca 0e       	add	r12, r26
    186c:	db 1e       	adc	r13, r27
    186e:	ee 1e       	adc	r14, r30
    1870:	ff 1e       	adc	r15, r31
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	03 c0       	rjmp	.+6      	; 0x187c <mulacc+0x36>
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	01 c0       	rjmp	.+2      	; 0x187c <mulacc+0x36>
    187a:	84 e0       	ldi	r24, 0x04	; 4
    187c:	cc 0c       	add	r12, r12
    187e:	dd 1c       	adc	r13, r13
    1880:	ee 1c       	adc	r14, r14
    1882:	ff 1c       	adc	r15, r15
    1884:	81 50       	subi	r24, 0x01	; 1
    1886:	d1 f7       	brne	.-12     	; 0x187c <mulacc+0x36>
    1888:	c2 0e       	add	r12, r18
    188a:	d1 1c       	adc	r13, r1
    188c:	e1 1c       	adc	r14, r1
    188e:	f1 1c       	adc	r15, r1
    1890:	b6 01       	movw	r22, r12
    1892:	c7 01       	movw	r24, r14
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	08 95       	ret

0000189e <skip_spaces>:
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	8c 01       	movw	r16, r24
    18a8:	c8 01       	movw	r24, r16
    18aa:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    18ae:	ec 01       	movw	r28, r24
    18b0:	97 fd       	sbrc	r25, 7
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <skip_spaces+0x26>
    18b4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <isspace>
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	b1 f7       	brne	.-20     	; 0x18a8 <skip_spaces+0xa>
    18bc:	ce 01       	movw	r24, r28
    18be:	b8 01       	movw	r22, r16
    18c0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ungetc>
    18c4:	ce 01       	movw	r24, r28
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <conv_int>:
    18d0:	af 92       	push	r10
    18d2:	bf 92       	push	r11
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	8c 01       	movw	r16, r24
    18e6:	d6 2f       	mov	r29, r22
    18e8:	5a 01       	movw	r10, r20
    18ea:	c2 2f       	mov	r28, r18
    18ec:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    18f0:	8b 32       	cpi	r24, 0x2B	; 43
    18f2:	19 f0       	breq	.+6      	; 0x18fa <conv_int+0x2a>
    18f4:	8d 32       	cpi	r24, 0x2D	; 45
    18f6:	49 f4       	brne	.+18     	; 0x190a <conv_int+0x3a>
    18f8:	c0 68       	ori	r28, 0x80	; 128
    18fa:	d1 50       	subi	r29, 0x01	; 1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <conv_int+0x30>
    18fe:	61 c0       	rjmp	.+194    	; 0x19c2 <conv_int+0xf2>
    1900:	c8 01       	movw	r24, r16
    1902:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    1906:	97 fd       	sbrc	r25, 7
    1908:	5c c0       	rjmp	.+184    	; 0x19c2 <conv_int+0xf2>
    190a:	cd 7f       	andi	r28, 0xFD	; 253
    190c:	2c 2f       	mov	r18, r28
    190e:	20 73       	andi	r18, 0x30	; 48
    1910:	d1 f4       	brne	.+52     	; 0x1946 <conv_int+0x76>
    1912:	80 33       	cpi	r24, 0x30	; 48
    1914:	c1 f4       	brne	.+48     	; 0x1946 <conv_int+0x76>
    1916:	d1 50       	subi	r29, 0x01	; 1
    1918:	09 f4       	brne	.+2      	; 0x191c <conv_int+0x4c>
    191a:	3e c0       	rjmp	.+124    	; 0x1998 <conv_int+0xc8>
    191c:	c8 01       	movw	r24, r16
    191e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    1922:	97 fd       	sbrc	r25, 7
    1924:	39 c0       	rjmp	.+114    	; 0x1998 <conv_int+0xc8>
    1926:	c2 60       	ori	r28, 0x02	; 2
    1928:	88 37       	cpi	r24, 0x78	; 120
    192a:	11 f0       	breq	.+4      	; 0x1930 <conv_int+0x60>
    192c:	88 35       	cpi	r24, 0x58	; 88
    192e:	49 f4       	brne	.+18     	; 0x1942 <conv_int+0x72>
    1930:	c0 64       	ori	r28, 0x40	; 64
    1932:	d1 50       	subi	r29, 0x01	; 1
    1934:	89 f1       	breq	.+98     	; 0x1998 <conv_int+0xc8>
    1936:	c8 01       	movw	r24, r16
    1938:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    193c:	97 ff       	sbrs	r25, 7
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <conv_int+0x76>
    1940:	2b c0       	rjmp	.+86     	; 0x1998 <conv_int+0xc8>
    1942:	c6 ff       	sbrs	r28, 6
    1944:	c0 61       	ori	r28, 0x10	; 16
    1946:	cc 24       	eor	r12, r12
    1948:	dd 24       	eor	r13, r13
    194a:	76 01       	movw	r14, r12
    194c:	28 2f       	mov	r18, r24
    194e:	20 53       	subi	r18, 0x30	; 48
    1950:	28 30       	cpi	r18, 0x08	; 8
    1952:	80 f0       	brcs	.+32     	; 0x1974 <conv_int+0xa4>
    1954:	c4 fd       	sbrc	r28, 4
    1956:	09 c0       	rjmp	.+18     	; 0x196a <conv_int+0x9a>
    1958:	2a 30       	cpi	r18, 0x0A	; 10
    195a:	60 f0       	brcs	.+24     	; 0x1974 <conv_int+0xa4>
    195c:	c6 ff       	sbrs	r28, 6
    195e:	05 c0       	rjmp	.+10     	; 0x196a <conv_int+0x9a>
    1960:	2f 7d       	andi	r18, 0xDF	; 223
    1962:	32 2f       	mov	r19, r18
    1964:	31 51       	subi	r19, 0x11	; 17
    1966:	36 30       	cpi	r19, 0x06	; 6
    1968:	20 f0       	brcs	.+8      	; 0x1972 <conv_int+0xa2>
    196a:	b8 01       	movw	r22, r16
    196c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ungetc>
    1970:	10 c0       	rjmp	.+32     	; 0x1992 <conv_int+0xc2>
    1972:	27 50       	subi	r18, 0x07	; 7
    1974:	c7 01       	movw	r24, r14
    1976:	b6 01       	movw	r22, r12
    1978:	4c 2f       	mov	r20, r28
    197a:	0e 94 23 0c 	call	0x1846	; 0x1846 <mulacc>
    197e:	6b 01       	movw	r12, r22
    1980:	7c 01       	movw	r14, r24
    1982:	c2 60       	ori	r28, 0x02	; 2
    1984:	d1 50       	subi	r29, 0x01	; 1
    1986:	59 f0       	breq	.+22     	; 0x199e <conv_int+0xce>
    1988:	c8 01       	movw	r24, r16
    198a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    198e:	97 ff       	sbrs	r25, 7
    1990:	dd cf       	rjmp	.-70     	; 0x194c <conv_int+0x7c>
    1992:	c1 fd       	sbrc	r28, 1
    1994:	04 c0       	rjmp	.+8      	; 0x199e <conv_int+0xce>
    1996:	15 c0       	rjmp	.+42     	; 0x19c2 <conv_int+0xf2>
    1998:	cc 24       	eor	r12, r12
    199a:	dd 24       	eor	r13, r13
    199c:	76 01       	movw	r14, r12
    199e:	c7 ff       	sbrs	r28, 7
    19a0:	08 c0       	rjmp	.+16     	; 0x19b2 <conv_int+0xe2>
    19a2:	f0 94       	com	r15
    19a4:	e0 94       	com	r14
    19a6:	d0 94       	com	r13
    19a8:	c0 94       	com	r12
    19aa:	c1 1c       	adc	r12, r1
    19ac:	d1 1c       	adc	r13, r1
    19ae:	e1 1c       	adc	r14, r1
    19b0:	f1 1c       	adc	r15, r1
    19b2:	c5 01       	movw	r24, r10
    19b4:	b7 01       	movw	r22, r14
    19b6:	a6 01       	movw	r20, r12
    19b8:	2c 2f       	mov	r18, r28
    19ba:	0e 94 17 0c 	call	0x182e	; 0x182e <putval>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <conv_int+0xf4>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	bf 90       	pop	r11
    19d6:	af 90       	pop	r10
    19d8:	08 95       	ret

000019da <conv_brk>:
    19da:	4f 92       	push	r4
    19dc:	5f 92       	push	r5
    19de:	6f 92       	push	r6
    19e0:	7f 92       	push	r7
    19e2:	8f 92       	push	r8
    19e4:	9f 92       	push	r9
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	a0 97       	sbiw	r28, 0x20	; 32
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	5c 01       	movw	r10, r24
    1a0c:	06 2f       	mov	r16, r22
    1a0e:	7a 01       	movw	r14, r20
    1a10:	69 01       	movw	r12, r18
    1a12:	fe 01       	movw	r30, r28
    1a14:	31 96       	adiw	r30, 0x01	; 1
    1a16:	80 e2       	ldi	r24, 0x20	; 32
    1a18:	df 01       	movw	r26, r30
    1a1a:	1d 92       	st	X+, r1
    1a1c:	8a 95       	dec	r24
    1a1e:	e9 f7       	brne	.-6      	; 0x1a1a <conv_brk+0x40>
    1a20:	d5 01       	movw	r26, r10
    1a22:	13 96       	adiw	r26, 0x03	; 3
    1a24:	1c 91       	ld	r17, X
    1a26:	13 97       	sbiw	r26, 0x03	; 3
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4f 01       	movw	r8, r30
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	68 2e       	mov	r6, r24
    1a38:	71 2c       	mov	r7, r1
    1a3a:	f6 01       	movw	r30, r12
    1a3c:	13 fd       	sbrc	r17, 3
    1a3e:	55 91       	lpm	r21, Z+
    1a40:	13 ff       	sbrs	r17, 3
    1a42:	51 91       	ld	r21, Z+
    1a44:	6f 01       	movw	r12, r30
    1a46:	55 23       	and	r21, r21
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <conv_brk+0x72>
    1a4a:	7b c0       	rjmp	.+246    	; 0x1b42 <conv_brk+0x168>
    1a4c:	5e 35       	cpi	r21, 0x5E	; 94
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <conv_brk+0x7c>
    1a50:	61 15       	cp	r22, r1
    1a52:	71 05       	cpc	r23, r1
    1a54:	49 f1       	breq	.+82     	; 0x1aa8 <conv_brk+0xce>
    1a56:	83 2f       	mov	r24, r19
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	86 17       	cp	r24, r22
    1a5c:	97 07       	cpc	r25, r23
    1a5e:	3c f4       	brge	.+14     	; 0x1a6e <conv_brk+0x94>
    1a60:	5d 35       	cpi	r21, 0x5D	; 93
    1a62:	51 f1       	breq	.+84     	; 0x1ab8 <conv_brk+0xde>
    1a64:	5d 32       	cpi	r21, 0x2D	; 45
    1a66:	19 f4       	brne	.+6      	; 0x1a6e <conv_brk+0x94>
    1a68:	44 23       	and	r20, r20
    1a6a:	01 f1       	breq	.+64     	; 0x1aac <conv_brk+0xd2>
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <conv_brk+0x9a>
    1a6e:	44 23       	and	r20, r20
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <conv_brk+0x9a>
    1a72:	25 2f       	mov	r18, r21
    1a74:	85 2f       	mov	r24, r21
    1a76:	86 95       	lsr	r24
    1a78:	86 95       	lsr	r24
    1a7a:	86 95       	lsr	r24
    1a7c:	f4 01       	movw	r30, r8
    1a7e:	e8 0f       	add	r30, r24
    1a80:	f1 1d       	adc	r31, r1
    1a82:	85 2f       	mov	r24, r21
    1a84:	87 70       	andi	r24, 0x07	; 7
    1a86:	23 01       	movw	r4, r6
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <conv_brk+0xb4>
    1a8a:	44 0c       	add	r4, r4
    1a8c:	55 1c       	adc	r5, r5
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <conv_brk+0xb0>
    1a92:	80 81       	ld	r24, Z
    1a94:	84 29       	or	r24, r4
    1a96:	80 83       	st	Z, r24
    1a98:	52 17       	cp	r21, r18
    1a9a:	51 f0       	breq	.+20     	; 0x1ab0 <conv_brk+0xd6>
    1a9c:	52 17       	cp	r21, r18
    1a9e:	10 f4       	brcc	.+4      	; 0x1aa4 <conv_brk+0xca>
    1aa0:	5f 5f       	subi	r21, 0xFF	; 255
    1aa2:	e8 cf       	rjmp	.-48     	; 0x1a74 <conv_brk+0x9a>
    1aa4:	51 50       	subi	r21, 0x01	; 1
    1aa6:	e6 cf       	rjmp	.-52     	; 0x1a74 <conv_brk+0x9a>
    1aa8:	31 e0       	ldi	r19, 0x01	; 1
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <conv_brk+0xd8>
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <conv_brk+0xd8>
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	6f 5f       	subi	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	c1 cf       	rjmp	.-126    	; 0x1a3a <conv_brk+0x60>
    1ab8:	44 23       	and	r20, r20
    1aba:	19 f0       	breq	.+6      	; 0x1ac2 <conv_brk+0xe8>
    1abc:	8e 81       	ldd	r24, Y+6	; 0x06
    1abe:	80 62       	ori	r24, 0x20	; 32
    1ac0:	8e 83       	std	Y+6, r24	; 0x06
    1ac2:	33 23       	and	r19, r19
    1ac4:	51 f0       	breq	.+20     	; 0x1ada <conv_brk+0x100>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	31 96       	adiw	r30, 0x01	; 1
    1aca:	ce 01       	movw	r24, r28
    1acc:	81 96       	adiw	r24, 0x21	; 33
    1ace:	20 81       	ld	r18, Z
    1ad0:	20 95       	com	r18
    1ad2:	21 93       	st	Z+, r18
    1ad4:	e8 17       	cp	r30, r24
    1ad6:	f9 07       	cpc	r31, r25
    1ad8:	d1 f7       	brne	.-12     	; 0x1ace <conv_brk+0xf4>
    1ada:	11 e0       	ldi	r17, 0x01	; 1
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <conv_brk+0x106>
    1ade:	10 e0       	ldi	r17, 0x00	; 0
    1ae0:	c5 01       	movw	r24, r10
    1ae2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    1ae6:	9c 01       	movw	r18, r24
    1ae8:	97 fd       	sbrc	r25, 7
    1aea:	23 c0       	rjmp	.+70     	; 0x1b32 <conv_brk+0x158>
    1aec:	86 95       	lsr	r24
    1aee:	86 95       	lsr	r24
    1af0:	86 95       	lsr	r24
    1af2:	e1 e0       	ldi	r30, 0x01	; 1
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	ec 0f       	add	r30, r28
    1af8:	fd 1f       	adc	r31, r29
    1afa:	e8 0f       	add	r30, r24
    1afc:	f1 1d       	adc	r31, r1
    1afe:	40 81       	ld	r20, Z
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	c9 01       	movw	r24, r18
    1b04:	87 70       	andi	r24, 0x07	; 7
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <conv_brk+0x134>
    1b0a:	55 95       	asr	r21
    1b0c:	47 95       	ror	r20
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <conv_brk+0x130>
    1b12:	40 fd       	sbrc	r20, 0
    1b14:	05 c0       	rjmp	.+10     	; 0x1b20 <conv_brk+0x146>
    1b16:	c9 01       	movw	r24, r18
    1b18:	b5 01       	movw	r22, r10
    1b1a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ungetc>
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <conv_brk+0x158>
    1b20:	e1 14       	cp	r14, r1
    1b22:	f1 04       	cpc	r15, r1
    1b24:	19 f0       	breq	.+6      	; 0x1b2c <conv_brk+0x152>
    1b26:	d7 01       	movw	r26, r14
    1b28:	2d 93       	st	X+, r18
    1b2a:	7d 01       	movw	r14, r26
    1b2c:	01 50       	subi	r16, 0x01	; 1
    1b2e:	b9 f6       	brne	.-82     	; 0x1ade <conv_brk+0x104>
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <conv_brk+0x15c>
    1b32:	11 23       	and	r17, r17
    1b34:	31 f4       	brne	.+12     	; 0x1b42 <conv_brk+0x168>
    1b36:	e1 14       	cp	r14, r1
    1b38:	f1 04       	cpc	r15, r1
    1b3a:	29 f0       	breq	.+10     	; 0x1b46 <conv_brk+0x16c>
    1b3c:	f7 01       	movw	r30, r14
    1b3e:	10 82       	st	Z, r1
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <conv_brk+0x16c>
    1b42:	cc 24       	eor	r12, r12
    1b44:	dd 24       	eor	r13, r13
    1b46:	c6 01       	movw	r24, r12
    1b48:	a0 96       	adiw	r28, 0x20	; 32
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	9f 90       	pop	r9
    1b6a:	8f 90       	pop	r8
    1b6c:	7f 90       	pop	r7
    1b6e:	6f 90       	pop	r6
    1b70:	5f 90       	pop	r5
    1b72:	4f 90       	pop	r4
    1b74:	08 95       	ret

00001b76 <vfscanf>:
    1b76:	5f 92       	push	r5
    1b78:	6f 92       	push	r6
    1b7a:	7f 92       	push	r7
    1b7c:	8f 92       	push	r8
    1b7e:	9f 92       	push	r9
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	0f 92       	push	r0
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	7c 01       	movw	r14, r24
    1b9c:	5b 01       	movw	r10, r22
    1b9e:	3a 01       	movw	r6, r20
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	17 82       	std	Z+7, r1	; 0x07
    1ba4:	16 82       	std	Z+6, r1	; 0x06
    1ba6:	99 24       	eor	r9, r9
    1ba8:	ef c0       	rjmp	.+478    	; 0x1d88 <vfscanf+0x212>
    1baa:	81 2f       	mov	r24, r17
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <isspace>
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <vfscanf+0x48>
    1bb6:	c7 01       	movw	r24, r14
    1bb8:	0e 94 4f 0c 	call	0x189e	; 0x189e <skip_spaces>
    1bbc:	e5 c0       	rjmp	.+458    	; 0x1d88 <vfscanf+0x212>
    1bbe:	15 32       	cpi	r17, 0x25	; 37
    1bc0:	41 f4       	brne	.+16     	; 0x1bd2 <vfscanf+0x5c>
    1bc2:	f5 01       	movw	r30, r10
    1bc4:	03 fd       	sbrc	r16, 3
    1bc6:	35 91       	lpm	r19, Z+
    1bc8:	03 ff       	sbrs	r16, 3
    1bca:	31 91       	ld	r19, Z+
    1bcc:	5f 01       	movw	r10, r30
    1bce:	35 32       	cpi	r19, 0x25	; 37
    1bd0:	61 f4       	brne	.+24     	; 0x1bea <vfscanf+0x74>
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    1bd8:	97 fd       	sbrc	r25, 7
    1bda:	e2 c0       	rjmp	.+452    	; 0x1da0 <vfscanf+0x22a>
    1bdc:	18 17       	cp	r17, r24
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <vfscanf+0x6c>
    1be0:	d3 c0       	rjmp	.+422    	; 0x1d88 <vfscanf+0x212>
    1be2:	b7 01       	movw	r22, r14
    1be4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ungetc>
    1be8:	dd c0       	rjmp	.+442    	; 0x1da4 <vfscanf+0x22e>
    1bea:	3a 32       	cpi	r19, 0x2A	; 42
    1bec:	41 f4       	brne	.+16     	; 0x1bfe <vfscanf+0x88>
    1bee:	03 fd       	sbrc	r16, 3
    1bf0:	35 91       	lpm	r19, Z+
    1bf2:	03 ff       	sbrs	r16, 3
    1bf4:	31 91       	ld	r19, Z+
    1bf6:	5f 01       	movw	r10, r30
    1bf8:	55 24       	eor	r5, r5
    1bfa:	53 94       	inc	r5
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <vfscanf+0x8a>
    1bfe:	55 24       	eor	r5, r5
    1c00:	88 24       	eor	r8, r8
    1c02:	10 c0       	rjmp	.+32     	; 0x1c24 <vfscanf+0xae>
    1c04:	f2 e0       	ldi	r31, 0x02	; 2
    1c06:	5f 2a       	or	r5, r31
    1c08:	68 2d       	mov	r22, r8
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	40 e2       	ldi	r20, 0x20	; 32
    1c12:	0e 94 23 0c 	call	0x1846	; 0x1846 <mulacc>
    1c16:	86 2e       	mov	r8, r22
    1c18:	f5 01       	movw	r30, r10
    1c1a:	03 fd       	sbrc	r16, 3
    1c1c:	35 91       	lpm	r19, Z+
    1c1e:	03 ff       	sbrs	r16, 3
    1c20:	31 91       	ld	r19, Z+
    1c22:	5f 01       	movw	r10, r30
    1c24:	23 2f       	mov	r18, r19
    1c26:	20 53       	subi	r18, 0x30	; 48
    1c28:	2a 30       	cpi	r18, 0x0A	; 10
    1c2a:	60 f3       	brcs	.-40     	; 0x1c04 <vfscanf+0x8e>
    1c2c:	51 fe       	sbrs	r5, 1
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <vfscanf+0xc0>
    1c30:	88 20       	and	r8, r8
    1c32:	19 f4       	brne	.+6      	; 0x1c3a <vfscanf+0xc4>
    1c34:	b7 c0       	rjmp	.+366    	; 0x1da4 <vfscanf+0x22e>
    1c36:	88 24       	eor	r8, r8
    1c38:	8a 94       	dec	r8
    1c3a:	38 36       	cpi	r19, 0x68	; 104
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <vfscanf+0xce>
    1c3e:	3c 36       	cpi	r19, 0x6C	; 108
    1c40:	99 f4       	brne	.+38     	; 0x1c68 <vfscanf+0xf2>
    1c42:	0a c0       	rjmp	.+20     	; 0x1c58 <vfscanf+0xe2>
    1c44:	f5 01       	movw	r30, r10
    1c46:	03 fd       	sbrc	r16, 3
    1c48:	35 91       	lpm	r19, Z+
    1c4a:	03 ff       	sbrs	r16, 3
    1c4c:	31 91       	ld	r19, Z+
    1c4e:	5f 01       	movw	r10, r30
    1c50:	38 36       	cpi	r19, 0x68	; 104
    1c52:	51 f4       	brne	.+20     	; 0x1c68 <vfscanf+0xf2>
    1c54:	f8 e0       	ldi	r31, 0x08	; 8
    1c56:	5f 2a       	or	r5, r31
    1c58:	44 e0       	ldi	r20, 0x04	; 4
    1c5a:	54 2a       	or	r5, r20
    1c5c:	f5 01       	movw	r30, r10
    1c5e:	03 fd       	sbrc	r16, 3
    1c60:	35 91       	lpm	r19, Z+
    1c62:	03 ff       	sbrs	r16, 3
    1c64:	31 91       	ld	r19, Z+
    1c66:	5f 01       	movw	r10, r30
    1c68:	33 23       	and	r19, r19
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <vfscanf+0xf8>
    1c6c:	9b c0       	rjmp	.+310    	; 0x1da4 <vfscanf+0x22e>
    1c6e:	84 ee       	ldi	r24, 0xE4	; 228
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	63 2f       	mov	r22, r19
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	39 83       	std	Y+1, r19	; 0x01
    1c78:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <strchr_P>
    1c7c:	39 81       	ldd	r19, Y+1	; 0x01
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <vfscanf+0x10e>
    1c82:	90 c0       	rjmp	.+288    	; 0x1da4 <vfscanf+0x22e>
    1c84:	85 2d       	mov	r24, r5
    1c86:	50 fc       	sbrc	r5, 0
    1c88:	08 c0       	rjmp	.+16     	; 0x1c9a <vfscanf+0x124>
    1c8a:	f3 01       	movw	r30, r6
    1c8c:	00 81       	ld	r16, Z
    1c8e:	11 81       	ldd	r17, Z+1	; 0x01
    1c90:	42 e0       	ldi	r20, 0x02	; 2
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	64 0e       	add	r6, r20
    1c96:	75 1e       	adc	r7, r21
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <vfscanf+0x128>
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
    1c9e:	3e 36       	cpi	r19, 0x6E	; 110
    1ca0:	51 f4       	brne	.+20     	; 0x1cb6 <vfscanf+0x140>
    1ca2:	f7 01       	movw	r30, r14
    1ca4:	46 81       	ldd	r20, Z+6	; 0x06
    1ca6:	57 81       	ldd	r21, Z+7	; 0x07
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	c8 01       	movw	r24, r16
    1cae:	25 2d       	mov	r18, r5
    1cb0:	0e 94 17 0c 	call	0x182e	; 0x182e <putval>
    1cb4:	69 c0       	rjmp	.+210    	; 0x1d88 <vfscanf+0x212>
    1cb6:	33 36       	cpi	r19, 0x63	; 99
    1cb8:	91 f4       	brne	.+36     	; 0x1cde <vfscanf+0x168>
    1cba:	81 fd       	sbrc	r24, 1
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <vfscanf+0x14c>
    1cbe:	88 24       	eor	r8, r8
    1cc0:	83 94       	inc	r8
    1cc2:	c7 01       	movw	r24, r14
    1cc4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    1cc8:	97 fd       	sbrc	r25, 7
    1cca:	6a c0       	rjmp	.+212    	; 0x1da0 <vfscanf+0x22a>
    1ccc:	01 15       	cp	r16, r1
    1cce:	11 05       	cpc	r17, r1
    1cd0:	19 f0       	breq	.+6      	; 0x1cd8 <vfscanf+0x162>
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	81 93       	st	Z+, r24
    1cd6:	8f 01       	movw	r16, r30
    1cd8:	8a 94       	dec	r8
    1cda:	99 f7       	brne	.-26     	; 0x1cc2 <vfscanf+0x14c>
    1cdc:	53 c0       	rjmp	.+166    	; 0x1d84 <vfscanf+0x20e>
    1cde:	c7 01       	movw	r24, r14
    1ce0:	3b 35       	cpi	r19, 0x5B	; 91
    1ce2:	51 f4       	brne	.+20     	; 0x1cf8 <vfscanf+0x182>
    1ce4:	68 2d       	mov	r22, r8
    1ce6:	a8 01       	movw	r20, r16
    1ce8:	95 01       	movw	r18, r10
    1cea:	0e 94 ed 0c 	call	0x19da	; 0x19da <conv_brk>
    1cee:	5c 01       	movw	r10, r24
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <vfscanf+0x180>
    1cf4:	47 c0       	rjmp	.+142    	; 0x1d84 <vfscanf+0x20e>
    1cf6:	41 c0       	rjmp	.+130    	; 0x1d7a <vfscanf+0x204>
    1cf8:	39 83       	std	Y+1, r19	; 0x01
    1cfa:	0e 94 4f 0c 	call	0x189e	; 0x189e <skip_spaces>
    1cfe:	39 81       	ldd	r19, Y+1	; 0x01
    1d00:	97 fd       	sbrc	r25, 7
    1d02:	4e c0       	rjmp	.+156    	; 0x1da0 <vfscanf+0x22a>
    1d04:	3f 36       	cpi	r19, 0x6F	; 111
    1d06:	61 f1       	breq	.+88     	; 0x1d60 <vfscanf+0x1ea>
    1d08:	30 37       	cpi	r19, 0x70	; 112
    1d0a:	28 f4       	brcc	.+10     	; 0x1d16 <vfscanf+0x1a0>
    1d0c:	34 36       	cpi	r19, 0x64	; 100
    1d0e:	29 f1       	breq	.+74     	; 0x1d5a <vfscanf+0x1e4>
    1d10:	39 36       	cpi	r19, 0x69	; 105
    1d12:	49 f5       	brne	.+82     	; 0x1d66 <vfscanf+0x1f0>
    1d14:	2a c0       	rjmp	.+84     	; 0x1d6a <vfscanf+0x1f4>
    1d16:	33 37       	cpi	r19, 0x73	; 115
    1d18:	19 f0       	breq	.+6      	; 0x1d20 <vfscanf+0x1aa>
    1d1a:	35 37       	cpi	r19, 0x75	; 117
    1d1c:	21 f5       	brne	.+72     	; 0x1d66 <vfscanf+0x1f0>
    1d1e:	1d c0       	rjmp	.+58     	; 0x1d5a <vfscanf+0x1e4>
    1d20:	c7 01       	movw	r24, r14
    1d22:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fgetc>
    1d26:	6c 01       	movw	r12, r24
    1d28:	97 fd       	sbrc	r25, 7
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <vfscanf+0x1d8>
    1d2c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <isspace>
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	29 f0       	breq	.+10     	; 0x1d3e <vfscanf+0x1c8>
    1d34:	c6 01       	movw	r24, r12
    1d36:	b7 01       	movw	r22, r14
    1d38:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ungetc>
    1d3c:	08 c0       	rjmp	.+16     	; 0x1d4e <vfscanf+0x1d8>
    1d3e:	01 15       	cp	r16, r1
    1d40:	11 05       	cpc	r17, r1
    1d42:	19 f0       	breq	.+6      	; 0x1d4a <vfscanf+0x1d4>
    1d44:	f8 01       	movw	r30, r16
    1d46:	c1 92       	st	Z+, r12
    1d48:	8f 01       	movw	r16, r30
    1d4a:	8a 94       	dec	r8
    1d4c:	49 f7       	brne	.-46     	; 0x1d20 <vfscanf+0x1aa>
    1d4e:	01 15       	cp	r16, r1
    1d50:	11 05       	cpc	r17, r1
    1d52:	c1 f0       	breq	.+48     	; 0x1d84 <vfscanf+0x20e>
    1d54:	f8 01       	movw	r30, r16
    1d56:	10 82       	st	Z, r1
    1d58:	15 c0       	rjmp	.+42     	; 0x1d84 <vfscanf+0x20e>
    1d5a:	f0 e2       	ldi	r31, 0x20	; 32
    1d5c:	5f 2a       	or	r5, r31
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <vfscanf+0x1f4>
    1d60:	40 e1       	ldi	r20, 0x10	; 16
    1d62:	54 2a       	or	r5, r20
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <vfscanf+0x1f4>
    1d66:	50 e4       	ldi	r21, 0x40	; 64
    1d68:	55 2a       	or	r5, r21
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	68 2d       	mov	r22, r8
    1d6e:	a8 01       	movw	r20, r16
    1d70:	25 2d       	mov	r18, r5
    1d72:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <conv_int>
    1d76:	88 23       	and	r24, r24
    1d78:	29 f4       	brne	.+10     	; 0x1d84 <vfscanf+0x20e>
    1d7a:	f7 01       	movw	r30, r14
    1d7c:	83 81       	ldd	r24, Z+3	; 0x03
    1d7e:	80 73       	andi	r24, 0x30	; 48
    1d80:	79 f4       	brne	.+30     	; 0x1da0 <vfscanf+0x22a>
    1d82:	10 c0       	rjmp	.+32     	; 0x1da4 <vfscanf+0x22e>
    1d84:	50 fe       	sbrs	r5, 0
    1d86:	93 94       	inc	r9
    1d88:	f7 01       	movw	r30, r14
    1d8a:	03 81       	ldd	r16, Z+3	; 0x03
    1d8c:	f5 01       	movw	r30, r10
    1d8e:	03 fd       	sbrc	r16, 3
    1d90:	15 91       	lpm	r17, Z+
    1d92:	03 ff       	sbrs	r16, 3
    1d94:	11 91       	ld	r17, Z+
    1d96:	5f 01       	movw	r10, r30
    1d98:	11 23       	and	r17, r17
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <vfscanf+0x228>
    1d9c:	06 cf       	rjmp	.-500    	; 0x1baa <vfscanf+0x34>
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <vfscanf+0x22e>
    1da0:	99 20       	and	r9, r9
    1da2:	19 f0       	breq	.+6      	; 0x1daa <vfscanf+0x234>
    1da4:	89 2d       	mov	r24, r9
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <vfscanf+0x238>
    1daa:	8f ef       	ldi	r24, 0xFF	; 255
    1dac:	9f ef       	ldi	r25, 0xFF	; 255
    1dae:	0f 90       	pop	r0
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	bf 90       	pop	r11
    1dc2:	af 90       	pop	r10
    1dc4:	9f 90       	pop	r9
    1dc6:	8f 90       	pop	r8
    1dc8:	7f 90       	pop	r7
    1dca:	6f 90       	pop	r6
    1dcc:	5f 90       	pop	r5
    1dce:	08 95       	ret

00001dd0 <isspace>:
    1dd0:	91 11       	cpse	r25, r1
    1dd2:	0e c1       	rjmp	.+540    	; 0x1ff0 <__ctype_isfalse>
    1dd4:	80 32       	cpi	r24, 0x20	; 32
    1dd6:	19 f0       	breq	.+6      	; 0x1dde <isspace+0xe>
    1dd8:	89 50       	subi	r24, 0x09	; 9
    1dda:	85 50       	subi	r24, 0x05	; 5
    1ddc:	d0 f7       	brcc	.-12     	; 0x1dd2 <isspace+0x2>
    1dde:	08 95       	ret

00001de0 <strchr_P>:
    1de0:	fc 01       	movw	r30, r24
    1de2:	05 90       	lpm	r0, Z+
    1de4:	06 16       	cp	r0, r22
    1de6:	21 f0       	breq	.+8      	; 0x1df0 <strchr_P+0x10>
    1de8:	00 20       	and	r0, r0
    1dea:	d9 f7       	brne	.-10     	; 0x1de2 <strchr_P+0x2>
    1dec:	c0 01       	movw	r24, r0
    1dee:	08 95       	ret
    1df0:	31 97       	sbiw	r30, 0x01	; 1
    1df2:	cf 01       	movw	r24, r30
    1df4:	08 95       	ret

00001df6 <strnlen_P>:
    1df6:	fc 01       	movw	r30, r24
    1df8:	05 90       	lpm	r0, Z+
    1dfa:	61 50       	subi	r22, 0x01	; 1
    1dfc:	70 40       	sbci	r23, 0x00	; 0
    1dfe:	01 10       	cpse	r0, r1
    1e00:	d8 f7       	brcc	.-10     	; 0x1df8 <strnlen_P+0x2>
    1e02:	80 95       	com	r24
    1e04:	90 95       	com	r25
    1e06:	8e 0f       	add	r24, r30
    1e08:	9f 1f       	adc	r25, r31
    1e0a:	08 95       	ret

00001e0c <strnlen>:
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	61 50       	subi	r22, 0x01	; 1
    1e10:	70 40       	sbci	r23, 0x00	; 0
    1e12:	01 90       	ld	r0, Z+
    1e14:	01 10       	cpse	r0, r1
    1e16:	d8 f7       	brcc	.-10     	; 0x1e0e <strnlen+0x2>
    1e18:	80 95       	com	r24
    1e1a:	90 95       	com	r25
    1e1c:	8e 0f       	add	r24, r30
    1e1e:	9f 1f       	adc	r25, r31
    1e20:	08 95       	ret

00001e22 <fgetc>:
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	ec 01       	movw	r28, r24
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	20 ff       	sbrs	r18, 0
    1e2c:	35 c0       	rjmp	.+106    	; 0x1e98 <fgetc+0x76>
    1e2e:	26 ff       	sbrs	r18, 6
    1e30:	09 c0       	rjmp	.+18     	; 0x1e44 <fgetc+0x22>
    1e32:	2f 7b       	andi	r18, 0xBF	; 191
    1e34:	2b 83       	std	Y+3, r18	; 0x03
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	9f 83       	std	Y+7, r25	; 0x07
    1e3e:	8e 83       	std	Y+6, r24	; 0x06
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 c0       	rjmp	.+80     	; 0x1e94 <fgetc+0x72>
    1e44:	22 ff       	sbrs	r18, 2
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <fgetc+0x44>
    1e48:	e8 81       	ld	r30, Y
    1e4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e4c:	80 81       	ld	r24, Z
    1e4e:	99 27       	eor	r25, r25
    1e50:	87 fd       	sbrc	r24, 7
    1e52:	90 95       	com	r25
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	19 f4       	brne	.+6      	; 0x1e5e <fgetc+0x3c>
    1e58:	20 62       	ori	r18, 0x20	; 32
    1e5a:	2b 83       	std	Y+3, r18	; 0x03
    1e5c:	1d c0       	rjmp	.+58     	; 0x1e98 <fgetc+0x76>
    1e5e:	31 96       	adiw	r30, 0x01	; 1
    1e60:	f9 83       	std	Y+1, r31	; 0x01
    1e62:	e8 83       	st	Y, r30
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <fgetc+0x66>
    1e66:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e68:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	19 95       	eicall
    1e6e:	97 ff       	sbrs	r25, 7
    1e70:	0b c0       	rjmp	.+22     	; 0x1e88 <fgetc+0x66>
    1e72:	2b 81       	ldd	r18, Y+3	; 0x03
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	8f 3f       	cpi	r24, 0xFF	; 255
    1e78:	93 07       	cpc	r25, r19
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <fgetc+0x5e>
    1e7c:	80 e1       	ldi	r24, 0x10	; 16
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <fgetc+0x60>
    1e80:	80 e2       	ldi	r24, 0x20	; 32
    1e82:	82 2b       	or	r24, r18
    1e84:	8b 83       	std	Y+3, r24	; 0x03
    1e86:	08 c0       	rjmp	.+16     	; 0x1e98 <fgetc+0x76>
    1e88:	2e 81       	ldd	r18, Y+6	; 0x06
    1e8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	3f 83       	std	Y+7, r19	; 0x07
    1e92:	2e 83       	std	Y+6, r18	; 0x06
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <fgetc+0x7a>
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <fputc>:
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	8c 01       	movw	r16, r24
    1eac:	eb 01       	movw	r28, r22
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	81 ff       	sbrs	r24, 1
    1eb2:	1b c0       	rjmp	.+54     	; 0x1eea <fputc+0x48>
    1eb4:	82 ff       	sbrs	r24, 2
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <fputc+0x30>
    1eb8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eba:	3f 81       	ldd	r19, Y+7	; 0x07
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec0:	28 17       	cp	r18, r24
    1ec2:	39 07       	cpc	r19, r25
    1ec4:	64 f4       	brge	.+24     	; 0x1ede <fputc+0x3c>
    1ec6:	e8 81       	ld	r30, Y
    1ec8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eca:	01 93       	st	Z+, r16
    1ecc:	f9 83       	std	Y+1, r31	; 0x01
    1ece:	e8 83       	st	Y, r30
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <fputc+0x3c>
    1ed2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ed4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ed6:	80 2f       	mov	r24, r16
    1ed8:	19 95       	eicall
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	31 f4       	brne	.+12     	; 0x1eea <fputc+0x48>
    1ede:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	9f 83       	std	Y+7, r25	; 0x07
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <fputc+0x4c>
    1eea:	0f ef       	ldi	r16, 0xFF	; 255
    1eec:	1f ef       	ldi	r17, 0xFF	; 255
    1eee:	c8 01       	movw	r24, r16
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	08 95       	ret

00001efa <ungetc>:
    1efa:	fb 01       	movw	r30, r22
    1efc:	23 81       	ldd	r18, Z+3	; 0x03
    1efe:	20 ff       	sbrs	r18, 0
    1f00:	13 c0       	rjmp	.+38     	; 0x1f28 <ungetc+0x2e>
    1f02:	26 fd       	sbrc	r18, 6
    1f04:	11 c0       	rjmp	.+34     	; 0x1f28 <ungetc+0x2e>
    1f06:	3f ef       	ldi	r19, 0xFF	; 255
    1f08:	8f 3f       	cpi	r24, 0xFF	; 255
    1f0a:	93 07       	cpc	r25, r19
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <ungetc+0x34>
    1f0e:	82 83       	std	Z+2, r24	; 0x02
    1f10:	92 2f       	mov	r25, r18
    1f12:	90 64       	ori	r25, 0x40	; 64
    1f14:	9f 7d       	andi	r25, 0xDF	; 223
    1f16:	93 83       	std	Z+3, r25	; 0x03
    1f18:	26 81       	ldd	r18, Z+6	; 0x06
    1f1a:	37 81       	ldd	r19, Z+7	; 0x07
    1f1c:	21 50       	subi	r18, 0x01	; 1
    1f1e:	30 40       	sbci	r19, 0x00	; 0
    1f20:	37 83       	std	Z+7, r19	; 0x07
    1f22:	26 83       	std	Z+6, r18	; 0x06
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	08 95       	ret
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	08 95       	ret
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	9f ef       	ldi	r25, 0xFF	; 255
    1f32:	08 95       	ret

00001f34 <__ultoa_invert>:
    1f34:	fa 01       	movw	r30, r20
    1f36:	aa 27       	eor	r26, r26
    1f38:	28 30       	cpi	r18, 0x08	; 8
    1f3a:	51 f1       	breq	.+84     	; 0x1f90 <__ultoa_invert+0x5c>
    1f3c:	20 31       	cpi	r18, 0x10	; 16
    1f3e:	81 f1       	breq	.+96     	; 0x1fa0 <__ultoa_invert+0x6c>
    1f40:	e8 94       	clt
    1f42:	6f 93       	push	r22
    1f44:	6e 7f       	andi	r22, 0xFE	; 254
    1f46:	6e 5f       	subi	r22, 0xFE	; 254
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	af 4f       	sbci	r26, 0xFF	; 255
    1f50:	b1 e0       	ldi	r27, 0x01	; 1
    1f52:	3e d0       	rcall	.+124    	; 0x1fd0 <__ultoa_invert+0x9c>
    1f54:	b4 e0       	ldi	r27, 0x04	; 4
    1f56:	3c d0       	rcall	.+120    	; 0x1fd0 <__ultoa_invert+0x9c>
    1f58:	67 0f       	add	r22, r23
    1f5a:	78 1f       	adc	r23, r24
    1f5c:	89 1f       	adc	r24, r25
    1f5e:	9a 1f       	adc	r25, r26
    1f60:	a1 1d       	adc	r26, r1
    1f62:	68 0f       	add	r22, r24
    1f64:	79 1f       	adc	r23, r25
    1f66:	8a 1f       	adc	r24, r26
    1f68:	91 1d       	adc	r25, r1
    1f6a:	a1 1d       	adc	r26, r1
    1f6c:	6a 0f       	add	r22, r26
    1f6e:	71 1d       	adc	r23, r1
    1f70:	81 1d       	adc	r24, r1
    1f72:	91 1d       	adc	r25, r1
    1f74:	a1 1d       	adc	r26, r1
    1f76:	20 d0       	rcall	.+64     	; 0x1fb8 <__ultoa_invert+0x84>
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <__ultoa_invert+0x48>
    1f7a:	68 94       	set
    1f7c:	3f 91       	pop	r19
    1f7e:	2a e0       	ldi	r18, 0x0A	; 10
    1f80:	26 9f       	mul	r18, r22
    1f82:	11 24       	eor	r1, r1
    1f84:	30 19       	sub	r19, r0
    1f86:	30 5d       	subi	r19, 0xD0	; 208
    1f88:	31 93       	st	Z+, r19
    1f8a:	de f6       	brtc	.-74     	; 0x1f42 <__ultoa_invert+0xe>
    1f8c:	cf 01       	movw	r24, r30
    1f8e:	08 95       	ret
    1f90:	46 2f       	mov	r20, r22
    1f92:	47 70       	andi	r20, 0x07	; 7
    1f94:	40 5d       	subi	r20, 0xD0	; 208
    1f96:	41 93       	st	Z+, r20
    1f98:	b3 e0       	ldi	r27, 0x03	; 3
    1f9a:	0f d0       	rcall	.+30     	; 0x1fba <__ultoa_invert+0x86>
    1f9c:	c9 f7       	brne	.-14     	; 0x1f90 <__ultoa_invert+0x5c>
    1f9e:	f6 cf       	rjmp	.-20     	; 0x1f8c <__ultoa_invert+0x58>
    1fa0:	46 2f       	mov	r20, r22
    1fa2:	4f 70       	andi	r20, 0x0F	; 15
    1fa4:	40 5d       	subi	r20, 0xD0	; 208
    1fa6:	4a 33       	cpi	r20, 0x3A	; 58
    1fa8:	18 f0       	brcs	.+6      	; 0x1fb0 <__ultoa_invert+0x7c>
    1faa:	49 5d       	subi	r20, 0xD9	; 217
    1fac:	31 fd       	sbrc	r19, 1
    1fae:	40 52       	subi	r20, 0x20	; 32
    1fb0:	41 93       	st	Z+, r20
    1fb2:	02 d0       	rcall	.+4      	; 0x1fb8 <__ultoa_invert+0x84>
    1fb4:	a9 f7       	brne	.-22     	; 0x1fa0 <__ultoa_invert+0x6c>
    1fb6:	ea cf       	rjmp	.-44     	; 0x1f8c <__ultoa_invert+0x58>
    1fb8:	b4 e0       	ldi	r27, 0x04	; 4
    1fba:	a6 95       	lsr	r26
    1fbc:	97 95       	ror	r25
    1fbe:	87 95       	ror	r24
    1fc0:	77 95       	ror	r23
    1fc2:	67 95       	ror	r22
    1fc4:	ba 95       	dec	r27
    1fc6:	c9 f7       	brne	.-14     	; 0x1fba <__ultoa_invert+0x86>
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	61 05       	cpc	r22, r1
    1fcc:	71 05       	cpc	r23, r1
    1fce:	08 95       	ret
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	0a 2e       	mov	r0, r26
    1fd6:	06 94       	lsr	r0
    1fd8:	57 95       	ror	r21
    1fda:	47 95       	ror	r20
    1fdc:	37 95       	ror	r19
    1fde:	27 95       	ror	r18
    1fe0:	ba 95       	dec	r27
    1fe2:	c9 f7       	brne	.-14     	; 0x1fd6 <__ultoa_invert+0xa2>
    1fe4:	62 0f       	add	r22, r18
    1fe6:	73 1f       	adc	r23, r19
    1fe8:	84 1f       	adc	r24, r20
    1fea:	95 1f       	adc	r25, r21
    1fec:	a0 1d       	adc	r26, r0
    1fee:	08 95       	ret

00001ff0 <__ctype_isfalse>:
    1ff0:	99 27       	eor	r25, r25
    1ff2:	88 27       	eor	r24, r24

00001ff4 <__ctype_istrue>:
    1ff4:	08 95       	ret

00001ff6 <_exit>:
    1ff6:	f8 94       	cli

00001ff8 <__stop_program>:
    1ff8:	ff cf       	rjmp	.-2      	; 0x1ff8 <__stop_program>

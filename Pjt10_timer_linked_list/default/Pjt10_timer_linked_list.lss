
Pjt10_timer_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800200  00001c5c  00001cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008002be  008002be  00001dae  2**0
                  ALLOC
  3 .stab         000012a8  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000430  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000350  00000000  00000000  00003488  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f8a  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000173d  00000000  00000000  00006762  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b0e  00000000  00000000  00007e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000884  00000000  00000000  000099b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008db  00000000  00000000  0000a234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025c3  00000000  00000000  0000ab0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_25>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_27>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      bc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      cc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      dc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      e0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	12 e0       	ldi	r17, 0x02	; 2
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	ec e5       	ldi	r30, 0x5C	; 92
     108:	fc e1       	ldi	r31, 0x1C	; 28
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	ae 3b       	cpi	r26, 0xBE	; 190
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
     11a:	1b be       	out	0x3b, r1	; 59

0000011c <__do_clear_bss>:
     11c:	13 e0       	ldi	r17, 0x03	; 3
     11e:	ae eb       	ldi	r26, 0xBE	; 190
     120:	b2 e0       	ldi	r27, 0x02	; 2
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a7 35       	cpi	r26, 0x57	; 87
     128:	b1 07       	cpc	r27, r17
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 42 05 	call	0xa84	; 0xa84 <main>
     130:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <is_prime>:
#include "app.h"
#include "linkedlist.h"
#include "timerlinkedlist.h"

int is_prime(int n)
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
	int i; 
	for(i = 2; i<= n/2; i++)
     13e:	62 e0       	ldi	r22, 0x02	; 2
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__divmodhi4>
     146:	eb 01       	movw	r28, r22
     148:	22 e0       	ldi	r18, 0x02	; 2
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	08 c0       	rjmp	.+16     	; 0x15e <is_prime+0x26>
		if ((n%i) == 0)
     14e:	cf 01       	movw	r24, r30
     150:	b9 01       	movw	r22, r18
     152:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__divmodhi4>
     156:	00 97       	sbiw	r24, 0x00	; 0
     158:	41 f0       	breq	.+16     	; 0x16a <is_prime+0x32>
#include "timerlinkedlist.h"

int is_prime(int n)
{
	int i; 
	for(i = 2; i<= n/2; i++)
     15a:	2f 5f       	subi	r18, 0xFF	; 255
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	c2 17       	cp	r28, r18
     160:	d3 07       	cpc	r29, r19
     162:	ac f7       	brge	.-22     	; 0x14e <is_prime+0x16>
		if ((n%i) == 0)
			return(0);
	return (1);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 c0       	rjmp	.+4      	; 0x16e <is_prime+0x36>
int is_prime(int n)
{
	int i; 
	for(i = 2; i<= n/2; i++)
		if ((n%i) == 0)
			return(0);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <app_prime>:

void app_prime(char *ap)
{
     174:	cf 92       	push	r12
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);
     184:	00 97       	sbiw	r24, 0x00	; 0
     186:	21 f0       	breq	.+8      	; 0x190 <app_prime+0x1c>
     188:	0e 94 37 07 	call	0xe6e	; 0xe6e <atoi>
     18c:	7c 01       	movw	r14, r24
     18e:	04 c0       	rjmp	.+8      	; 0x198 <app_prime+0x24>
	return (1);
}

void app_prime(char *ap)
{
	int t = 2000, n, count = 0;
     190:	90 ed       	ldi	r25, 0xD0	; 208
     192:	e9 2e       	mov	r14, r25
     194:	97 e0       	ldi	r25, 0x07	; 7
     196:	f9 2e       	mov	r15, r25
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	10 e0       	ldi	r17, 0x00	; 0
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     19c:	c2 e0       	ldi	r28, 0x02	; 2
     19e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(is_prime(n))
		{
			count++;
			printf("%d is a prime number!\n", n);
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	c8 2e       	mov	r12, r24
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	d8 2e       	mov	r13, r24
{
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     1a8:	16 c0       	rjmp	.+44     	; 0x1d6 <app_prime+0x62>
	{
		if(is_prime(n))
     1aa:	ce 01       	movw	r24, r28
     1ac:	0e 94 9c 00 	call	0x138	; 0x138 <is_prime>
     1b0:	00 97       	sbiw	r24, 0x00	; 0
     1b2:	81 f0       	breq	.+32     	; 0x1d4 <app_prime+0x60>
		{
			count++;
     1b4:	0f 5f       	subi	r16, 0xFF	; 255
     1b6:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!\n", n);
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <app_prime+0x46>
     1ba:	0f 92       	push	r0
     1bc:	ed b7       	in	r30, 0x3d	; 61
     1be:	fe b7       	in	r31, 0x3e	; 62
     1c0:	d2 82       	std	Z+2, r13	; 0x02
     1c2:	c1 82       	std	Z+1, r12	; 0x01
     1c4:	d4 83       	std	Z+4, r29	; 0x04
     1c6:	c3 83       	std	Z+3, r28	; 0x03
     1c8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
{
	int t = 2000, n, count = 0;
	
	if(ap) t = atoi(ap);

	for(n = 2; n <= t; n++)
     1d4:	21 96       	adiw	r28, 0x01	; 1
     1d6:	ec 16       	cp	r14, r28
     1d8:	fd 06       	cpc	r15, r29
     1da:	3c f7       	brge	.-50     	; 0x1aa <app_prime+0x36>
		{
			count++;
			printf("%d is a prime number!\n", n);
		}
	}
	printf("count = %d\n", count);
     1dc:	00 d0       	rcall	.+0      	; 0x1de <app_prime+0x6a>
     1de:	0f 92       	push	r0
     1e0:	87 e1       	ldi	r24, 0x17	; 23
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	ed b7       	in	r30, 0x3d	; 61
     1e6:	fe b7       	in	r31, 0x3e	; 62
     1e8:	92 83       	std	Z+2, r25	; 0x02
     1ea:	81 83       	std	Z+1, r24	; 0x01
     1ec:	14 83       	std	Z+4, r17	; 0x04
     1ee:	03 83       	std	Z+3, r16	; 0x03
     1f0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	08 95       	ret

0000020e <app_list>:

void app_list(char *ap)
{
     20e:	ef 92       	push	r14
     210:	ff 92       	push	r15
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	28 97       	sbiw	r28, 0x08	; 8
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	de bf       	out	0x3e, r29	; 62
     224:	0f be       	out	0x3f, r0	; 63
     226:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	19 f0       	breq	.+6      	; 0x232 <app_list+0x24>
     22c:	fc 01       	movw	r30, r24
     22e:	10 81       	ld	r17, Z
     230:	01 c0       	rjmp	.+2      	; 0x234 <app_list+0x26>
	printf("count = %d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     232:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     234:	23 e2       	ldi	r18, 0x23	; 35
     236:	e2 2e       	mov	r14, r18
     238:	22 e0       	ldi	r18, 0x02	; 2
     23a:	f2 2e       	mov	r15, r18
     23c:	0f 92       	push	r0
     23e:	0f 92       	push	r0
     240:	ed b7       	in	r30, 0x3d	; 61
     242:	fe b7       	in	r31, 0x3e	; 62
     244:	f2 82       	std	Z+2, r15	; 0x02
     246:	e1 82       	std	Z+1, r14	; 0x01
     248:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>
		if(fgets(buf, 8, stdin) == NULL)
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	40 91 51 03 	lds	r20, 0x0351
     254:	50 91 52 03 	lds	r21, 0x0352
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	68 e0       	ldi	r22, 0x08	; 8
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	0e 94 92 07 	call	0xf24	; 0xf24 <fgets>
     264:	00 97       	sbiw	r24, 0x00	; 0
     266:	c9 f0       	breq	.+50     	; 0x29a <app_list+0x8c>
			break;
		np = get_node();
     268:	0e 94 9b 02 	call	0x536	; 0x536 <get_node>
		np->data = buf[0];
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
     272:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     274:	18 36       	cpi	r17, 0x68	; 104
     276:	29 f0       	breq	.+10     	; 0x282 <app_list+0x74>
     278:	14 37       	cpi	r17, 0x74	; 116
     27a:	31 f0       	breq	.+12     	; 0x288 <app_list+0x7a>
     27c:	14 36       	cpi	r17, 0x64	; 100
     27e:	51 f4       	brne	.+20     	; 0x294 <app_list+0x86>
     280:	06 c0       	rjmp	.+12     	; 0x28e <app_list+0x80>
			case 'h' : insert_node_head(np); break;
     282:	0e 94 a3 02 	call	0x546	; 0x546 <insert_node_head>
     286:	da cf       	rjmp	.-76     	; 0x23c <app_list+0x2e>
			case 't' : insert_node_tail(np); break;
     288:	0e 94 b8 02 	call	0x570	; 0x570 <insert_node_tail>
     28c:	d7 cf       	rjmp	.-82     	; 0x23c <app_list+0x2e>
			case 'd' : insert_node_desc(np); break;		
     28e:	0e 94 06 03 	call	0x60c	; 0x60c <insert_node_desc>
     292:	d4 cf       	rjmp	.-88     	; 0x23c <app_list+0x2e>
			default : insert_node_ascn(np);
     294:	0e 94 cf 02 	call	0x59e	; 0x59e <insert_node_ascn>
     298:	d1 cf       	rjmp	.-94     	; 0x23c <app_list+0x2e>
		}
	}
	tour_list();
     29a:	0e 94 3d 03 	call	0x67a	; 0x67a <tour_list>
	free_list();
     29e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <free_list>
}
     2a2:	28 96       	adiw	r28, 0x08	; 8
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	ff 90       	pop	r15
     2b6:	ef 90       	pop	r14
     2b8:	08 95       	ret

000002ba <app_timer>:

void app_timer(char *ap)
{
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	62 97       	sbiw	r28, 0x12	; 18
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     2d2:	06 e2       	ldi	r16, 0x26	; 38
     2d4:	12 e0       	ldi	r17, 0x02	; 2
     2d6:	0f 92       	push	r0
     2d8:	0f 92       	push	r0
     2da:	ed b7       	in	r30, 0x3d	; 61
     2dc:	fe b7       	in	r31, 0x3e	; 62
     2de:	12 83       	std	Z+2, r17	; 0x02
     2e0:	01 83       	std	Z+1, r16	; 0x01
     2e2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	40 91 51 03 	lds	r20, 0x0351
     2ee:	50 91 52 03 	lds	r21, 0x0352
     2f2:	ce 01       	movw	r24, r28
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	68 e0       	ldi	r22, 0x08	; 8
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	0e 94 92 07 	call	0xf24	; 0xf24 <fgets>
     2fe:	00 97       	sbiw	r24, 0x00	; 0
     300:	61 f0       	breq	.+24     	; 0x31a <app_timer+0x60>
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 37 07 	call	0xe6e	; 0xe6e <atoi>
     30a:	bc 01       	movw	r22, r24
     30c:	00 97       	sbiw	r24, 0x00	; 0
     30e:	29 f0       	breq	.+10     	; 0x31a <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     310:	ce 01       	movw	r24, r28
     312:	09 96       	adiw	r24, 0x09	; 9
     314:	0e 94 cf 04 	call	0x99e	; 0x99e <insert_timer>
	}
     318:	de cf       	rjmp	.-68     	; 0x2d6 <app_timer+0x1c>
	tour_timer();
     31a:	0e 94 77 04 	call	0x8ee	; 0x8ee <tour_timer>
	free_timer();
     31e:	0e 94 b9 04 	call	0x972	; 0x972 <free_timer>
}
     322:	62 96       	adiw	r28, 0x12	; 18
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	08 95       	ret

00000338 <app_cal>:

void app_cal(char *ap)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	00 d0       	rcall	.+0      	; 0x33e <app_cal+0x6>
     33e:	0f 92       	push	r0
     340:	0f 92       	push	r0
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
	int x;
	int y;
	char c;
	sscanf(ap, "%d%c%d", &x, &c, &y);
     346:	2d b7       	in	r18, 0x3d	; 61
     348:	3e b7       	in	r19, 0x3e	; 62
     34a:	2a 50       	subi	r18, 0x0A	; 10
     34c:	30 40       	sbci	r19, 0x00	; 0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	3e bf       	out	0x3e, r19	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	2d bf       	out	0x3d, r18	; 61
     358:	ed b7       	in	r30, 0x3d	; 61
     35a:	fe b7       	in	r31, 0x3e	; 62
     35c:	31 96       	adiw	r30, 0x01	; 1
     35e:	ad b7       	in	r26, 0x3d	; 61
     360:	be b7       	in	r27, 0x3e	; 62
     362:	12 96       	adiw	r26, 0x02	; 2
     364:	9c 93       	st	X, r25
     366:	8e 93       	st	-X, r24
     368:	11 97       	sbiw	r26, 0x01	; 1
     36a:	8a e2       	ldi	r24, 0x2A	; 42
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	93 83       	std	Z+3, r25	; 0x03
     370:	82 83       	std	Z+2, r24	; 0x02
     372:	ce 01       	movw	r24, r28
     374:	04 96       	adiw	r24, 0x04	; 4
     376:	95 83       	std	Z+5, r25	; 0x05
     378:	84 83       	std	Z+4, r24	; 0x04
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	97 83       	std	Z+7, r25	; 0x07
     380:	86 83       	std	Z+6, r24	; 0x06
     382:	ce 01       	movw	r24, r28
     384:	02 96       	adiw	r24, 0x02	; 2
     386:	91 87       	std	Z+9, r25	; 0x09
     388:	80 87       	std	Z+8, r24	; 0x08
     38a:	0e 94 1f 08 	call	0x103e	; 0x103e <sscanf>
	if(c == '+') printf("%d", x + y);
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	ed b7       	in	r30, 0x3d	; 61
     392:	fe b7       	in	r31, 0x3e	; 62
     394:	3a 96       	adiw	r30, 0x0a	; 10
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	fe bf       	out	0x3e, r31	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	ed bf       	out	0x3d, r30	; 61
     3a0:	8b 32       	cpi	r24, 0x2B	; 43
     3a2:	89 f4       	brne	.+34     	; 0x3c6 <app_cal+0x8e>
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <app_cal+0x6e>
     3a6:	0f 92       	push	r0
     3a8:	81 e3       	ldi	r24, 0x31	; 49
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	ad b7       	in	r26, 0x3d	; 61
     3ae:	be b7       	in	r27, 0x3e	; 62
     3b0:	12 96       	adiw	r26, 0x02	; 2
     3b2:	9c 93       	st	X, r25
     3b4:	8e 93       	st	-X, r24
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	9d 81       	ldd	r25, Y+5	; 0x05
     3bc:	2a 81       	ldd	r18, Y+2	; 0x02
     3be:	3b 81       	ldd	r19, Y+3	; 0x03
     3c0:	82 0f       	add	r24, r18
     3c2:	93 1f       	adc	r25, r19
     3c4:	41 c0       	rjmp	.+130    	; 0x448 <app_cal+0x110>
	else if(c == '-') printf("%d", x-y);
     3c6:	8d 32       	cpi	r24, 0x2D	; 45
     3c8:	89 f4       	brne	.+34     	; 0x3ec <app_cal+0xb4>
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <app_cal+0x94>
     3cc:	0f 92       	push	r0
     3ce:	81 e3       	ldi	r24, 0x31	; 49
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	ed b7       	in	r30, 0x3d	; 61
     3d4:	fe b7       	in	r31, 0x3e	; 62
     3d6:	92 83       	std	Z+2, r25	; 0x02
     3d8:	81 83       	std	Z+1, r24	; 0x01
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	9d 81       	ldd	r25, Y+5	; 0x05
     3de:	2a 81       	ldd	r18, Y+2	; 0x02
     3e0:	3b 81       	ldd	r19, Y+3	; 0x03
     3e2:	82 1b       	sub	r24, r18
     3e4:	93 0b       	sbc	r25, r19
     3e6:	94 83       	std	Z+4, r25	; 0x04
     3e8:	83 83       	std	Z+3, r24	; 0x03
     3ea:	32 c0       	rjmp	.+100    	; 0x450 <app_cal+0x118>
	else if(c == '/') printf("%d", x/y);
     3ec:	8f 32       	cpi	r24, 0x2F	; 47
     3ee:	a9 f4       	brne	.+42     	; 0x41a <app_cal+0xe2>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <app_cal+0xba>
     3f2:	0f 92       	push	r0
     3f4:	81 e3       	ldi	r24, 0x31	; 49
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	ad b7       	in	r26, 0x3d	; 61
     3fa:	be b7       	in	r27, 0x3e	; 62
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	9c 93       	st	X, r25
     400:	8e 93       	st	-X, r24
     402:	11 97       	sbiw	r26, 0x01	; 1
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	9d 81       	ldd	r25, Y+5	; 0x05
     408:	6a 81       	ldd	r22, Y+2	; 0x02
     40a:	7b 81       	ldd	r23, Y+3	; 0x03
     40c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__divmodhi4>
     410:	ed b7       	in	r30, 0x3d	; 61
     412:	fe b7       	in	r31, 0x3e	; 62
     414:	74 83       	std	Z+4, r23	; 0x04
     416:	63 83       	std	Z+3, r22	; 0x03
     418:	1b c0       	rjmp	.+54     	; 0x450 <app_cal+0x118>
	else if(c == '*') printf("%d", x*y);
     41a:	8a 32       	cpi	r24, 0x2A	; 42
     41c:	f9 f4       	brne	.+62     	; 0x45c <app_cal+0x124>
     41e:	00 d0       	rcall	.+0      	; 0x420 <app_cal+0xe8>
     420:	0f 92       	push	r0
     422:	81 e3       	ldi	r24, 0x31	; 49
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	ad b7       	in	r26, 0x3d	; 61
     428:	be b7       	in	r27, 0x3e	; 62
     42a:	12 96       	adiw	r26, 0x02	; 2
     42c:	9c 93       	st	X, r25
     42e:	8e 93       	st	-X, r24
     430:	11 97       	sbiw	r26, 0x01	; 1
     432:	4c 81       	ldd	r20, Y+4	; 0x04
     434:	5d 81       	ldd	r21, Y+5	; 0x05
     436:	2a 81       	ldd	r18, Y+2	; 0x02
     438:	3b 81       	ldd	r19, Y+3	; 0x03
     43a:	42 9f       	mul	r20, r18
     43c:	c0 01       	movw	r24, r0
     43e:	43 9f       	mul	r20, r19
     440:	90 0d       	add	r25, r0
     442:	52 9f       	mul	r21, r18
     444:	90 0d       	add	r25, r0
     446:	11 24       	eor	r1, r1
     448:	14 96       	adiw	r26, 0x04	; 4
     44a:	9c 93       	st	X, r25
     44c:	8e 93       	st	-X, r24
     44e:	13 97       	sbiw	r26, 0x03	; 3
     450:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <__vector_27>:
#include <avr/interrupt.h>
#include "interrupt.h"
#include "uart.h"

ISR(USART0_TX_vect)
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	0b b6       	in	r0, 0x3b	; 59
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	2f 93       	push	r18
     47c:	3f 93       	push	r19
     47e:	4f 93       	push	r20
     480:	5f 93       	push	r21
     482:	6f 93       	push	r22
     484:	7f 93       	push	r23
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     492:	0e 94 ed 03 	call	0x7da	; 0x7da <qo_delete>
     496:	88 23       	and	r24, r24
     498:	19 f4       	brne	.+6      	; 0x4a0 <__vector_27+0x34>
		uart_busy = 0;
     49a:	10 92 c4 02 	sts	0x02C4, r1
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__vector_27+0x38>
	else
		UDR0 = ch;
     4a0:	80 93 c6 00 	sts	0x00C6, r24
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0b be       	out	0x3b, r0	; 59
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_25>:

ISR(USART0_RX_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	0b b6       	in	r0, 0x3b	; 59
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	cf 93       	push	r28
     4ee:	ef 93       	push	r30
     4f0:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     4f2:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch != EOT)
     4f6:	c4 30       	cpi	r28, 0x04	; 4
     4f8:	31 f0       	breq	.+12     	; 0x506 <__vector_25+0x3c>
	{
		if(ch == '\r')
     4fa:	cd 30       	cpi	r28, 0x0D	; 13
     4fc:	09 f4       	brne	.+2      	; 0x500 <__vector_25+0x36>
			ch = '\n';
     4fe:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     500:	8c 2f       	mov	r24, r28
     502:	0e 94 61 04 	call	0x8c2	; 0x8c2 <uart_echo>
	}


	qi_insert(ch);
     506:	8c 2f       	mov	r24, r28
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 8c 03 	call	0x718	; 0x718 <qi_insert>
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	cf 91       	pop	r28
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	7f 91       	pop	r23
     51e:	6f 91       	pop	r22
     520:	5f 91       	pop	r21
     522:	4f 91       	pop	r20
     524:	3f 91       	pop	r19
     526:	2f 91       	pop	r18
     528:	0f 90       	pop	r0
     52a:	0b be       	out	0x3b, r0	; 59
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 08 06 	call	0xc10	; 0xc10 <malloc>
	return(cp);
}
     53e:	08 95       	ret

00000540 <free_node>:

void free_node(struct node *np)
{
	free(np);
     540:	0e 94 9e 06 	call	0xd3c	; 0xd3c <free>
}
     544:	08 95       	ret

00000546 <insert_node_head>:

void insert_node_head(struct node *np)
{
     546:	fc 01       	movw	r30, r24
	if(!Head) {
     548:	80 91 be 02 	lds	r24, 0x02BE
     54c:	90 91 bf 02 	lds	r25, 0x02BF
     550:	00 97       	sbiw	r24, 0x00	; 0
     552:	39 f4       	brne	.+14     	; 0x562 <insert_node_head+0x1c>
		Head = np;
     554:	f0 93 bf 02 	sts	0x02BF, r31
     558:	e0 93 be 02 	sts	0x02BE, r30
		np->link = NULL;
     55c:	13 82       	std	Z+3, r1	; 0x03
     55e:	12 82       	std	Z+2, r1	; 0x02
     560:	08 95       	ret
	}
	else {
		np->link = Head;
     562:	93 83       	std	Z+3, r25	; 0x03
     564:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     566:	f0 93 bf 02 	sts	0x02BF, r31
     56a:	e0 93 be 02 	sts	0x02BE, r30
     56e:	08 95       	ret

00000570 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     570:	e0 91 be 02 	lds	r30, 0x02BE
     574:	f0 91 bf 02 	lds	r31, 0x02BF
     578:	30 97       	sbiw	r30, 0x00	; 0
     57a:	31 f4       	brne	.+12     	; 0x588 <insert_node_tail+0x18>
		Head = np;
     57c:	90 93 bf 02 	sts	0x02BF, r25
     580:	80 93 be 02 	sts	0x02BE, r24
     584:	08 c0       	rjmp	.+16     	; 0x596 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link);
     586:	f9 01       	movw	r30, r18
     588:	22 81       	ldd	r18, Z+2	; 0x02
     58a:	33 81       	ldd	r19, Z+3	; 0x03
     58c:	21 15       	cp	r18, r1
     58e:	31 05       	cpc	r19, r1
     590:	d1 f7       	brne	.-12     	; 0x586 <insert_node_tail+0x16>
		cp->link = np;
     592:	93 83       	std	Z+3, r25	; 0x03
     594:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     596:	fc 01       	movw	r30, r24
     598:	13 82       	std	Z+3, r1	; 0x03
     59a:	12 82       	std	Z+2, r1	; 0x02
}
     59c:	08 95       	ret

0000059e <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	fc 01       	movw	r30, r24
	struct node *cp, *pp;

	if(!Head) {
     5a4:	20 91 be 02 	lds	r18, 0x02BE
     5a8:	30 91 bf 02 	lds	r19, 0x02BF
     5ac:	21 15       	cp	r18, r1
     5ae:	31 05       	cpc	r19, r1
     5b0:	31 f0       	breq	.+12     	; 0x5be <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link);
     5b2:	40 81       	ld	r20, Z
     5b4:	51 81       	ldd	r21, Z+1	; 0x01
     5b6:	d9 01       	movw	r26, r18
     5b8:	c0 e0       	ldi	r28, 0x00	; 0
     5ba:	d0 e0       	ldi	r29, 0x00	; 0
     5bc:	0f c0       	rjmp	.+30     	; 0x5dc <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;

	if(!Head) {
		Head = np;
     5be:	90 93 bf 02 	sts	0x02BF, r25
     5c2:	80 93 be 02 	sts	0x02BE, r24
		np->link = NULL;
     5c6:	13 82       	std	Z+3, r1	; 0x03
     5c8:	12 82       	std	Z+2, r1	; 0x02
     5ca:	1d c0       	rjmp	.+58     	; 0x606 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link);
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	8d 91       	ld	r24, X+
     5d0:	9c 91       	ld	r25, X
     5d2:	13 97       	sbiw	r26, 0x03	; 3
     5d4:	ed 01       	movw	r28, r26
     5d6:	00 97       	sbiw	r24, 0x00	; 0
     5d8:	39 f0       	breq	.+14     	; 0x5e8 <insert_node_ascn+0x4a>
     5da:	dc 01       	movw	r26, r24
     5dc:	8d 91       	ld	r24, X+
     5de:	9c 91       	ld	r25, X
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	84 17       	cp	r24, r20
     5e4:	95 07       	cpc	r25, r21
     5e6:	94 f3       	brlt	.-28     	; 0x5cc <insert_node_ascn+0x2e>

		if(pp == NULL) {
     5e8:	20 97       	sbiw	r28, 0x00	; 0
     5ea:	39 f4       	brne	.+14     	; 0x5fa <insert_node_ascn+0x5c>
			np->link = Head;
     5ec:	33 83       	std	Z+3, r19	; 0x03
     5ee:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     5f0:	f0 93 bf 02 	sts	0x02BF, r31
     5f4:	e0 93 be 02 	sts	0x02BE, r30
     5f8:	06 c0       	rjmp	.+12     	; 0x606 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	9b 81       	ldd	r25, Y+3	; 0x03
     5fe:	93 83       	std	Z+3, r25	; 0x03
     600:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     602:	fb 83       	std	Y+3, r31	; 0x03
     604:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <insert_node_desc>:

void insert_node_desc(struct node *np)
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	fc 01       	movw	r30, r24
	struct node *cp, *pp;

	if(!Head) {
     612:	20 91 be 02 	lds	r18, 0x02BE
     616:	30 91 bf 02 	lds	r19, 0x02BF
     61a:	21 15       	cp	r18, r1
     61c:	31 05       	cpc	r19, r1
     61e:	31 f0       	breq	.+12     	; 0x62c <insert_node_desc+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     620:	40 81       	ld	r20, Z
     622:	51 81       	ldd	r21, Z+1	; 0x01
     624:	d9 01       	movw	r26, r18
     626:	c0 e0       	ldi	r28, 0x00	; 0
     628:	d0 e0       	ldi	r29, 0x00	; 0
     62a:	0f c0       	rjmp	.+30     	; 0x64a <insert_node_desc+0x3e>
void insert_node_desc(struct node *np)
{
	struct node *cp, *pp;

	if(!Head) {
		Head = np;
     62c:	90 93 bf 02 	sts	0x02BF, r25
     630:	80 93 be 02 	sts	0x02BE, r24
		np->link = NULL;
     634:	13 82       	std	Z+3, r1	; 0x03
     636:	12 82       	std	Z+2, r1	; 0x02
     638:	1d c0       	rjmp	.+58     	; 0x674 <insert_node_desc+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     63a:	12 96       	adiw	r26, 0x02	; 2
     63c:	8d 91       	ld	r24, X+
     63e:	9c 91       	ld	r25, X
     640:	13 97       	sbiw	r26, 0x03	; 3
     642:	ed 01       	movw	r28, r26
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	39 f0       	breq	.+14     	; 0x656 <insert_node_desc+0x4a>
     648:	dc 01       	movw	r26, r24
     64a:	8d 91       	ld	r24, X+
     64c:	9c 91       	ld	r25, X
     64e:	11 97       	sbiw	r26, 0x01	; 1
     650:	48 17       	cp	r20, r24
     652:	59 07       	cpc	r21, r25
     654:	94 f3       	brlt	.-28     	; 0x63a <insert_node_desc+0x2e>

		if(pp == NULL) {
     656:	20 97       	sbiw	r28, 0x00	; 0
     658:	39 f4       	brne	.+14     	; 0x668 <insert_node_desc+0x5c>
			np->link = Head;
     65a:	33 83       	std	Z+3, r19	; 0x03
     65c:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     65e:	f0 93 bf 02 	sts	0x02BF, r31
     662:	e0 93 be 02 	sts	0x02BE, r30
     666:	06 c0       	rjmp	.+12     	; 0x674 <insert_node_desc+0x68>
		} else {
			np->link = pp->link;
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	9b 81       	ldd	r25, Y+3	; 0x03
     66c:	93 83       	std	Z+3, r25	; 0x03
     66e:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     670:	fb 83       	std	Y+3, r31	; 0x03
     672:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <tour_list>:

void tour_list()
{
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     682:	8a e0       	ldi	r24, 0x0A	; 10
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <putchar>
	for(cp = Head; cp != NULL; cp = cp->link) 
     68a:	c0 91 be 02 	lds	r28, 0x02BE
     68e:	d0 91 bf 02 	lds	r29, 0x02BF
		printf("-->%c ", cp->data);
     692:	04 e3       	ldi	r16, 0x34	; 52
     694:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp != NULL; cp = cp->link) 
     696:	13 c0       	rjmp	.+38     	; 0x6be <tour_list+0x44>
		printf("-->%c ", cp->data);
     698:	00 d0       	rcall	.+0      	; 0x69a <tour_list+0x20>
     69a:	0f 92       	push	r0
     69c:	ed b7       	in	r30, 0x3d	; 61
     69e:	fe b7       	in	r31, 0x3e	; 62
     6a0:	12 83       	std	Z+2, r17	; 0x02
     6a2:	01 83       	std	Z+1, r16	; 0x01
     6a4:	88 81       	ld	r24, Y
     6a6:	99 81       	ldd	r25, Y+1	; 0x01
     6a8:	94 83       	std	Z+4, r25	; 0x04
     6aa:	83 83       	std	Z+3, r24	; 0x03
     6ac:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp != NULL; cp = cp->link) 
     6b0:	0a 80       	ldd	r0, Y+2	; 0x02
     6b2:	db 81       	ldd	r29, Y+3	; 0x03
     6b4:	c0 2d       	mov	r28, r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	20 97       	sbiw	r28, 0x00	; 0
     6c0:	59 f7       	brne	.-42     	; 0x698 <tour_list+0x1e>
		printf("-->%c ", cp->data);
		printf("\n");
     6c2:	8a e0       	ldi	r24, 0x0A	; 10
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <putchar>
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <free_list>:

void free_list()
{
	struct node *cp;

	for( ; Head != NULL; ) {
     6d4:	09 c0       	rjmp	.+18     	; 0x6e8 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     6d6:	fc 01       	movw	r30, r24
     6d8:	22 81       	ldd	r18, Z+2	; 0x02
     6da:	33 81       	ldd	r19, Z+3	; 0x03
     6dc:	30 93 bf 02 	sts	0x02BF, r19
     6e0:	20 93 be 02 	sts	0x02BE, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     6e4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <free>

void free_list()
{
	struct node *cp;

	for( ; Head != NULL; ) {
     6e8:	80 91 be 02 	lds	r24, 0x02BE
     6ec:	90 91 bf 02 	lds	r25, 0x02BF
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	89 f7       	brne	.-30     	; 0x6d6 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     6f4:	08 95       	ret

000006f6 <q_init>:

int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     6f6:	10 92 0a 03 	sts	0x030A, r1
     6fa:	10 92 09 03 	sts	0x0309, r1
     6fe:	10 92 08 03 	sts	0x0308, r1
     702:	10 92 07 03 	sts	0x0307, r1
     706:	10 92 0c 03 	sts	0x030C, r1
     70a:	10 92 0b 03 	sts	0x030B, r1
     70e:	10 92 c6 02 	sts	0x02C6, r1
     712:	10 92 c5 02 	sts	0x02C5, r1
}
     716:	08 95       	ret

00000718 <qi_insert>:

int qi_insert(char ch)
{
     718:	48 2f       	mov	r20, r24
	if((ri+1) % QI_SIZE == fi)
     71a:	20 91 0b 03 	lds	r18, 0x030B
     71e:	30 91 0c 03 	lds	r19, 0x030C
     722:	2f 5f       	subi	r18, 0xFF	; 255
     724:	3f 4f       	sbci	r19, 0xFF	; 255
     726:	c9 01       	movw	r24, r18
     728:	60 e4       	ldi	r22, 0x40	; 64
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__divmodhi4>
     730:	9c 01       	movw	r18, r24
     732:	80 91 c5 02 	lds	r24, 0x02C5
     736:	90 91 c6 02 	lds	r25, 0x02C6
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	59 f0       	breq	.+22     	; 0x756 <qi_insert+0x3e>
		return 0; //full
	ri = (ri + 1) % QI_SIZE;
     740:	30 93 0c 03 	sts	0x030C, r19
     744:	20 93 0b 03 	sts	0x030B, r18
	qi[ri] = ch;
     748:	23 5f       	subi	r18, 0xF3	; 243
     74a:	3c 4f       	sbci	r19, 0xFC	; 252
     74c:	f9 01       	movw	r30, r18
     74e:	40 83       	st	Z, r20
	return 1;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri+1) % QI_SIZE == fi)
		return 0; //full
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     75a:	08 95       	ret

0000075c <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     75c:	80 91 c5 02 	lds	r24, 0x02C5
     760:	90 91 c6 02 	lds	r25, 0x02C6
     764:	20 91 0b 03 	lds	r18, 0x030B
     768:	30 91 0c 03 	lds	r19, 0x030C
     76c:	28 17       	cp	r18, r24
     76e:	39 07       	cpc	r19, r25
     770:	79 f0       	breq	.+30     	; 0x790 <qi_delete+0x34>
		return 0;
	fi = (fi+1) % QI_SIZE;
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	60 e4       	ldi	r22, 0x40	; 64
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__divmodhi4>
     77c:	90 93 c6 02 	sts	0x02C6, r25
     780:	80 93 c5 02 	sts	0x02C5, r24

	return qi[fi];
     784:	83 5f       	subi	r24, 0xF3	; 243
     786:	9c 4f       	sbci	r25, 0xFC	; 252
     788:	fc 01       	movw	r30, r24
     78a:	80 81       	ld	r24, Z
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi+1) % QI_SIZE;

	return qi[fi];
}
     794:	08 95       	ret

00000796 <qo_insert>:

int qo_insert(char ch)
{
     796:	48 2f       	mov	r20, r24
	if((ro+1) % QO_SIZE == fo)
     798:	20 91 09 03 	lds	r18, 0x0309
     79c:	30 91 0a 03 	lds	r19, 0x030A
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	c9 01       	movw	r24, r18
     7a6:	60 e4       	ldi	r22, 0x40	; 64
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__divmodhi4>
     7ae:	9c 01       	movw	r18, r24
     7b0:	80 91 07 03 	lds	r24, 0x0307
     7b4:	90 91 08 03 	lds	r25, 0x0308
     7b8:	28 17       	cp	r18, r24
     7ba:	39 07       	cpc	r19, r25
     7bc:	59 f0       	breq	.+22     	; 0x7d4 <qo_insert+0x3e>
		return 0; //full
	ro = (ro + 1) % QO_SIZE;
     7be:	30 93 0a 03 	sts	0x030A, r19
     7c2:	20 93 09 03 	sts	0x0309, r18
	qo[ro] = ch;
     7c6:	29 53       	subi	r18, 0x39	; 57
     7c8:	3d 4f       	sbci	r19, 0xFD	; 253
     7ca:	f9 01       	movw	r30, r18
     7cc:	40 83       	st	Z, r20

	return 1;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro+1) % QO_SIZE == fo)
		return 0; //full
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;

	return 1;
}
     7d8:	08 95       	ret

000007da <qo_delete>:

int qo_delete()
{
	if (ro == fo)
     7da:	80 91 07 03 	lds	r24, 0x0307
     7de:	90 91 08 03 	lds	r25, 0x0308
     7e2:	20 91 09 03 	lds	r18, 0x0309
     7e6:	30 91 0a 03 	lds	r19, 0x030A
     7ea:	28 17       	cp	r18, r24
     7ec:	39 07       	cpc	r19, r25
     7ee:	79 f0       	breq	.+30     	; 0x80e <qo_delete+0x34>
		return 0;
	fo = (fo+1) % QO_SIZE;
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	60 e4       	ldi	r22, 0x40	; 64
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__divmodhi4>
     7fa:	90 93 08 03 	sts	0x0308, r25
     7fe:	80 93 07 03 	sts	0x0307, r24

	return qo[fo];
     802:	89 53       	subi	r24, 0x39	; 57
     804:	9d 4f       	sbci	r25, 0xFD	; 253
     806:	fc 01       	movw	r30, r24
     808:	80 81       	ld	r24, Z
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	08 95       	ret
}

int qo_delete()
{
	if (ro == fo)
		return 0;
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo+1) % QO_SIZE;

	return qo[fo];
}
     812:	08 95       	ret

00000814 <uart_getchar>:
{
	char ch;

	do
	{
		cli();
     814:	f8 94       	cli
		ch = qi_delete();
     816:	0e 94 ae 03 	call	0x75c	; 0x75c <qi_delete>
		sei();
     81a:	78 94       	sei
	}while(ch == 0);
     81c:	88 23       	and	r24, r24
     81e:	d1 f3       	breq	.-12     	; 0x814 <uart_getchar>

	if(ch == EOT)
     820:	84 30       	cpi	r24, 0x04	; 4
     822:	11 f0       	breq	.+4      	; 0x828 <uart_getchar+0x14>
		return -1;
	else
		return ch;
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	08 95       	ret
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if(ch == EOT)
		return -1;
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	9f ef       	ldi	r25, 0xFF	; 255
		return ch;

	if(ch == BS)
		ch = ch-1;
		return ch;
}
     82c:	08 95       	ret

0000082e <uart_putchar>:
	sbi(UCSR0B, RXEN0); // RX enable
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     82e:	cf 93       	push	r28
     830:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     832:	8a 30       	cpi	r24, 0x0A	; 10
     834:	19 f4       	brne	.+6      	; 0x83c <uart_putchar+0xe>
		uart_putchar('\r', stream);
     836:	8d e0       	ldi	r24, 0x0D	; 13
     838:	0e 94 17 04 	call	0x82e	; 0x82e <uart_putchar>
	
	cli();
     83c:	f8 94       	cli

	if(!uart_busy)
     83e:	80 91 c4 02 	lds	r24, 0x02C4
     842:	88 23       	and	r24, r24
     844:	59 f4       	brne	.+22     	; 0x85c <uart_putchar+0x2e>
	{
		UDR0 = ch;
     846:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 c4 02 	sts	0x02C4, r24
     850:	0a c0       	rjmp	.+20     	; 0x866 <uart_putchar+0x38>
	}
	else
	{
		while(qo_insert(ch) == 0)
		{
			sei();
     852:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     854:	86 ef       	ldi	r24, 0xF6	; 246
     856:	8a 95       	dec	r24
     858:	f1 f7       	brne	.-4      	; 0x856 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     85a:	f8 94       	cli
		UDR0 = ch;
		uart_busy = 1;
	}
	else
	{
		while(qo_insert(ch) == 0)
     85c:	8c 2f       	mov	r24, r28
     85e:	0e 94 cb 03 	call	0x796	; 0x796 <qo_insert>
     862:	00 97       	sbiw	r24, 0x00	; 0
     864:	b1 f3       	breq	.-20     	; 0x852 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     866:	78 94       	sei

	return 1;
}
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init()
{
	stdout = &Mystdout;
     870:	8e e9       	ldi	r24, 0x9E	; 158
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	90 93 54 03 	sts	0x0354, r25
     878:	80 93 53 03 	sts	0x0353, r24
	stdin = &Mystdin;
     87c:	80 e9       	ldi	r24, 0x90	; 144
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	90 93 52 03 	sts	0x0352, r25
     884:	80 93 51 03 	sts	0x0351, r24
	uart_busy = 0; // false
     888:	10 92 c4 02 	sts	0x02C4, r1
	q_init();
     88c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <q_init>
	UBRR0H = 0x00;
     890:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07; // 115.2KBPS
     894:	87 e0       	ldi	r24, 0x07	; 7
     896:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     89a:	e0 ec       	ldi	r30, 0xC0	; 192
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	82 60       	ori	r24, 0x02	; 2
     8a2:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     8a4:	e1 ec       	ldi	r30, 0xC1	; 193
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	88 60       	ori	r24, 0x08	; 8
     8ac:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     8ae:	80 81       	ld	r24, Z
     8b0:	80 64       	ori	r24, 0x40	; 64
     8b2:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0); // RX enable
     8b4:	80 81       	ld	r24, Z
     8b6:	80 61       	ori	r24, 0x10	; 16
     8b8:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     8ba:	80 81       	ld	r24, Z
     8bc:	80 68       	ori	r24, 0x80	; 128
     8be:	80 83       	st	Z, r24
}
     8c0:	08 95       	ret

000008c2 <uart_echo>:
		ch = ch-1;
		return ch;
}

void uart_echo(char ch)
{
     8c2:	cf 93       	push	r28
     8c4:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     8c6:	8a 30       	cpi	r24, 0x0A	; 10
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <uart_echo+0xe>
		uart_echo('\r');
     8ca:	8d e0       	ldi	r24, 0x0D	; 13
     8cc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <uart_echo>
	if(!uart_busy)
     8d0:	80 91 c4 02 	lds	r24, 0x02C4
     8d4:	88 23       	and	r24, r24
     8d6:	31 f4       	brne	.+12     	; 0x8e4 <uart_echo+0x22>
	{
		UDR0 = ch;
     8d8:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 c4 02 	sts	0x02C4, r24
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     8e4:	8c 2f       	mov	r24, r28
     8e6:	0e 94 cb 03 	call	0x796	; 0x796 <qo_insert>
}
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <tour_timer>:
		tp->link = cp;
	}
}

void tour_timer()
{
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     8fa:	8a e0       	ldi	r24, 0x0A	; 10
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     902:	c0 91 c0 02 	lds	r28, 0x02C0
     906:	d0 91 c1 02 	lds	r29, 0x02C1
}

void tour_timer()
{
	struct timer *cp;
	int total = 0;
     90a:	00 e0       	ldi	r16, 0x00	; 0
     90c:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     90e:	8c ea       	ldi	r24, 0xAC	; 172
     910:	e8 2e       	mov	r14, r24
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     916:	20 c0       	rjmp	.+64     	; 0x958 <tour_timer+0x6a>
		total += cp->time;
     918:	88 81       	ld	r24, Y
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	08 0f       	add	r16, r24
     91e:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     920:	00 d0       	rcall	.+0      	; 0x922 <tour_timer+0x34>
     922:	00 d0       	rcall	.+0      	; 0x924 <tour_timer+0x36>
     924:	ed b7       	in	r30, 0x3d	; 61
     926:	fe b7       	in	r31, 0x3e	; 62
     928:	31 96       	adiw	r30, 0x01	; 1
     92a:	ad b7       	in	r26, 0x3d	; 61
     92c:	be b7       	in	r27, 0x3e	; 62
     92e:	12 96       	adiw	r26, 0x02	; 2
     930:	fc 92       	st	X, r15
     932:	ee 92       	st	-X, r14
     934:	11 97       	sbiw	r26, 0x01	; 1
     936:	93 83       	std	Z+3, r25	; 0x03
     938:	82 83       	std	Z+2, r24	; 0x02
     93a:	15 83       	std	Z+5, r17	; 0x05
     93c:	04 83       	std	Z+4, r16	; 0x04
     93e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     942:	0c 84       	ldd	r0, Y+12	; 0x0c
     944:	dd 85       	ldd	r29, Y+13	; 0x0d
     946:	c0 2d       	mov	r28, r0
     948:	8d b7       	in	r24, 0x3d	; 61
     94a:	9e b7       	in	r25, 0x3e	; 62
     94c:	06 96       	adiw	r24, 0x06	; 6
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	9e bf       	out	0x3e, r25	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	8d bf       	out	0x3d, r24	; 61
     958:	20 97       	sbiw	r28, 0x00	; 0
     95a:	f1 f6       	brne	.-68     	; 0x918 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     95c:	8a e0       	ldi	r24, 0x0A	; 10
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <putchar>
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	08 95       	ret

00000972 <free_timer>:

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     972:	09 c0       	rjmp	.+18     	; 0x986 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     974:	fc 01       	movw	r30, r24
     976:	24 85       	ldd	r18, Z+12	; 0x0c
     978:	35 85       	ldd	r19, Z+13	; 0x0d
     97a:	30 93 c1 02 	sts	0x02C1, r19
     97e:	20 93 c0 02 	sts	0x02C0, r18
		free(cp);
     982:	0e 94 9e 06 	call	0xd3c	; 0xd3c <free>
}

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     986:	80 91 c0 02 	lds	r24, 0x02C0
     98a:	90 91 c1 02 	lds	r25, 0x02C1
     98e:	00 97       	sbiw	r24, 0x00	; 0
     990:	89 f7       	brne	.-30     	; 0x974 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     992:	08 95       	ret

00000994 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;
	tp = (struct timer *)malloc(sizeof(*tp));
     994:	8e e0       	ldi	r24, 0x0E	; 14
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 08 06 	call	0xc10	; 0xc10 <malloc>
	return(tp);
}
     99c:	08 95       	ret

0000099e <insert_timer>:
#include "timerlinkedlist.h"

struct timer *Thead = NULL;
void insert_timer(struct task *tskp, int ms)
{
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	f8 2e       	mov	r15, r24
     9ac:	e9 2e       	mov	r14, r25
     9ae:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     9b0:	0e 94 ca 04 	call	0x994	; 0x994 <get_timer>
     9b4:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     9b6:	dc 01       	movw	r26, r24
     9b8:	12 96       	adiw	r26, 0x02	; 2
     9ba:	ef 2d       	mov	r30, r15
     9bc:	fe 2d       	mov	r31, r14
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	01 90       	ld	r0, Z+
     9c2:	0d 92       	st	X+, r0
     9c4:	81 50       	subi	r24, 0x01	; 1
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <insert_timer+0x22>
	tp->time = ms;
     9c8:	19 83       	std	Y+1, r17	; 0x01
     9ca:	08 83       	st	Y, r16

	if(Thead == NULL) {
     9cc:	e0 91 c0 02 	lds	r30, 0x02C0
     9d0:	f0 91 c1 02 	lds	r31, 0x02C1
     9d4:	30 97       	sbiw	r30, 0x00	; 0
     9d6:	29 f4       	brne	.+10     	; 0x9e2 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     9d8:	d0 93 c1 02 	sts	0x02C1, r29
     9dc:	c0 93 c0 02 	sts	0x02C0, r28
     9e0:	2f c0       	rjmp	.+94     	; 0xa40 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     9ec:	fd 01       	movw	r30, r26
		total += cp->time;
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	28 0f       	add	r18, r24
     9f4:	39 1f       	adc	r19, r25
		if(total >= ms) 
     9f6:	20 17       	cp	r18, r16
     9f8:	31 07       	cpc	r19, r17
     9fa:	34 f4       	brge	.+12     	; 0xa08 <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     9fc:	a4 85       	ldd	r26, Z+12	; 0x0c
     9fe:	b5 85       	ldd	r27, Z+13	; 0x0d
     a00:	af 01       	movw	r20, r30
     a02:	10 97       	sbiw	r26, 0x00	; 0
     a04:	99 f7       	brne	.-26     	; 0x9ec <insert_timer+0x4e>
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms) 
     a08:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}
	if(pp == NULL) {
     a0a:	41 15       	cp	r20, r1
     a0c:	51 05       	cpc	r21, r1
     a0e:	79 f4       	brne	.+30     	; 0xa2e <insert_timer+0x90>
		cp->time -= tp->time;
     a10:	8d 91       	ld	r24, X+
     a12:	9c 91       	ld	r25, X
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	80 1b       	sub	r24, r16
     a18:	91 0b       	sbc	r25, r17
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	9c 93       	st	X, r25
     a1e:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     a20:	bd 87       	std	Y+13, r27	; 0x0d
     a22:	ac 87       	std	Y+12, r26	; 0x0c
     a24:	d0 93 c1 02 	sts	0x02C1, r29
     a28:	c0 93 c0 02 	sts	0x02C0, r28
     a2c:	24 c0       	rjmp	.+72     	; 0xa76 <insert_timer+0xd8>
	}
	else if(cp == NULL) {
     a2e:	10 97       	sbiw	r26, 0x00	; 0
     a30:	51 f4       	brne	.+20     	; 0xa46 <insert_timer+0xa8>
		tp->time -= total;
     a32:	02 1b       	sub	r16, r18
     a34:	13 0b       	sbc	r17, r19
     a36:	19 83       	std	Y+1, r17	; 0x01
     a38:	08 83       	st	Y, r16
		pp->link = tp;
     a3a:	fa 01       	movw	r30, r20
     a3c:	d5 87       	std	Z+13, r29	; 0x0d
     a3e:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     a40:	1d 86       	std	Y+13, r1	; 0x0d
     a42:	1c 86       	std	Y+12, r1	; 0x0c
     a44:	18 c0       	rjmp	.+48     	; 0xa76 <insert_timer+0xd8>
	}	
	else {
		total -= cp->time;
     a46:	8d 91       	ld	r24, X+
     a48:	9c 91       	ld	r25, X
     a4a:	11 97       	sbiw	r26, 0x01	; 1
     a4c:	b9 01       	movw	r22, r18
     a4e:	68 1b       	sub	r22, r24
     a50:	79 0b       	sbc	r23, r25
		tp->time -= total;
     a52:	98 01       	movw	r18, r16
     a54:	26 1b       	sub	r18, r22
     a56:	37 0b       	sbc	r19, r23
     a58:	39 83       	std	Y+1, r19	; 0x01
     a5a:	28 83       	st	Y, r18
		cp->time -= tp->time;
     a5c:	8d 91       	ld	r24, X+
     a5e:	9c 91       	ld	r25, X
     a60:	11 97       	sbiw	r26, 0x01	; 1
     a62:	82 1b       	sub	r24, r18
     a64:	93 0b       	sbc	r25, r19
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	8e 93       	st	-X, r24
		pp->link = tp;
     a6c:	fa 01       	movw	r30, r20
     a6e:	d5 87       	std	Z+13, r29	; 0x0d
     a70:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     a72:	bd 87       	std	Y+13, r27	; 0x0d
     a74:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <main>:
#include "linkedlist.h"
#include "timerlinkedlist.h"


int main()
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	c5 58       	subi	r28, 0x85	; 133
     a8e:	d0 40       	sbci	r29, 0x00	; 0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
	int x, y;
	char k;

	char *sp = "123*456";

	scanf(sp, "%d%c%d", &x, &k, &y);
     a9a:	8d b7       	in	r24, 0x3d	; 61
     a9c:	9e b7       	in	r25, 0x3e	; 62
     a9e:	0a 97       	sbiw	r24, 0x0a	; 10
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	9e bf       	out	0x3e, r25	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	8d bf       	out	0x3d, r24	; 61
     aaa:	ed b7       	in	r30, 0x3d	; 61
     aac:	fe b7       	in	r31, 0x3e	; 62
     aae:	31 96       	adiw	r30, 0x01	; 1
     ab0:	8b e3       	ldi	r24, 0x3B	; 59
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	ad b7       	in	r26, 0x3d	; 61
     ab6:	be b7       	in	r27, 0x3e	; 62
     ab8:	12 96       	adiw	r26, 0x02	; 2
     aba:	9c 93       	st	X, r25
     abc:	8e 93       	st	-X, r24
     abe:	11 97       	sbiw	r26, 0x01	; 1
     ac0:	83 e4       	ldi	r24, 0x43	; 67
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	93 83       	std	Z+3, r25	; 0x03
     ac6:	82 83       	std	Z+2, r24	; 0x02
     ac8:	ce 01       	movw	r24, r28
     aca:	04 96       	adiw	r24, 0x04	; 4
     acc:	95 83       	std	Z+5, r25	; 0x05
     ace:	84 83       	std	Z+4, r24	; 0x04
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	97 83       	std	Z+7, r25	; 0x07
     ad6:	86 83       	std	Z+6, r24	; 0x06
     ad8:	ce 01       	movw	r24, r28
     ada:	02 96       	adiw	r24, 0x02	; 2
     adc:	91 87       	std	Z+9, r25	; 0x09
     ade:	80 87       	std	Z+8, r24	; 0x08
     ae0:	0e 94 0d 08 	call	0x101a	; 0x101a <scanf>

	uart_init();	
     ae4:	ed b7       	in	r30, 0x3d	; 61
     ae6:	fe b7       	in	r31, 0x3e	; 62
     ae8:	3a 96       	adiw	r30, 0x0a	; 10
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	fe bf       	out	0x3e, r31	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	ed bf       	out	0x3d, r30	; 61
     af4:	0e 94 38 04 	call	0x870	; 0x870 <uart_init>
	sei();
     af8:	78 94       	sei

	while(1)
	{
		printf("$ ");
     afa:	8a e4       	ldi	r24, 0x4A	; 74
     afc:	c8 2e       	mov	r12, r24
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	d8 2e       	mov	r13, r24
     b02:	0f 92       	push	r0
     b04:	0f 92       	push	r0
     b06:	ad b7       	in	r26, 0x3d	; 61
     b08:	be b7       	in	r27, 0x3e	; 62
     b0a:	12 96       	adiw	r26, 0x02	; 2
     b0c:	dc 92       	st	X, r13
     b0e:	ce 92       	st	-X, r12
     b10:	11 97       	sbiw	r26, 0x01	; 1
     b12:	0e 94 c6 07 	call	0xf8c	; 0xf8c <printf>

		if(fgets(cmd, sizeof(cmd), stdin)== NULL)
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	40 91 51 03 	lds	r20, 0x0351
     b1e:	50 91 52 03 	lds	r21, 0x0352
     b22:	ce 01       	movw	r24, r28
     b24:	06 96       	adiw	r24, 0x06	; 6
     b26:	60 e8       	ldi	r22, 0x80	; 128
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	0e 94 92 07 	call	0xf24	; 0xf24 <fgets>
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	09 f4       	brne	.+2      	; 0xb34 <main+0xb0>
     b32:	42 c0       	rjmp	.+132    	; 0xbb8 <main+0x134>
			break;
		if((cp = strtok(cmd, "\n\r\t ")) == NULL) continue;
     b34:	ce 01       	movw	r24, r28
     b36:	06 96       	adiw	r24, 0x06	; 6
     b38:	6d e4       	ldi	r22, 0x4D	; 77
     b3a:	72 e0       	ldi	r23, 0x02	; 2
     b3c:	0e 94 55 07 	call	0xeaa	; 0xeaa <strtok>
     b40:	8c 01       	movw	r16, r24
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	f1 f2       	breq	.-68     	; 0xb02 <main+0x7e>
		ap = strtok(NULL, "\n\r\t ");
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	6d e4       	ldi	r22, 0x4D	; 77
     b4c:	72 e0       	ldi	r23, 0x02	; 2
     b4e:	0e 94 55 07 	call	0xeaa	; 0xeaa <strtok>
     b52:	7c 01       	movw	r14, r24
		if(!strcmp(cmd,"prime")) app_prime(ap);
     b54:	ce 01       	movw	r24, r28
     b56:	06 96       	adiw	r24, 0x06	; 6
     b58:	62 e5       	ldi	r22, 0x52	; 82
     b5a:	72 e0       	ldi	r23, 0x02	; 2
     b5c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <strcmp>
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	21 f4       	brne	.+8      	; 0xb6c <main+0xe8>
     b64:	c7 01       	movw	r24, r14
     b66:	0e 94 ba 00 	call	0x174	; 0x174 <app_prime>
     b6a:	cb cf       	rjmp	.-106    	; 0xb02 <main+0x7e>
		else if(!strcmp(cp, "list")) app_list(ap);
     b6c:	c8 01       	movw	r24, r16
     b6e:	68 e5       	ldi	r22, 0x58	; 88
     b70:	72 e0       	ldi	r23, 0x02	; 2
     b72:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <strcmp>
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	21 f4       	brne	.+8      	; 0xb82 <main+0xfe>
     b7a:	c7 01       	movw	r24, r14
     b7c:	0e 94 07 01 	call	0x20e	; 0x20e <app_list>
     b80:	c0 cf       	rjmp	.-128    	; 0xb02 <main+0x7e>
		else if(!strcmp(cp, "timer")) app_timer(ap);
     b82:	c8 01       	movw	r24, r16
     b84:	6d e5       	ldi	r22, 0x5D	; 93
     b86:	72 e0       	ldi	r23, 0x02	; 2
     b88:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <strcmp>
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	21 f4       	brne	.+8      	; 0xb98 <main+0x114>
     b90:	c7 01       	movw	r24, r14
     b92:	0e 94 5d 01 	call	0x2ba	; 0x2ba <app_timer>
     b96:	b5 cf       	rjmp	.-150    	; 0xb02 <main+0x7e>
		else if(!strcmp(cp, "cal")) {
     b98:	c8 01       	movw	r24, r16
     b9a:	63 e6       	ldi	r22, 0x63	; 99
     b9c:	72 e0       	ldi	r23, 0x02	; 2
     b9e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <strcmp>
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	21 f4       	brne	.+8      	; 0xbae <main+0x12a>
			app_cal(ap);
     ba6:	c7 01       	movw	r24, r14
     ba8:	0e 94 9c 01 	call	0x338	; 0x338 <app_cal>
     bac:	aa cf       	rjmp	.-172    	; 0xb02 <main+0x7e>
		}
		else printf("Unknown commamnd...\n");
     bae:	87 e6       	ldi	r24, 0x67	; 103
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	0e 94 df 07 	call	0xfbe	; 0xfbe <puts>
     bb6:	a5 cf       	rjmp	.-182    	; 0xb02 <main+0x7e>


	}

	printf("logout, good bye !!!\n");
     bb8:	8b e7       	ldi	r24, 0x7B	; 123
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 df 07 	call	0xfbe	; 0xfbe <puts>
     bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <main+0x13c>

00000bc2 <__divmodhi4>:
     bc2:	97 fb       	bst	r25, 7
     bc4:	09 2e       	mov	r0, r25
     bc6:	07 26       	eor	r0, r23
     bc8:	0a d0       	rcall	.+20     	; 0xbde <__divmodhi4_neg1>
     bca:	77 fd       	sbrc	r23, 7
     bcc:	04 d0       	rcall	.+8      	; 0xbd6 <__divmodhi4_neg2>
     bce:	0c d0       	rcall	.+24     	; 0xbe8 <__udivmodhi4>
     bd0:	06 d0       	rcall	.+12     	; 0xbde <__divmodhi4_neg1>
     bd2:	00 20       	and	r0, r0
     bd4:	1a f4       	brpl	.+6      	; 0xbdc <__divmodhi4_exit>

00000bd6 <__divmodhi4_neg2>:
     bd6:	70 95       	com	r23
     bd8:	61 95       	neg	r22
     bda:	7f 4f       	sbci	r23, 0xFF	; 255

00000bdc <__divmodhi4_exit>:
     bdc:	08 95       	ret

00000bde <__divmodhi4_neg1>:
     bde:	f6 f7       	brtc	.-4      	; 0xbdc <__divmodhi4_exit>
     be0:	90 95       	com	r25
     be2:	81 95       	neg	r24
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	08 95       	ret

00000be8 <__udivmodhi4>:
     be8:	aa 1b       	sub	r26, r26
     bea:	bb 1b       	sub	r27, r27
     bec:	51 e1       	ldi	r21, 0x11	; 17
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <__udivmodhi4_ep>

00000bf0 <__udivmodhi4_loop>:
     bf0:	aa 1f       	adc	r26, r26
     bf2:	bb 1f       	adc	r27, r27
     bf4:	a6 17       	cp	r26, r22
     bf6:	b7 07       	cpc	r27, r23
     bf8:	10 f0       	brcs	.+4      	; 0xbfe <__udivmodhi4_ep>
     bfa:	a6 1b       	sub	r26, r22
     bfc:	b7 0b       	sbc	r27, r23

00000bfe <__udivmodhi4_ep>:
     bfe:	88 1f       	adc	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	5a 95       	dec	r21
     c04:	a9 f7       	brne	.-22     	; 0xbf0 <__udivmodhi4_loop>
     c06:	80 95       	com	r24
     c08:	90 95       	com	r25
     c0a:	bc 01       	movw	r22, r24
     c0c:	cd 01       	movw	r24, r26
     c0e:	08 95       	ret

00000c10 <malloc>:
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ac 01       	movw	r20, r24
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	91 05       	cpc	r25, r1
     c1a:	10 f4       	brcc	.+4      	; 0xc20 <malloc+0x10>
     c1c:	42 e0       	ldi	r20, 0x02	; 2
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	e0 91 4f 03 	lds	r30, 0x034F
     c24:	f0 91 50 03 	lds	r31, 0x0350
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	24 c0       	rjmp	.+72     	; 0xc7a <malloc+0x6a>
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	84 17       	cp	r24, r20
     c38:	95 07       	cpc	r25, r21
     c3a:	d0 f0       	brcs	.+52     	; 0xc70 <malloc+0x60>
     c3c:	84 17       	cp	r24, r20
     c3e:	95 07       	cpc	r25, r21
     c40:	71 f4       	brne	.+28     	; 0xc5e <malloc+0x4e>
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	10 97       	sbiw	r26, 0x00	; 0
     c48:	29 f0       	breq	.+10     	; 0xc54 <malloc+0x44>
     c4a:	13 96       	adiw	r26, 0x03	; 3
     c4c:	9c 93       	st	X, r25
     c4e:	8e 93       	st	-X, r24
     c50:	12 97       	sbiw	r26, 0x02	; 2
     c52:	2c c0       	rjmp	.+88     	; 0xcac <malloc+0x9c>
     c54:	90 93 50 03 	sts	0x0350, r25
     c58:	80 93 4f 03 	sts	0x034F, r24
     c5c:	27 c0       	rjmp	.+78     	; 0xcac <malloc+0x9c>
     c5e:	21 15       	cp	r18, r1
     c60:	31 05       	cpc	r19, r1
     c62:	19 f0       	breq	.+6      	; 0xc6a <malloc+0x5a>
     c64:	82 17       	cp	r24, r18
     c66:	93 07       	cpc	r25, r19
     c68:	18 f4       	brcc	.+6      	; 0xc70 <malloc+0x60>
     c6a:	9c 01       	movw	r18, r24
     c6c:	bd 01       	movw	r22, r26
     c6e:	ef 01       	movw	r28, r30
     c70:	92 81       	ldd	r25, Z+2	; 0x02
     c72:	83 81       	ldd	r24, Z+3	; 0x03
     c74:	df 01       	movw	r26, r30
     c76:	e9 2f       	mov	r30, r25
     c78:	f8 2f       	mov	r31, r24
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	d1 f6       	brne	.-76     	; 0xc32 <malloc+0x22>
     c7e:	21 15       	cp	r18, r1
     c80:	31 05       	cpc	r19, r1
     c82:	f9 f0       	breq	.+62     	; 0xcc2 <malloc+0xb2>
     c84:	c9 01       	movw	r24, r18
     c86:	84 1b       	sub	r24, r20
     c88:	95 0b       	sbc	r25, r21
     c8a:	84 30       	cpi	r24, 0x04	; 4
     c8c:	91 05       	cpc	r25, r1
     c8e:	80 f4       	brcc	.+32     	; 0xcb0 <malloc+0xa0>
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	61 15       	cp	r22, r1
     c96:	71 05       	cpc	r23, r1
     c98:	21 f0       	breq	.+8      	; 0xca2 <malloc+0x92>
     c9a:	fb 01       	movw	r30, r22
     c9c:	93 83       	std	Z+3, r25	; 0x03
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <malloc+0x9a>
     ca2:	90 93 50 03 	sts	0x0350, r25
     ca6:	80 93 4f 03 	sts	0x034F, r24
     caa:	fe 01       	movw	r30, r28
     cac:	32 96       	adiw	r30, 0x02	; 2
     cae:	42 c0       	rjmp	.+132    	; 0xd34 <malloc+0x124>
     cb0:	fe 01       	movw	r30, r28
     cb2:	e8 0f       	add	r30, r24
     cb4:	f9 1f       	adc	r31, r25
     cb6:	41 93       	st	Z+, r20
     cb8:	51 93       	st	Z+, r21
     cba:	02 97       	sbiw	r24, 0x02	; 2
     cbc:	99 83       	std	Y+1, r25	; 0x01
     cbe:	88 83       	st	Y, r24
     cc0:	39 c0       	rjmp	.+114    	; 0xd34 <malloc+0x124>
     cc2:	80 91 4d 03 	lds	r24, 0x034D
     cc6:	90 91 4e 03 	lds	r25, 0x034E
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	41 f4       	brne	.+16     	; 0xcde <malloc+0xce>
     cce:	80 91 b9 02 	lds	r24, 0x02B9
     cd2:	90 91 ba 02 	lds	r25, 0x02BA
     cd6:	90 93 4e 03 	sts	0x034E, r25
     cda:	80 93 4d 03 	sts	0x034D, r24
     cde:	20 91 b7 02 	lds	r18, 0x02B7
     ce2:	30 91 b8 02 	lds	r19, 0x02B8
     ce6:	21 15       	cp	r18, r1
     ce8:	31 05       	cpc	r19, r1
     cea:	41 f4       	brne	.+16     	; 0xcfc <malloc+0xec>
     cec:	2d b7       	in	r18, 0x3d	; 61
     cee:	3e b7       	in	r19, 0x3e	; 62
     cf0:	80 91 bb 02 	lds	r24, 0x02BB
     cf4:	90 91 bc 02 	lds	r25, 0x02BC
     cf8:	28 1b       	sub	r18, r24
     cfa:	39 0b       	sbc	r19, r25
     cfc:	e0 91 4d 03 	lds	r30, 0x034D
     d00:	f0 91 4e 03 	lds	r31, 0x034E
     d04:	e2 17       	cp	r30, r18
     d06:	f3 07       	cpc	r31, r19
     d08:	98 f4       	brcc	.+38     	; 0xd30 <malloc+0x120>
     d0a:	2e 1b       	sub	r18, r30
     d0c:	3f 0b       	sbc	r19, r31
     d0e:	24 17       	cp	r18, r20
     d10:	35 07       	cpc	r19, r21
     d12:	70 f0       	brcs	.+28     	; 0xd30 <malloc+0x120>
     d14:	ca 01       	movw	r24, r20
     d16:	02 96       	adiw	r24, 0x02	; 2
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	48 f0       	brcs	.+18     	; 0xd30 <malloc+0x120>
     d1e:	8e 0f       	add	r24, r30
     d20:	9f 1f       	adc	r25, r31
     d22:	90 93 4e 03 	sts	0x034E, r25
     d26:	80 93 4d 03 	sts	0x034D, r24
     d2a:	41 93       	st	Z+, r20
     d2c:	51 93       	st	Z+, r21
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <malloc+0x124>
     d30:	e0 e0       	ldi	r30, 0x00	; 0
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	cf 01       	movw	r24, r30
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <free>:
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	9c 01       	movw	r18, r24
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	09 f4       	brne	.+2      	; 0xd4c <free+0x10>
     d4a:	8c c0       	rjmp	.+280    	; 0xe64 <free+0x128>
     d4c:	dc 01       	movw	r26, r24
     d4e:	12 97       	sbiw	r26, 0x02	; 2
     d50:	13 96       	adiw	r26, 0x03	; 3
     d52:	1c 92       	st	X, r1
     d54:	1e 92       	st	-X, r1
     d56:	12 97       	sbiw	r26, 0x02	; 2
     d58:	60 91 4f 03 	lds	r22, 0x034F
     d5c:	70 91 50 03 	lds	r23, 0x0350
     d60:	61 15       	cp	r22, r1
     d62:	71 05       	cpc	r23, r1
     d64:	89 f4       	brne	.+34     	; 0xd88 <free+0x4c>
     d66:	8d 91       	ld	r24, X+
     d68:	9c 91       	ld	r25, X
     d6a:	11 97       	sbiw	r26, 0x01	; 1
     d6c:	82 0f       	add	r24, r18
     d6e:	93 1f       	adc	r25, r19
     d70:	20 91 4d 03 	lds	r18, 0x034D
     d74:	30 91 4e 03 	lds	r19, 0x034E
     d78:	28 17       	cp	r18, r24
     d7a:	39 07       	cpc	r19, r25
     d7c:	69 f5       	brne	.+90     	; 0xdd8 <free+0x9c>
     d7e:	b0 93 4e 03 	sts	0x034E, r27
     d82:	a0 93 4d 03 	sts	0x034D, r26
     d86:	6e c0       	rjmp	.+220    	; 0xe64 <free+0x128>
     d88:	fb 01       	movw	r30, r22
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <free+0x56>
     d90:	fc 01       	movw	r30, r24
     d92:	ea 17       	cp	r30, r26
     d94:	fb 07       	cpc	r31, r27
     d96:	30 f4       	brcc	.+12     	; 0xda4 <free+0x68>
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	af 01       	movw	r20, r30
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	b9 f7       	brne	.-18     	; 0xd90 <free+0x54>
     da2:	1f c0       	rjmp	.+62     	; 0xde2 <free+0xa6>
     da4:	e9 01       	movw	r28, r18
     da6:	22 97       	sbiw	r28, 0x02	; 2
     da8:	fb 83       	std	Y+3, r31	; 0x03
     daa:	ea 83       	std	Y+2, r30	; 0x02
     dac:	08 81       	ld	r16, Y
     dae:	19 81       	ldd	r17, Y+1	; 0x01
     db0:	c9 01       	movw	r24, r18
     db2:	80 0f       	add	r24, r16
     db4:	91 1f       	adc	r25, r17
     db6:	8e 17       	cp	r24, r30
     db8:	9f 07       	cpc	r25, r31
     dba:	59 f4       	brne	.+22     	; 0xdd2 <free+0x96>
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	80 0f       	add	r24, r16
     dc2:	91 1f       	adc	r25, r17
     dc4:	02 96       	adiw	r24, 0x02	; 2
     dc6:	99 83       	std	Y+1, r25	; 0x01
     dc8:	88 83       	st	Y, r24
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	9b 83       	std	Y+3, r25	; 0x03
     dd0:	8a 83       	std	Y+2, r24	; 0x02
     dd2:	41 15       	cp	r20, r1
     dd4:	51 05       	cpc	r21, r1
     dd6:	29 f4       	brne	.+10     	; 0xde2 <free+0xa6>
     dd8:	b0 93 50 03 	sts	0x0350, r27
     ddc:	a0 93 4f 03 	sts	0x034F, r26
     de0:	41 c0       	rjmp	.+130    	; 0xe64 <free+0x128>
     de2:	fa 01       	movw	r30, r20
     de4:	b3 83       	std	Z+3, r27	; 0x03
     de6:	a2 83       	std	Z+2, r26	; 0x02
     de8:	c1 91       	ld	r28, Z+
     dea:	d1 91       	ld	r29, Z+
     dec:	ec 0f       	add	r30, r28
     dee:	fd 1f       	adc	r31, r29
     df0:	ae 17       	cp	r26, r30
     df2:	bf 07       	cpc	r27, r31
     df4:	81 f4       	brne	.+32     	; 0xe16 <free+0xda>
     df6:	f9 01       	movw	r30, r18
     df8:	92 91       	ld	r25, -Z
     dfa:	82 91       	ld	r24, -Z
     dfc:	8c 0f       	add	r24, r28
     dfe:	9d 1f       	adc	r25, r29
     e00:	02 96       	adiw	r24, 0x02	; 2
     e02:	da 01       	movw	r26, r20
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	9c 93       	st	X, r25
     e08:	8e 93       	st	-X, r24
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	9c 93       	st	X, r25
     e12:	8e 93       	st	-X, r24
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	e0 e0       	ldi	r30, 0x00	; 0
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <free+0xe4>
     e1c:	fb 01       	movw	r30, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	db 01       	movw	r26, r22
     e22:	12 96       	adiw	r26, 0x02	; 2
     e24:	8d 91       	ld	r24, X+
     e26:	9c 91       	ld	r25, X
     e28:	13 97       	sbiw	r26, 0x03	; 3
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	b9 f7       	brne	.-18     	; 0xe1c <free+0xe0>
     e2e:	cb 01       	movw	r24, r22
     e30:	02 96       	adiw	r24, 0x02	; 2
     e32:	2d 91       	ld	r18, X+
     e34:	3c 91       	ld	r19, X
     e36:	11 97       	sbiw	r26, 0x01	; 1
     e38:	82 0f       	add	r24, r18
     e3a:	93 1f       	adc	r25, r19
     e3c:	20 91 4d 03 	lds	r18, 0x034D
     e40:	30 91 4e 03 	lds	r19, 0x034E
     e44:	28 17       	cp	r18, r24
     e46:	39 07       	cpc	r19, r25
     e48:	69 f4       	brne	.+26     	; 0xe64 <free+0x128>
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	29 f4       	brne	.+10     	; 0xe58 <free+0x11c>
     e4e:	10 92 50 03 	sts	0x0350, r1
     e52:	10 92 4f 03 	sts	0x034F, r1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <free+0x120>
     e58:	13 82       	std	Z+3, r1	; 0x03
     e5a:	12 82       	std	Z+2, r1	; 0x02
     e5c:	70 93 4e 03 	sts	0x034E, r23
     e60:	60 93 4d 03 	sts	0x034D, r22
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <atoi>:
     e6e:	fc 01       	movw	r30, r24
     e70:	88 27       	eor	r24, r24
     e72:	99 27       	eor	r25, r25
     e74:	e8 94       	clt
     e76:	21 91       	ld	r18, Z+
     e78:	20 32       	cpi	r18, 0x20	; 32
     e7a:	e9 f3       	breq	.-6      	; 0xe76 <atoi+0x8>
     e7c:	29 30       	cpi	r18, 0x09	; 9
     e7e:	10 f0       	brcs	.+4      	; 0xe84 <atoi+0x16>
     e80:	2e 30       	cpi	r18, 0x0E	; 14
     e82:	c8 f3       	brcs	.-14     	; 0xe76 <atoi+0x8>
     e84:	2b 32       	cpi	r18, 0x2B	; 43
     e86:	41 f0       	breq	.+16     	; 0xe98 <atoi+0x2a>
     e88:	2d 32       	cpi	r18, 0x2D	; 45
     e8a:	39 f4       	brne	.+14     	; 0xe9a <atoi+0x2c>
     e8c:	68 94       	set
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <atoi+0x2a>
     e90:	0e 94 8a 07 	call	0xf14	; 0xf14 <__mulhi_const_10>
     e94:	82 0f       	add	r24, r18
     e96:	91 1d       	adc	r25, r1
     e98:	21 91       	ld	r18, Z+
     e9a:	20 53       	subi	r18, 0x30	; 48
     e9c:	2a 30       	cpi	r18, 0x0A	; 10
     e9e:	c0 f3       	brcs	.-16     	; 0xe90 <atoi+0x22>
     ea0:	1e f4       	brtc	.+6      	; 0xea8 <atoi+0x3a>
     ea2:	90 95       	com	r25
     ea4:	81 95       	neg	r24
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	08 95       	ret

00000eaa <strtok>:
     eaa:	42 ec       	ldi	r20, 0xC2	; 194
     eac:	52 e0       	ldi	r21, 0x02	; 2
     eae:	0e 94 63 07 	call	0xec6	; 0xec6 <strtok_r>
     eb2:	08 95       	ret

00000eb4 <strcmp>:
     eb4:	fb 01       	movw	r30, r22
     eb6:	dc 01       	movw	r26, r24
     eb8:	8d 91       	ld	r24, X+
     eba:	01 90       	ld	r0, Z+
     ebc:	80 19       	sub	r24, r0
     ebe:	01 10       	cpse	r0, r1
     ec0:	d9 f3       	breq	.-10     	; 0xeb8 <strcmp+0x4>
     ec2:	99 0b       	sbc	r25, r25
     ec4:	08 95       	ret

00000ec6 <strtok_r>:
     ec6:	fa 01       	movw	r30, r20
     ec8:	a1 91       	ld	r26, Z+
     eca:	b0 81       	ld	r27, Z
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	19 f4       	brne	.+6      	; 0xed6 <strtok_r+0x10>
     ed0:	10 97       	sbiw	r26, 0x00	; 0
     ed2:	e1 f0       	breq	.+56     	; 0xf0c <strtok_r+0x46>
     ed4:	cd 01       	movw	r24, r26
     ed6:	dc 01       	movw	r26, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	0d 90       	ld	r0, X+
     edc:	00 20       	and	r0, r0
     ede:	11 f4       	brne	.+4      	; 0xee4 <strtok_r+0x1e>
     ee0:	c0 01       	movw	r24, r0
     ee2:	13 c0       	rjmp	.+38     	; 0xf0a <strtok_r+0x44>
     ee4:	fb 01       	movw	r30, r22
     ee6:	21 91       	ld	r18, Z+
     ee8:	22 23       	and	r18, r18
     eea:	19 f0       	breq	.+6      	; 0xef2 <strtok_r+0x2c>
     eec:	20 15       	cp	r18, r0
     eee:	d9 f7       	brne	.-10     	; 0xee6 <strtok_r+0x20>
     ef0:	f3 cf       	rjmp	.-26     	; 0xed8 <strtok_r+0x12>
     ef2:	fb 01       	movw	r30, r22
     ef4:	21 91       	ld	r18, Z+
     ef6:	20 15       	cp	r18, r0
     ef8:	19 f4       	brne	.+6      	; 0xf00 <strtok_r+0x3a>
     efa:	1e 92       	st	-X, r1
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <strtok_r+0x46>
     f00:	22 23       	and	r18, r18
     f02:	c1 f7       	brne	.-16     	; 0xef4 <strtok_r+0x2e>
     f04:	0d 90       	ld	r0, X+
     f06:	00 20       	and	r0, r0
     f08:	a1 f7       	brne	.-24     	; 0xef2 <strtok_r+0x2c>
     f0a:	d0 01       	movw	r26, r0
     f0c:	fa 01       	movw	r30, r20
     f0e:	a1 93       	st	Z+, r26
     f10:	b0 83       	st	Z, r27
     f12:	08 95       	ret

00000f14 <__mulhi_const_10>:
     f14:	7a e0       	ldi	r23, 0x0A	; 10
     f16:	97 9f       	mul	r25, r23
     f18:	90 2d       	mov	r25, r0
     f1a:	87 9f       	mul	r24, r23
     f1c:	80 2d       	mov	r24, r0
     f1e:	91 0d       	add	r25, r1
     f20:	11 24       	eor	r1, r1
     f22:	08 95       	ret

00000f24 <fgets>:
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	8c 01       	movw	r16, r24
     f36:	6a 01       	movw	r12, r20
     f38:	fa 01       	movw	r30, r20
     f3a:	83 81       	ldd	r24, Z+3	; 0x03
     f3c:	80 ff       	sbrs	r24, 0
     f3e:	1a c0       	rjmp	.+52     	; 0xf74 <fgets+0x50>
     f40:	16 16       	cp	r1, r22
     f42:	17 06       	cpc	r1, r23
     f44:	bc f4       	brge	.+46     	; 0xf74 <fgets+0x50>
     f46:	7b 01       	movw	r14, r22
     f48:	e8 01       	movw	r28, r16
     f4a:	0e c0       	rjmp	.+28     	; 0xf68 <fgets+0x44>
     f4c:	c6 01       	movw	r24, r12
     f4e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
     f52:	ff ef       	ldi	r31, 0xFF	; 255
     f54:	8f 3f       	cpi	r24, 0xFF	; 255
     f56:	9f 07       	cpc	r25, r31
     f58:	69 f0       	breq	.+26     	; 0xf74 <fgets+0x50>
     f5a:	89 93       	st	Y+, r24
     f5c:	08 94       	sec
     f5e:	e1 08       	sbc	r14, r1
     f60:	f1 08       	sbc	r15, r1
     f62:	8a 30       	cpi	r24, 0x0A	; 10
     f64:	91 05       	cpc	r25, r1
     f66:	21 f0       	breq	.+8      	; 0xf70 <fgets+0x4c>
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	e2 16       	cp	r14, r18
     f6c:	f1 04       	cpc	r15, r1
     f6e:	71 f7       	brne	.-36     	; 0xf4c <fgets+0x28>
     f70:	18 82       	st	Y, r1
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <fgets+0x54>
     f74:	00 e0       	ldi	r16, 0x00	; 0
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	c8 01       	movw	r24, r16
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	08 95       	ret

00000f8c <printf>:
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	fe 01       	movw	r30, r28
     f96:	36 96       	adiw	r30, 0x06	; 6
     f98:	61 91       	ld	r22, Z+
     f9a:	71 91       	ld	r23, Z+
     f9c:	80 91 53 03 	lds	r24, 0x0353
     fa0:	90 91 54 03 	lds	r25, 0x0354
     fa4:	af 01       	movw	r20, r30
     fa6:	0e 94 41 08 	call	0x1082	; 0x1082 <vfprintf>
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <putchar>:
     fb0:	60 91 53 03 	lds	r22, 0x0353
     fb4:	70 91 54 03 	lds	r23, 0x0354
     fb8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
     fbc:	08 95       	ret

00000fbe <puts>:
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	8c 01       	movw	r16, r24
     fc8:	e0 91 53 03 	lds	r30, 0x0353
     fcc:	f0 91 54 03 	lds	r31, 0x0354
     fd0:	83 81       	ldd	r24, Z+3	; 0x03
     fd2:	81 ff       	sbrs	r24, 1
     fd4:	1a c0       	rjmp	.+52     	; 0x100a <puts+0x4c>
     fd6:	c0 e0       	ldi	r28, 0x00	; 0
     fd8:	d0 e0       	ldi	r29, 0x00	; 0
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <puts+0x28>
     fdc:	19 95       	eicall
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <puts+0x28>
     fe2:	cf ef       	ldi	r28, 0xFF	; 255
     fe4:	df ef       	ldi	r29, 0xFF	; 255
     fe6:	f8 01       	movw	r30, r16
     fe8:	81 91       	ld	r24, Z+
     fea:	8f 01       	movw	r16, r30
     fec:	60 91 53 03 	lds	r22, 0x0353
     ff0:	70 91 54 03 	lds	r23, 0x0354
     ff4:	db 01       	movw	r26, r22
     ff6:	18 96       	adiw	r26, 0x08	; 8
     ff8:	ed 91       	ld	r30, X+
     ffa:	fc 91       	ld	r31, X
     ffc:	19 97       	sbiw	r26, 0x09	; 9
     ffe:	88 23       	and	r24, r24
    1000:	69 f7       	brne	.-38     	; 0xfdc <puts+0x1e>
    1002:	8a e0       	ldi	r24, 0x0A	; 10
    1004:	19 95       	eicall
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	11 f0       	breq	.+4      	; 0x100e <puts+0x50>
    100a:	cf ef       	ldi	r28, 0xFF	; 255
    100c:	df ef       	ldi	r29, 0xFF	; 255
    100e:	ce 01       	movw	r24, r28
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	08 95       	ret

0000101a <scanf>:
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	fe 01       	movw	r30, r28
    1024:	36 96       	adiw	r30, 0x06	; 6
    1026:	61 91       	ld	r22, Z+
    1028:	71 91       	ld	r23, Z+
    102a:	80 91 51 03 	lds	r24, 0x0351
    102e:	90 91 52 03 	lds	r25, 0x0352
    1032:	af 01       	movw	r20, r30
    1034:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vfscanf>
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <sscanf>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	2e 97       	sbiw	r28, 0x0e	; 14
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	85 e0       	ldi	r24, 0x05	; 5
    1054:	8c 83       	std	Y+4, r24	; 0x04
    1056:	8c 89       	ldd	r24, Y+20	; 0x14
    1058:	9d 89       	ldd	r25, Y+21	; 0x15
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	ae 01       	movw	r20, r28
    1060:	48 5e       	subi	r20, 0xE8	; 232
    1062:	5f 4f       	sbci	r21, 0xFF	; 255
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	6e 89       	ldd	r22, Y+22	; 0x16
    106a:	7f 89       	ldd	r23, Y+23	; 0x17
    106c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vfscanf>
    1070:	2e 96       	adiw	r28, 0x0e	; 14
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <vfprintf>:
    1082:	2f 92       	push	r2
    1084:	3f 92       	push	r3
    1086:	4f 92       	push	r4
    1088:	5f 92       	push	r5
    108a:	6f 92       	push	r6
    108c:	7f 92       	push	r7
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	2d 97       	sbiw	r28, 0x0d	; 13
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	3c 01       	movw	r6, r24
    10b8:	7d 87       	std	Y+13, r23	; 0x0d
    10ba:	6c 87       	std	Y+12, r22	; 0x0c
    10bc:	5a 01       	movw	r10, r20
    10be:	fc 01       	movw	r30, r24
    10c0:	17 82       	std	Z+7, r1	; 0x07
    10c2:	16 82       	std	Z+6, r1	; 0x06
    10c4:	83 81       	ldd	r24, Z+3	; 0x03
    10c6:	81 ff       	sbrs	r24, 1
    10c8:	c8 c1       	rjmp	.+912    	; 0x145a <vfprintf+0x3d8>
    10ca:	2e 01       	movw	r4, r28
    10cc:	08 94       	sec
    10ce:	41 1c       	adc	r4, r1
    10d0:	51 1c       	adc	r5, r1
    10d2:	f3 01       	movw	r30, r6
    10d4:	93 81       	ldd	r25, Z+3	; 0x03
    10d6:	ec 85       	ldd	r30, Y+12	; 0x0c
    10d8:	fd 85       	ldd	r31, Y+13	; 0x0d
    10da:	93 fd       	sbrc	r25, 3
    10dc:	85 91       	lpm	r24, Z+
    10de:	93 ff       	sbrs	r25, 3
    10e0:	81 91       	ld	r24, Z+
    10e2:	fd 87       	std	Y+13, r31	; 0x0d
    10e4:	ec 87       	std	Y+12, r30	; 0x0c
    10e6:	88 23       	and	r24, r24
    10e8:	09 f4       	brne	.+2      	; 0x10ec <vfprintf+0x6a>
    10ea:	b3 c1       	rjmp	.+870    	; 0x1452 <vfprintf+0x3d0>
    10ec:	85 32       	cpi	r24, 0x25	; 37
    10ee:	41 f4       	brne	.+16     	; 0x1100 <vfprintf+0x7e>
    10f0:	93 fd       	sbrc	r25, 3
    10f2:	85 91       	lpm	r24, Z+
    10f4:	93 ff       	sbrs	r25, 3
    10f6:	81 91       	ld	r24, Z+
    10f8:	fd 87       	std	Y+13, r31	; 0x0d
    10fa:	ec 87       	std	Y+12, r30	; 0x0c
    10fc:	85 32       	cpi	r24, 0x25	; 37
    10fe:	29 f4       	brne	.+10     	; 0x110a <vfprintf+0x88>
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	b3 01       	movw	r22, r6
    1104:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    1108:	e4 cf       	rjmp	.-56     	; 0x10d2 <vfprintf+0x50>
    110a:	ff 24       	eor	r15, r15
    110c:	ee 24       	eor	r14, r14
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	10 32       	cpi	r17, 0x20	; 32
    1112:	b0 f4       	brcc	.+44     	; 0x1140 <vfprintf+0xbe>
    1114:	8b 32       	cpi	r24, 0x2B	; 43
    1116:	69 f0       	breq	.+26     	; 0x1132 <vfprintf+0xb0>
    1118:	8c 32       	cpi	r24, 0x2C	; 44
    111a:	28 f4       	brcc	.+10     	; 0x1126 <vfprintf+0xa4>
    111c:	80 32       	cpi	r24, 0x20	; 32
    111e:	51 f0       	breq	.+20     	; 0x1134 <vfprintf+0xb2>
    1120:	83 32       	cpi	r24, 0x23	; 35
    1122:	71 f4       	brne	.+28     	; 0x1140 <vfprintf+0xbe>
    1124:	0b c0       	rjmp	.+22     	; 0x113c <vfprintf+0xba>
    1126:	8d 32       	cpi	r24, 0x2D	; 45
    1128:	39 f0       	breq	.+14     	; 0x1138 <vfprintf+0xb6>
    112a:	80 33       	cpi	r24, 0x30	; 48
    112c:	49 f4       	brne	.+18     	; 0x1140 <vfprintf+0xbe>
    112e:	11 60       	ori	r17, 0x01	; 1
    1130:	2c c0       	rjmp	.+88     	; 0x118a <vfprintf+0x108>
    1132:	12 60       	ori	r17, 0x02	; 2
    1134:	14 60       	ori	r17, 0x04	; 4
    1136:	29 c0       	rjmp	.+82     	; 0x118a <vfprintf+0x108>
    1138:	18 60       	ori	r17, 0x08	; 8
    113a:	27 c0       	rjmp	.+78     	; 0x118a <vfprintf+0x108>
    113c:	10 61       	ori	r17, 0x10	; 16
    113e:	25 c0       	rjmp	.+74     	; 0x118a <vfprintf+0x108>
    1140:	17 fd       	sbrc	r17, 7
    1142:	2e c0       	rjmp	.+92     	; 0x11a0 <vfprintf+0x11e>
    1144:	28 2f       	mov	r18, r24
    1146:	20 53       	subi	r18, 0x30	; 48
    1148:	2a 30       	cpi	r18, 0x0A	; 10
    114a:	98 f4       	brcc	.+38     	; 0x1172 <vfprintf+0xf0>
    114c:	16 ff       	sbrs	r17, 6
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <vfprintf+0xde>
    1150:	8f 2d       	mov	r24, r15
    1152:	88 0f       	add	r24, r24
    1154:	f8 2e       	mov	r15, r24
    1156:	ff 0c       	add	r15, r15
    1158:	ff 0c       	add	r15, r15
    115a:	f8 0e       	add	r15, r24
    115c:	f2 0e       	add	r15, r18
    115e:	15 c0       	rjmp	.+42     	; 0x118a <vfprintf+0x108>
    1160:	8e 2d       	mov	r24, r14
    1162:	88 0f       	add	r24, r24
    1164:	e8 2e       	mov	r14, r24
    1166:	ee 0c       	add	r14, r14
    1168:	ee 0c       	add	r14, r14
    116a:	e8 0e       	add	r14, r24
    116c:	e2 0e       	add	r14, r18
    116e:	10 62       	ori	r17, 0x20	; 32
    1170:	0c c0       	rjmp	.+24     	; 0x118a <vfprintf+0x108>
    1172:	8e 32       	cpi	r24, 0x2E	; 46
    1174:	21 f4       	brne	.+8      	; 0x117e <vfprintf+0xfc>
    1176:	16 fd       	sbrc	r17, 6
    1178:	6c c1       	rjmp	.+728    	; 0x1452 <vfprintf+0x3d0>
    117a:	10 64       	ori	r17, 0x40	; 64
    117c:	06 c0       	rjmp	.+12     	; 0x118a <vfprintf+0x108>
    117e:	8c 36       	cpi	r24, 0x6C	; 108
    1180:	11 f4       	brne	.+4      	; 0x1186 <vfprintf+0x104>
    1182:	10 68       	ori	r17, 0x80	; 128
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x108>
    1186:	88 36       	cpi	r24, 0x68	; 104
    1188:	59 f4       	brne	.+22     	; 0x11a0 <vfprintf+0x11e>
    118a:	ec 85       	ldd	r30, Y+12	; 0x0c
    118c:	fd 85       	ldd	r31, Y+13	; 0x0d
    118e:	93 fd       	sbrc	r25, 3
    1190:	85 91       	lpm	r24, Z+
    1192:	93 ff       	sbrs	r25, 3
    1194:	81 91       	ld	r24, Z+
    1196:	fd 87       	std	Y+13, r31	; 0x0d
    1198:	ec 87       	std	Y+12, r30	; 0x0c
    119a:	88 23       	and	r24, r24
    119c:	09 f0       	breq	.+2      	; 0x11a0 <vfprintf+0x11e>
    119e:	b8 cf       	rjmp	.-144    	; 0x1110 <vfprintf+0x8e>
    11a0:	98 2f       	mov	r25, r24
    11a2:	95 54       	subi	r25, 0x45	; 69
    11a4:	93 30       	cpi	r25, 0x03	; 3
    11a6:	18 f0       	brcs	.+6      	; 0x11ae <vfprintf+0x12c>
    11a8:	90 52       	subi	r25, 0x20	; 32
    11aa:	93 30       	cpi	r25, 0x03	; 3
    11ac:	38 f4       	brcc	.+14     	; 0x11bc <vfprintf+0x13a>
    11ae:	24 e0       	ldi	r18, 0x04	; 4
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	a2 0e       	add	r10, r18
    11b4:	b3 1e       	adc	r11, r19
    11b6:	3f e3       	ldi	r19, 0x3F	; 63
    11b8:	39 83       	std	Y+1, r19	; 0x01
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <vfprintf+0x158>
    11bc:	83 36       	cpi	r24, 0x63	; 99
    11be:	31 f0       	breq	.+12     	; 0x11cc <vfprintf+0x14a>
    11c0:	83 37       	cpi	r24, 0x73	; 115
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <vfprintf+0x162>
    11c4:	83 35       	cpi	r24, 0x53	; 83
    11c6:	09 f0       	breq	.+2      	; 0x11ca <vfprintf+0x148>
    11c8:	5a c0       	rjmp	.+180    	; 0x127e <vfprintf+0x1fc>
    11ca:	22 c0       	rjmp	.+68     	; 0x1210 <vfprintf+0x18e>
    11cc:	f5 01       	movw	r30, r10
    11ce:	80 81       	ld	r24, Z
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	22 e0       	ldi	r18, 0x02	; 2
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	a2 0e       	add	r10, r18
    11d8:	b3 1e       	adc	r11, r19
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	c2 2e       	mov	r12, r18
    11de:	d1 2c       	mov	r13, r1
    11e0:	42 01       	movw	r8, r4
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <vfprintf+0x18a>
    11e4:	92 e0       	ldi	r25, 0x02	; 2
    11e6:	29 2e       	mov	r2, r25
    11e8:	31 2c       	mov	r3, r1
    11ea:	2a 0c       	add	r2, r10
    11ec:	3b 1c       	adc	r3, r11
    11ee:	f5 01       	movw	r30, r10
    11f0:	80 80       	ld	r8, Z
    11f2:	91 80       	ldd	r9, Z+1	; 0x01
    11f4:	16 ff       	sbrs	r17, 6
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <vfprintf+0x17c>
    11f8:	6f 2d       	mov	r22, r15
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <vfprintf+0x180>
    11fe:	6f ef       	ldi	r22, 0xFF	; 255
    1200:	7f ef       	ldi	r23, 0xFF	; 255
    1202:	c4 01       	movw	r24, r8
    1204:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <strnlen>
    1208:	6c 01       	movw	r12, r24
    120a:	51 01       	movw	r10, r2
    120c:	1f 77       	andi	r17, 0x7F	; 127
    120e:	15 c0       	rjmp	.+42     	; 0x123a <vfprintf+0x1b8>
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	28 2e       	mov	r2, r24
    1214:	31 2c       	mov	r3, r1
    1216:	2a 0c       	add	r2, r10
    1218:	3b 1c       	adc	r3, r11
    121a:	f5 01       	movw	r30, r10
    121c:	80 80       	ld	r8, Z
    121e:	91 80       	ldd	r9, Z+1	; 0x01
    1220:	16 ff       	sbrs	r17, 6
    1222:	03 c0       	rjmp	.+6      	; 0x122a <vfprintf+0x1a8>
    1224:	6f 2d       	mov	r22, r15
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	02 c0       	rjmp	.+4      	; 0x122e <vfprintf+0x1ac>
    122a:	6f ef       	ldi	r22, 0xFF	; 255
    122c:	7f ef       	ldi	r23, 0xFF	; 255
    122e:	c4 01       	movw	r24, r8
    1230:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <strnlen_P>
    1234:	6c 01       	movw	r12, r24
    1236:	10 68       	ori	r17, 0x80	; 128
    1238:	51 01       	movw	r10, r2
    123a:	13 fd       	sbrc	r17, 3
    123c:	1c c0       	rjmp	.+56     	; 0x1276 <vfprintf+0x1f4>
    123e:	06 c0       	rjmp	.+12     	; 0x124c <vfprintf+0x1ca>
    1240:	80 e2       	ldi	r24, 0x20	; 32
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	b3 01       	movw	r22, r6
    1246:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    124a:	ea 94       	dec	r14
    124c:	8e 2d       	mov	r24, r14
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	c8 16       	cp	r12, r24
    1252:	d9 06       	cpc	r13, r25
    1254:	a8 f3       	brcs	.-22     	; 0x1240 <vfprintf+0x1be>
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <vfprintf+0x1f4>
    1258:	f4 01       	movw	r30, r8
    125a:	17 fd       	sbrc	r17, 7
    125c:	85 91       	lpm	r24, Z+
    125e:	17 ff       	sbrs	r17, 7
    1260:	81 91       	ld	r24, Z+
    1262:	4f 01       	movw	r8, r30
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	b3 01       	movw	r22, r6
    1268:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    126c:	e1 10       	cpse	r14, r1
    126e:	ea 94       	dec	r14
    1270:	08 94       	sec
    1272:	c1 08       	sbc	r12, r1
    1274:	d1 08       	sbc	r13, r1
    1276:	c1 14       	cp	r12, r1
    1278:	d1 04       	cpc	r13, r1
    127a:	71 f7       	brne	.-36     	; 0x1258 <vfprintf+0x1d6>
    127c:	e7 c0       	rjmp	.+462    	; 0x144c <vfprintf+0x3ca>
    127e:	84 36       	cpi	r24, 0x64	; 100
    1280:	11 f0       	breq	.+4      	; 0x1286 <vfprintf+0x204>
    1282:	89 36       	cpi	r24, 0x69	; 105
    1284:	51 f5       	brne	.+84     	; 0x12da <vfprintf+0x258>
    1286:	f5 01       	movw	r30, r10
    1288:	17 ff       	sbrs	r17, 7
    128a:	07 c0       	rjmp	.+14     	; 0x129a <vfprintf+0x218>
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	a2 81       	ldd	r26, Z+2	; 0x02
    1292:	b3 81       	ldd	r27, Z+3	; 0x03
    1294:	24 e0       	ldi	r18, 0x04	; 4
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <vfprintf+0x228>
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	aa 27       	eor	r26, r26
    12a0:	97 fd       	sbrc	r25, 7
    12a2:	a0 95       	com	r26
    12a4:	ba 2f       	mov	r27, r26
    12a6:	22 e0       	ldi	r18, 0x02	; 2
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	a2 0e       	add	r10, r18
    12ac:	b3 1e       	adc	r11, r19
    12ae:	01 2f       	mov	r16, r17
    12b0:	0f 76       	andi	r16, 0x6F	; 111
    12b2:	b7 ff       	sbrs	r27, 7
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <vfprintf+0x244>
    12b6:	b0 95       	com	r27
    12b8:	a0 95       	com	r26
    12ba:	90 95       	com	r25
    12bc:	81 95       	neg	r24
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	af 4f       	sbci	r26, 0xFF	; 255
    12c2:	bf 4f       	sbci	r27, 0xFF	; 255
    12c4:	00 68       	ori	r16, 0x80	; 128
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	a2 01       	movw	r20, r4
    12cc:	2a e0       	ldi	r18, 0x0A	; 10
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__ultoa_invert>
    12d4:	d8 2e       	mov	r13, r24
    12d6:	d4 18       	sub	r13, r4
    12d8:	3f c0       	rjmp	.+126    	; 0x1358 <vfprintf+0x2d6>
    12da:	85 37       	cpi	r24, 0x75	; 117
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <vfprintf+0x264>
    12de:	1f 7e       	andi	r17, 0xEF	; 239
    12e0:	2a e0       	ldi	r18, 0x0A	; 10
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	20 c0       	rjmp	.+64     	; 0x1326 <vfprintf+0x2a4>
    12e6:	19 7f       	andi	r17, 0xF9	; 249
    12e8:	8f 36       	cpi	r24, 0x6F	; 111
    12ea:	a9 f0       	breq	.+42     	; 0x1316 <vfprintf+0x294>
    12ec:	80 37       	cpi	r24, 0x70	; 112
    12ee:	20 f4       	brcc	.+8      	; 0x12f8 <vfprintf+0x276>
    12f0:	88 35       	cpi	r24, 0x58	; 88
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <vfprintf+0x274>
    12f4:	ae c0       	rjmp	.+348    	; 0x1452 <vfprintf+0x3d0>
    12f6:	0b c0       	rjmp	.+22     	; 0x130e <vfprintf+0x28c>
    12f8:	80 37       	cpi	r24, 0x70	; 112
    12fa:	21 f0       	breq	.+8      	; 0x1304 <vfprintf+0x282>
    12fc:	88 37       	cpi	r24, 0x78	; 120
    12fe:	09 f0       	breq	.+2      	; 0x1302 <vfprintf+0x280>
    1300:	a8 c0       	rjmp	.+336    	; 0x1452 <vfprintf+0x3d0>
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <vfprintf+0x284>
    1304:	10 61       	ori	r17, 0x10	; 16
    1306:	14 ff       	sbrs	r17, 4
    1308:	09 c0       	rjmp	.+18     	; 0x131c <vfprintf+0x29a>
    130a:	14 60       	ori	r17, 0x04	; 4
    130c:	07 c0       	rjmp	.+14     	; 0x131c <vfprintf+0x29a>
    130e:	14 ff       	sbrs	r17, 4
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <vfprintf+0x2a0>
    1312:	16 60       	ori	r17, 0x06	; 6
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <vfprintf+0x2a0>
    1316:	28 e0       	ldi	r18, 0x08	; 8
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <vfprintf+0x2a4>
    131c:	20 e1       	ldi	r18, 0x10	; 16
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <vfprintf+0x2a4>
    1322:	20 e1       	ldi	r18, 0x10	; 16
    1324:	32 e0       	ldi	r19, 0x02	; 2
    1326:	f5 01       	movw	r30, r10
    1328:	17 ff       	sbrs	r17, 7
    132a:	07 c0       	rjmp	.+14     	; 0x133a <vfprintf+0x2b8>
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	44 e0       	ldi	r20, 0x04	; 4
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <vfprintf+0x2c4>
    133a:	60 81       	ld	r22, Z
    133c:	71 81       	ldd	r23, Z+1	; 0x01
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	42 e0       	ldi	r20, 0x02	; 2
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	a4 0e       	add	r10, r20
    1348:	b5 1e       	adc	r11, r21
    134a:	a2 01       	movw	r20, r4
    134c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__ultoa_invert>
    1350:	d8 2e       	mov	r13, r24
    1352:	d4 18       	sub	r13, r4
    1354:	01 2f       	mov	r16, r17
    1356:	0f 77       	andi	r16, 0x7F	; 127
    1358:	06 ff       	sbrs	r16, 6
    135a:	09 c0       	rjmp	.+18     	; 0x136e <vfprintf+0x2ec>
    135c:	0e 7f       	andi	r16, 0xFE	; 254
    135e:	df 14       	cp	r13, r15
    1360:	30 f4       	brcc	.+12     	; 0x136e <vfprintf+0x2ec>
    1362:	04 ff       	sbrs	r16, 4
    1364:	06 c0       	rjmp	.+12     	; 0x1372 <vfprintf+0x2f0>
    1366:	02 fd       	sbrc	r16, 2
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <vfprintf+0x2f0>
    136a:	0f 7e       	andi	r16, 0xEF	; 239
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x2f0>
    136e:	1d 2d       	mov	r17, r13
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <vfprintf+0x2f2>
    1372:	1f 2d       	mov	r17, r15
    1374:	80 2f       	mov	r24, r16
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	04 ff       	sbrs	r16, 4
    137a:	0c c0       	rjmp	.+24     	; 0x1394 <vfprintf+0x312>
    137c:	fe 01       	movw	r30, r28
    137e:	ed 0d       	add	r30, r13
    1380:	f1 1d       	adc	r31, r1
    1382:	20 81       	ld	r18, Z
    1384:	20 33       	cpi	r18, 0x30	; 48
    1386:	11 f4       	brne	.+4      	; 0x138c <vfprintf+0x30a>
    1388:	09 7e       	andi	r16, 0xE9	; 233
    138a:	09 c0       	rjmp	.+18     	; 0x139e <vfprintf+0x31c>
    138c:	02 ff       	sbrs	r16, 2
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0x31a>
    1390:	1e 5f       	subi	r17, 0xFE	; 254
    1392:	05 c0       	rjmp	.+10     	; 0x139e <vfprintf+0x31c>
    1394:	86 78       	andi	r24, 0x86	; 134
    1396:	90 70       	andi	r25, 0x00	; 0
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	09 f0       	breq	.+2      	; 0x139e <vfprintf+0x31c>
    139c:	1f 5f       	subi	r17, 0xFF	; 255
    139e:	80 2e       	mov	r8, r16
    13a0:	99 24       	eor	r9, r9
    13a2:	03 fd       	sbrc	r16, 3
    13a4:	12 c0       	rjmp	.+36     	; 0x13ca <vfprintf+0x348>
    13a6:	00 ff       	sbrs	r16, 0
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <vfprintf+0x342>
    13aa:	fd 2c       	mov	r15, r13
    13ac:	1e 15       	cp	r17, r14
    13ae:	50 f4       	brcc	.+20     	; 0x13c4 <vfprintf+0x342>
    13b0:	fe 0c       	add	r15, r14
    13b2:	f1 1a       	sub	r15, r17
    13b4:	1e 2d       	mov	r17, r14
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <vfprintf+0x342>
    13b8:	80 e2       	ldi	r24, 0x20	; 32
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	b3 01       	movw	r22, r6
    13be:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    13c2:	1f 5f       	subi	r17, 0xFF	; 255
    13c4:	1e 15       	cp	r17, r14
    13c6:	c0 f3       	brcs	.-16     	; 0x13b8 <vfprintf+0x336>
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <vfprintf+0x350>
    13ca:	1e 15       	cp	r17, r14
    13cc:	10 f4       	brcc	.+4      	; 0x13d2 <vfprintf+0x350>
    13ce:	e1 1a       	sub	r14, r17
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <vfprintf+0x352>
    13d2:	ee 24       	eor	r14, r14
    13d4:	84 fe       	sbrs	r8, 4
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <vfprintf+0x374>
    13d8:	80 e3       	ldi	r24, 0x30	; 48
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	b3 01       	movw	r22, r6
    13de:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    13e2:	82 fe       	sbrs	r8, 2
    13e4:	1f c0       	rjmp	.+62     	; 0x1424 <vfprintf+0x3a2>
    13e6:	81 fe       	sbrs	r8, 1
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <vfprintf+0x36e>
    13ea:	88 e5       	ldi	r24, 0x58	; 88
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	10 c0       	rjmp	.+32     	; 0x1410 <vfprintf+0x38e>
    13f0:	88 e7       	ldi	r24, 0x78	; 120
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <vfprintf+0x38e>
    13f6:	c4 01       	movw	r24, r8
    13f8:	86 78       	andi	r24, 0x86	; 134
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	91 f0       	breq	.+36     	; 0x1424 <vfprintf+0x3a2>
    1400:	81 fc       	sbrc	r8, 1
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <vfprintf+0x386>
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	01 c0       	rjmp	.+2      	; 0x140a <vfprintf+0x388>
    1408:	8b e2       	ldi	r24, 0x2B	; 43
    140a:	07 fd       	sbrc	r16, 7
    140c:	8d e2       	ldi	r24, 0x2D	; 45
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	b3 01       	movw	r22, r6
    1412:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <vfprintf+0x3a2>
    1418:	80 e3       	ldi	r24, 0x30	; 48
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	b3 01       	movw	r22, r6
    141e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    1422:	fa 94       	dec	r15
    1424:	df 14       	cp	r13, r15
    1426:	c0 f3       	brcs	.-16     	; 0x1418 <vfprintf+0x396>
    1428:	da 94       	dec	r13
    142a:	f2 01       	movw	r30, r4
    142c:	ed 0d       	add	r30, r13
    142e:	f1 1d       	adc	r31, r1
    1430:	80 81       	ld	r24, Z
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	b3 01       	movw	r22, r6
    1436:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    143a:	dd 20       	and	r13, r13
    143c:	a9 f7       	brne	.-22     	; 0x1428 <vfprintf+0x3a6>
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0x3ca>
    1440:	80 e2       	ldi	r24, 0x20	; 32
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	b3 01       	movw	r22, r6
    1446:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <fputc>
    144a:	ea 94       	dec	r14
    144c:	ee 20       	and	r14, r14
    144e:	c1 f7       	brne	.-16     	; 0x1440 <vfprintf+0x3be>
    1450:	40 ce       	rjmp	.-896    	; 0x10d2 <vfprintf+0x50>
    1452:	f3 01       	movw	r30, r6
    1454:	86 81       	ldd	r24, Z+6	; 0x06
    1456:	97 81       	ldd	r25, Z+7	; 0x07
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x3dc>
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	2d 96       	adiw	r28, 0x0d	; 13
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	bf 90       	pop	r11
    147c:	af 90       	pop	r10
    147e:	9f 90       	pop	r9
    1480:	8f 90       	pop	r8
    1482:	7f 90       	pop	r7
    1484:	6f 90       	pop	r6
    1486:	5f 90       	pop	r5
    1488:	4f 90       	pop	r4
    148a:	3f 90       	pop	r3
    148c:	2f 90       	pop	r2
    148e:	08 95       	ret

00001490 <putval>:
    1490:	20 fd       	sbrc	r18, 0
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <putval+0x16>
    1494:	fc 01       	movw	r30, r24
    1496:	23 fd       	sbrc	r18, 3
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <putval+0x14>
    149a:	22 ff       	sbrs	r18, 2
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <putval+0x12>
    149e:	73 83       	std	Z+3, r23	; 0x03
    14a0:	62 83       	std	Z+2, r22	; 0x02
    14a2:	51 83       	std	Z+1, r21	; 0x01
    14a4:	40 83       	st	Z, r20
    14a6:	08 95       	ret

000014a8 <mulacc>:
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	6b 01       	movw	r12, r22
    14b2:	7c 01       	movw	r14, r24
    14b4:	44 fd       	sbrc	r20, 4
    14b6:	10 c0       	rjmp	.+32     	; 0x14d8 <mulacc+0x30>
    14b8:	46 fd       	sbrc	r20, 6
    14ba:	10 c0       	rjmp	.+32     	; 0x14dc <mulacc+0x34>
    14bc:	d6 01       	movw	r26, r12
    14be:	f7 01       	movw	r30, r14
    14c0:	aa 0f       	add	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	ee 1f       	adc	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	10 94       	com	r1
    14ca:	d1 f7       	brne	.-12     	; 0x14c0 <mulacc+0x18>
    14cc:	ca 0e       	add	r12, r26
    14ce:	db 1e       	adc	r13, r27
    14d0:	ee 1e       	adc	r14, r30
    14d2:	ff 1e       	adc	r15, r31
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <mulacc+0x36>
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	01 c0       	rjmp	.+2      	; 0x14de <mulacc+0x36>
    14dc:	84 e0       	ldi	r24, 0x04	; 4
    14de:	cc 0c       	add	r12, r12
    14e0:	dd 1c       	adc	r13, r13
    14e2:	ee 1c       	adc	r14, r14
    14e4:	ff 1c       	adc	r15, r15
    14e6:	81 50       	subi	r24, 0x01	; 1
    14e8:	d1 f7       	brne	.-12     	; 0x14de <mulacc+0x36>
    14ea:	c2 0e       	add	r12, r18
    14ec:	d1 1c       	adc	r13, r1
    14ee:	e1 1c       	adc	r14, r1
    14f0:	f1 1c       	adc	r15, r1
    14f2:	b6 01       	movw	r22, r12
    14f4:	c7 01       	movw	r24, r14
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	08 95       	ret

00001500 <skip_spaces>:
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	8c 01       	movw	r16, r24
    150a:	c8 01       	movw	r24, r16
    150c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    1510:	ec 01       	movw	r28, r24
    1512:	97 fd       	sbrc	r25, 7
    1514:	08 c0       	rjmp	.+16     	; 0x1526 <skip_spaces+0x26>
    1516:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <isspace>
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	b1 f7       	brne	.-20     	; 0x150a <skip_spaces+0xa>
    151e:	ce 01       	movw	r24, r28
    1520:	b8 01       	movw	r22, r16
    1522:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <ungetc>
    1526:	ce 01       	movw	r24, r28
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	08 95       	ret

00001532 <conv_int>:
    1532:	af 92       	push	r10
    1534:	bf 92       	push	r11
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	8c 01       	movw	r16, r24
    1548:	d6 2f       	mov	r29, r22
    154a:	5a 01       	movw	r10, r20
    154c:	c2 2f       	mov	r28, r18
    154e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    1552:	8b 32       	cpi	r24, 0x2B	; 43
    1554:	19 f0       	breq	.+6      	; 0x155c <conv_int+0x2a>
    1556:	8d 32       	cpi	r24, 0x2D	; 45
    1558:	49 f4       	brne	.+18     	; 0x156c <conv_int+0x3a>
    155a:	c0 68       	ori	r28, 0x80	; 128
    155c:	d1 50       	subi	r29, 0x01	; 1
    155e:	09 f4       	brne	.+2      	; 0x1562 <conv_int+0x30>
    1560:	61 c0       	rjmp	.+194    	; 0x1624 <conv_int+0xf2>
    1562:	c8 01       	movw	r24, r16
    1564:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    1568:	97 fd       	sbrc	r25, 7
    156a:	5c c0       	rjmp	.+184    	; 0x1624 <conv_int+0xf2>
    156c:	cd 7f       	andi	r28, 0xFD	; 253
    156e:	2c 2f       	mov	r18, r28
    1570:	20 73       	andi	r18, 0x30	; 48
    1572:	d1 f4       	brne	.+52     	; 0x15a8 <conv_int+0x76>
    1574:	80 33       	cpi	r24, 0x30	; 48
    1576:	c1 f4       	brne	.+48     	; 0x15a8 <conv_int+0x76>
    1578:	d1 50       	subi	r29, 0x01	; 1
    157a:	09 f4       	brne	.+2      	; 0x157e <conv_int+0x4c>
    157c:	3e c0       	rjmp	.+124    	; 0x15fa <conv_int+0xc8>
    157e:	c8 01       	movw	r24, r16
    1580:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    1584:	97 fd       	sbrc	r25, 7
    1586:	39 c0       	rjmp	.+114    	; 0x15fa <conv_int+0xc8>
    1588:	c2 60       	ori	r28, 0x02	; 2
    158a:	88 37       	cpi	r24, 0x78	; 120
    158c:	11 f0       	breq	.+4      	; 0x1592 <conv_int+0x60>
    158e:	88 35       	cpi	r24, 0x58	; 88
    1590:	49 f4       	brne	.+18     	; 0x15a4 <conv_int+0x72>
    1592:	c0 64       	ori	r28, 0x40	; 64
    1594:	d1 50       	subi	r29, 0x01	; 1
    1596:	89 f1       	breq	.+98     	; 0x15fa <conv_int+0xc8>
    1598:	c8 01       	movw	r24, r16
    159a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    159e:	97 ff       	sbrs	r25, 7
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <conv_int+0x76>
    15a2:	2b c0       	rjmp	.+86     	; 0x15fa <conv_int+0xc8>
    15a4:	c6 ff       	sbrs	r28, 6
    15a6:	c0 61       	ori	r28, 0x10	; 16
    15a8:	cc 24       	eor	r12, r12
    15aa:	dd 24       	eor	r13, r13
    15ac:	76 01       	movw	r14, r12
    15ae:	28 2f       	mov	r18, r24
    15b0:	20 53       	subi	r18, 0x30	; 48
    15b2:	28 30       	cpi	r18, 0x08	; 8
    15b4:	80 f0       	brcs	.+32     	; 0x15d6 <conv_int+0xa4>
    15b6:	c4 fd       	sbrc	r28, 4
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <conv_int+0x9a>
    15ba:	2a 30       	cpi	r18, 0x0A	; 10
    15bc:	60 f0       	brcs	.+24     	; 0x15d6 <conv_int+0xa4>
    15be:	c6 ff       	sbrs	r28, 6
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <conv_int+0x9a>
    15c2:	2f 7d       	andi	r18, 0xDF	; 223
    15c4:	32 2f       	mov	r19, r18
    15c6:	31 51       	subi	r19, 0x11	; 17
    15c8:	36 30       	cpi	r19, 0x06	; 6
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <conv_int+0xa2>
    15cc:	b8 01       	movw	r22, r16
    15ce:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <ungetc>
    15d2:	10 c0       	rjmp	.+32     	; 0x15f4 <conv_int+0xc2>
    15d4:	27 50       	subi	r18, 0x07	; 7
    15d6:	c7 01       	movw	r24, r14
    15d8:	b6 01       	movw	r22, r12
    15da:	4c 2f       	mov	r20, r28
    15dc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <mulacc>
    15e0:	6b 01       	movw	r12, r22
    15e2:	7c 01       	movw	r14, r24
    15e4:	c2 60       	ori	r28, 0x02	; 2
    15e6:	d1 50       	subi	r29, 0x01	; 1
    15e8:	59 f0       	breq	.+22     	; 0x1600 <conv_int+0xce>
    15ea:	c8 01       	movw	r24, r16
    15ec:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    15f0:	97 ff       	sbrs	r25, 7
    15f2:	dd cf       	rjmp	.-70     	; 0x15ae <conv_int+0x7c>
    15f4:	c1 fd       	sbrc	r28, 1
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <conv_int+0xce>
    15f8:	15 c0       	rjmp	.+42     	; 0x1624 <conv_int+0xf2>
    15fa:	cc 24       	eor	r12, r12
    15fc:	dd 24       	eor	r13, r13
    15fe:	76 01       	movw	r14, r12
    1600:	c7 ff       	sbrs	r28, 7
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <conv_int+0xe2>
    1604:	f0 94       	com	r15
    1606:	e0 94       	com	r14
    1608:	d0 94       	com	r13
    160a:	c0 94       	com	r12
    160c:	c1 1c       	adc	r12, r1
    160e:	d1 1c       	adc	r13, r1
    1610:	e1 1c       	adc	r14, r1
    1612:	f1 1c       	adc	r15, r1
    1614:	c5 01       	movw	r24, r10
    1616:	b7 01       	movw	r22, r14
    1618:	a6 01       	movw	r20, r12
    161a:	2c 2f       	mov	r18, r28
    161c:	0e 94 48 0a 	call	0x1490	; 0x1490 <putval>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <conv_int+0xf4>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	08 95       	ret

0000163c <conv_brk>:
    163c:	4f 92       	push	r4
    163e:	5f 92       	push	r5
    1640:	6f 92       	push	r6
    1642:	7f 92       	push	r7
    1644:	8f 92       	push	r8
    1646:	9f 92       	push	r9
    1648:	af 92       	push	r10
    164a:	bf 92       	push	r11
    164c:	cf 92       	push	r12
    164e:	df 92       	push	r13
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	a0 97       	sbiw	r28, 0x20	; 32
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	5c 01       	movw	r10, r24
    166e:	06 2f       	mov	r16, r22
    1670:	7a 01       	movw	r14, r20
    1672:	69 01       	movw	r12, r18
    1674:	fe 01       	movw	r30, r28
    1676:	31 96       	adiw	r30, 0x01	; 1
    1678:	80 e2       	ldi	r24, 0x20	; 32
    167a:	df 01       	movw	r26, r30
    167c:	1d 92       	st	X+, r1
    167e:	8a 95       	dec	r24
    1680:	e9 f7       	brne	.-6      	; 0x167c <conv_brk+0x40>
    1682:	d5 01       	movw	r26, r10
    1684:	13 96       	adiw	r26, 0x03	; 3
    1686:	1c 91       	ld	r17, X
    1688:	13 97       	sbiw	r26, 0x03	; 3
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4f 01       	movw	r8, r30
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	68 2e       	mov	r6, r24
    169a:	71 2c       	mov	r7, r1
    169c:	f6 01       	movw	r30, r12
    169e:	13 fd       	sbrc	r17, 3
    16a0:	55 91       	lpm	r21, Z+
    16a2:	13 ff       	sbrs	r17, 3
    16a4:	51 91       	ld	r21, Z+
    16a6:	6f 01       	movw	r12, r30
    16a8:	55 23       	and	r21, r21
    16aa:	09 f4       	brne	.+2      	; 0x16ae <conv_brk+0x72>
    16ac:	7b c0       	rjmp	.+246    	; 0x17a4 <conv_brk+0x168>
    16ae:	5e 35       	cpi	r21, 0x5E	; 94
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <conv_brk+0x7c>
    16b2:	61 15       	cp	r22, r1
    16b4:	71 05       	cpc	r23, r1
    16b6:	49 f1       	breq	.+82     	; 0x170a <conv_brk+0xce>
    16b8:	83 2f       	mov	r24, r19
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	86 17       	cp	r24, r22
    16be:	97 07       	cpc	r25, r23
    16c0:	3c f4       	brge	.+14     	; 0x16d0 <conv_brk+0x94>
    16c2:	5d 35       	cpi	r21, 0x5D	; 93
    16c4:	51 f1       	breq	.+84     	; 0x171a <conv_brk+0xde>
    16c6:	5d 32       	cpi	r21, 0x2D	; 45
    16c8:	19 f4       	brne	.+6      	; 0x16d0 <conv_brk+0x94>
    16ca:	44 23       	and	r20, r20
    16cc:	01 f1       	breq	.+64     	; 0x170e <conv_brk+0xd2>
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <conv_brk+0x9a>
    16d0:	44 23       	and	r20, r20
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <conv_brk+0x9a>
    16d4:	25 2f       	mov	r18, r21
    16d6:	85 2f       	mov	r24, r21
    16d8:	86 95       	lsr	r24
    16da:	86 95       	lsr	r24
    16dc:	86 95       	lsr	r24
    16de:	f4 01       	movw	r30, r8
    16e0:	e8 0f       	add	r30, r24
    16e2:	f1 1d       	adc	r31, r1
    16e4:	85 2f       	mov	r24, r21
    16e6:	87 70       	andi	r24, 0x07	; 7
    16e8:	23 01       	movw	r4, r6
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <conv_brk+0xb4>
    16ec:	44 0c       	add	r4, r4
    16ee:	55 1c       	adc	r5, r5
    16f0:	8a 95       	dec	r24
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <conv_brk+0xb0>
    16f4:	80 81       	ld	r24, Z
    16f6:	84 29       	or	r24, r4
    16f8:	80 83       	st	Z, r24
    16fa:	52 17       	cp	r21, r18
    16fc:	51 f0       	breq	.+20     	; 0x1712 <conv_brk+0xd6>
    16fe:	52 17       	cp	r21, r18
    1700:	10 f4       	brcc	.+4      	; 0x1706 <conv_brk+0xca>
    1702:	5f 5f       	subi	r21, 0xFF	; 255
    1704:	e8 cf       	rjmp	.-48     	; 0x16d6 <conv_brk+0x9a>
    1706:	51 50       	subi	r21, 0x01	; 1
    1708:	e6 cf       	rjmp	.-52     	; 0x16d6 <conv_brk+0x9a>
    170a:	31 e0       	ldi	r19, 0x01	; 1
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <conv_brk+0xd8>
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <conv_brk+0xd8>
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	c1 cf       	rjmp	.-126    	; 0x169c <conv_brk+0x60>
    171a:	44 23       	and	r20, r20
    171c:	19 f0       	breq	.+6      	; 0x1724 <conv_brk+0xe8>
    171e:	8e 81       	ldd	r24, Y+6	; 0x06
    1720:	80 62       	ori	r24, 0x20	; 32
    1722:	8e 83       	std	Y+6, r24	; 0x06
    1724:	33 23       	and	r19, r19
    1726:	51 f0       	breq	.+20     	; 0x173c <conv_brk+0x100>
    1728:	fe 01       	movw	r30, r28
    172a:	31 96       	adiw	r30, 0x01	; 1
    172c:	ce 01       	movw	r24, r28
    172e:	81 96       	adiw	r24, 0x21	; 33
    1730:	20 81       	ld	r18, Z
    1732:	20 95       	com	r18
    1734:	21 93       	st	Z+, r18
    1736:	e8 17       	cp	r30, r24
    1738:	f9 07       	cpc	r31, r25
    173a:	d1 f7       	brne	.-12     	; 0x1730 <conv_brk+0xf4>
    173c:	11 e0       	ldi	r17, 0x01	; 1
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <conv_brk+0x106>
    1740:	10 e0       	ldi	r17, 0x00	; 0
    1742:	c5 01       	movw	r24, r10
    1744:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    1748:	9c 01       	movw	r18, r24
    174a:	97 fd       	sbrc	r25, 7
    174c:	23 c0       	rjmp	.+70     	; 0x1794 <conv_brk+0x158>
    174e:	86 95       	lsr	r24
    1750:	86 95       	lsr	r24
    1752:	86 95       	lsr	r24
    1754:	e1 e0       	ldi	r30, 0x01	; 1
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	ec 0f       	add	r30, r28
    175a:	fd 1f       	adc	r31, r29
    175c:	e8 0f       	add	r30, r24
    175e:	f1 1d       	adc	r31, r1
    1760:	40 81       	ld	r20, Z
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	c9 01       	movw	r24, r18
    1766:	87 70       	andi	r24, 0x07	; 7
    1768:	90 70       	andi	r25, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <conv_brk+0x134>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <conv_brk+0x130>
    1774:	40 fd       	sbrc	r20, 0
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <conv_brk+0x146>
    1778:	c9 01       	movw	r24, r18
    177a:	b5 01       	movw	r22, r10
    177c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <ungetc>
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <conv_brk+0x158>
    1782:	e1 14       	cp	r14, r1
    1784:	f1 04       	cpc	r15, r1
    1786:	19 f0       	breq	.+6      	; 0x178e <conv_brk+0x152>
    1788:	d7 01       	movw	r26, r14
    178a:	2d 93       	st	X+, r18
    178c:	7d 01       	movw	r14, r26
    178e:	01 50       	subi	r16, 0x01	; 1
    1790:	b9 f6       	brne	.-82     	; 0x1740 <conv_brk+0x104>
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <conv_brk+0x15c>
    1794:	11 23       	and	r17, r17
    1796:	31 f4       	brne	.+12     	; 0x17a4 <conv_brk+0x168>
    1798:	e1 14       	cp	r14, r1
    179a:	f1 04       	cpc	r15, r1
    179c:	29 f0       	breq	.+10     	; 0x17a8 <conv_brk+0x16c>
    179e:	f7 01       	movw	r30, r14
    17a0:	10 82       	st	Z, r1
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <conv_brk+0x16c>
    17a4:	cc 24       	eor	r12, r12
    17a6:	dd 24       	eor	r13, r13
    17a8:	c6 01       	movw	r24, r12
    17aa:	a0 96       	adiw	r28, 0x20	; 32
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	9f 90       	pop	r9
    17cc:	8f 90       	pop	r8
    17ce:	7f 90       	pop	r7
    17d0:	6f 90       	pop	r6
    17d2:	5f 90       	pop	r5
    17d4:	4f 90       	pop	r4
    17d6:	08 95       	ret

000017d8 <vfscanf>:
    17d8:	5f 92       	push	r5
    17da:	6f 92       	push	r6
    17dc:	7f 92       	push	r7
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	0f 92       	push	r0
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	7c 01       	movw	r14, r24
    17fe:	5b 01       	movw	r10, r22
    1800:	3a 01       	movw	r6, r20
    1802:	fc 01       	movw	r30, r24
    1804:	17 82       	std	Z+7, r1	; 0x07
    1806:	16 82       	std	Z+6, r1	; 0x06
    1808:	99 24       	eor	r9, r9
    180a:	ef c0       	rjmp	.+478    	; 0x19ea <vfscanf+0x212>
    180c:	81 2f       	mov	r24, r17
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <isspace>
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	21 f0       	breq	.+8      	; 0x1820 <vfscanf+0x48>
    1818:	c7 01       	movw	r24, r14
    181a:	0e 94 80 0a 	call	0x1500	; 0x1500 <skip_spaces>
    181e:	e5 c0       	rjmp	.+458    	; 0x19ea <vfscanf+0x212>
    1820:	15 32       	cpi	r17, 0x25	; 37
    1822:	41 f4       	brne	.+16     	; 0x1834 <vfscanf+0x5c>
    1824:	f5 01       	movw	r30, r10
    1826:	03 fd       	sbrc	r16, 3
    1828:	35 91       	lpm	r19, Z+
    182a:	03 ff       	sbrs	r16, 3
    182c:	31 91       	ld	r19, Z+
    182e:	5f 01       	movw	r10, r30
    1830:	35 32       	cpi	r19, 0x25	; 37
    1832:	61 f4       	brne	.+24     	; 0x184c <vfscanf+0x74>
    1834:	c7 01       	movw	r24, r14
    1836:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    183a:	97 fd       	sbrc	r25, 7
    183c:	e2 c0       	rjmp	.+452    	; 0x1a02 <vfscanf+0x22a>
    183e:	18 17       	cp	r17, r24
    1840:	09 f4       	brne	.+2      	; 0x1844 <vfscanf+0x6c>
    1842:	d3 c0       	rjmp	.+422    	; 0x19ea <vfscanf+0x212>
    1844:	b7 01       	movw	r22, r14
    1846:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <ungetc>
    184a:	dd c0       	rjmp	.+442    	; 0x1a06 <vfscanf+0x22e>
    184c:	3a 32       	cpi	r19, 0x2A	; 42
    184e:	41 f4       	brne	.+16     	; 0x1860 <vfscanf+0x88>
    1850:	03 fd       	sbrc	r16, 3
    1852:	35 91       	lpm	r19, Z+
    1854:	03 ff       	sbrs	r16, 3
    1856:	31 91       	ld	r19, Z+
    1858:	5f 01       	movw	r10, r30
    185a:	55 24       	eor	r5, r5
    185c:	53 94       	inc	r5
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <vfscanf+0x8a>
    1860:	55 24       	eor	r5, r5
    1862:	88 24       	eor	r8, r8
    1864:	10 c0       	rjmp	.+32     	; 0x1886 <vfscanf+0xae>
    1866:	f2 e0       	ldi	r31, 0x02	; 2
    1868:	5f 2a       	or	r5, r31
    186a:	68 2d       	mov	r22, r8
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <mulacc>
    1878:	86 2e       	mov	r8, r22
    187a:	f5 01       	movw	r30, r10
    187c:	03 fd       	sbrc	r16, 3
    187e:	35 91       	lpm	r19, Z+
    1880:	03 ff       	sbrs	r16, 3
    1882:	31 91       	ld	r19, Z+
    1884:	5f 01       	movw	r10, r30
    1886:	23 2f       	mov	r18, r19
    1888:	20 53       	subi	r18, 0x30	; 48
    188a:	2a 30       	cpi	r18, 0x0A	; 10
    188c:	60 f3       	brcs	.-40     	; 0x1866 <vfscanf+0x8e>
    188e:	51 fe       	sbrs	r5, 1
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <vfscanf+0xc0>
    1892:	88 20       	and	r8, r8
    1894:	19 f4       	brne	.+6      	; 0x189c <vfscanf+0xc4>
    1896:	b7 c0       	rjmp	.+366    	; 0x1a06 <vfscanf+0x22e>
    1898:	88 24       	eor	r8, r8
    189a:	8a 94       	dec	r8
    189c:	38 36       	cpi	r19, 0x68	; 104
    189e:	19 f0       	breq	.+6      	; 0x18a6 <vfscanf+0xce>
    18a0:	3c 36       	cpi	r19, 0x6C	; 108
    18a2:	99 f4       	brne	.+38     	; 0x18ca <vfscanf+0xf2>
    18a4:	0a c0       	rjmp	.+20     	; 0x18ba <vfscanf+0xe2>
    18a6:	f5 01       	movw	r30, r10
    18a8:	03 fd       	sbrc	r16, 3
    18aa:	35 91       	lpm	r19, Z+
    18ac:	03 ff       	sbrs	r16, 3
    18ae:	31 91       	ld	r19, Z+
    18b0:	5f 01       	movw	r10, r30
    18b2:	38 36       	cpi	r19, 0x68	; 104
    18b4:	51 f4       	brne	.+20     	; 0x18ca <vfscanf+0xf2>
    18b6:	f8 e0       	ldi	r31, 0x08	; 8
    18b8:	5f 2a       	or	r5, r31
    18ba:	44 e0       	ldi	r20, 0x04	; 4
    18bc:	54 2a       	or	r5, r20
    18be:	f5 01       	movw	r30, r10
    18c0:	03 fd       	sbrc	r16, 3
    18c2:	35 91       	lpm	r19, Z+
    18c4:	03 ff       	sbrs	r16, 3
    18c6:	31 91       	ld	r19, Z+
    18c8:	5f 01       	movw	r10, r30
    18ca:	33 23       	and	r19, r19
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <vfscanf+0xf8>
    18ce:	9b c0       	rjmp	.+310    	; 0x1a06 <vfscanf+0x22e>
    18d0:	84 ee       	ldi	r24, 0xE4	; 228
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	63 2f       	mov	r22, r19
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	39 83       	std	Y+1, r19	; 0x01
    18da:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <strchr_P>
    18de:	39 81       	ldd	r19, Y+1	; 0x01
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <vfscanf+0x10e>
    18e4:	90 c0       	rjmp	.+288    	; 0x1a06 <vfscanf+0x22e>
    18e6:	85 2d       	mov	r24, r5
    18e8:	50 fc       	sbrc	r5, 0
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <vfscanf+0x124>
    18ec:	f3 01       	movw	r30, r6
    18ee:	00 81       	ld	r16, Z
    18f0:	11 81       	ldd	r17, Z+1	; 0x01
    18f2:	42 e0       	ldi	r20, 0x02	; 2
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	64 0e       	add	r6, r20
    18f8:	75 1e       	adc	r7, r21
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <vfscanf+0x128>
    18fc:	00 e0       	ldi	r16, 0x00	; 0
    18fe:	10 e0       	ldi	r17, 0x00	; 0
    1900:	3e 36       	cpi	r19, 0x6E	; 110
    1902:	51 f4       	brne	.+20     	; 0x1918 <vfscanf+0x140>
    1904:	f7 01       	movw	r30, r14
    1906:	46 81       	ldd	r20, Z+6	; 0x06
    1908:	57 81       	ldd	r21, Z+7	; 0x07
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	c8 01       	movw	r24, r16
    1910:	25 2d       	mov	r18, r5
    1912:	0e 94 48 0a 	call	0x1490	; 0x1490 <putval>
    1916:	69 c0       	rjmp	.+210    	; 0x19ea <vfscanf+0x212>
    1918:	33 36       	cpi	r19, 0x63	; 99
    191a:	91 f4       	brne	.+36     	; 0x1940 <vfscanf+0x168>
    191c:	81 fd       	sbrc	r24, 1
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <vfscanf+0x14c>
    1920:	88 24       	eor	r8, r8
    1922:	83 94       	inc	r8
    1924:	c7 01       	movw	r24, r14
    1926:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    192a:	97 fd       	sbrc	r25, 7
    192c:	6a c0       	rjmp	.+212    	; 0x1a02 <vfscanf+0x22a>
    192e:	01 15       	cp	r16, r1
    1930:	11 05       	cpc	r17, r1
    1932:	19 f0       	breq	.+6      	; 0x193a <vfscanf+0x162>
    1934:	f8 01       	movw	r30, r16
    1936:	81 93       	st	Z+, r24
    1938:	8f 01       	movw	r16, r30
    193a:	8a 94       	dec	r8
    193c:	99 f7       	brne	.-26     	; 0x1924 <vfscanf+0x14c>
    193e:	53 c0       	rjmp	.+166    	; 0x19e6 <vfscanf+0x20e>
    1940:	c7 01       	movw	r24, r14
    1942:	3b 35       	cpi	r19, 0x5B	; 91
    1944:	51 f4       	brne	.+20     	; 0x195a <vfscanf+0x182>
    1946:	68 2d       	mov	r22, r8
    1948:	a8 01       	movw	r20, r16
    194a:	95 01       	movw	r18, r10
    194c:	0e 94 1e 0b 	call	0x163c	; 0x163c <conv_brk>
    1950:	5c 01       	movw	r10, r24
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	09 f0       	breq	.+2      	; 0x1958 <vfscanf+0x180>
    1956:	47 c0       	rjmp	.+142    	; 0x19e6 <vfscanf+0x20e>
    1958:	41 c0       	rjmp	.+130    	; 0x19dc <vfscanf+0x204>
    195a:	39 83       	std	Y+1, r19	; 0x01
    195c:	0e 94 80 0a 	call	0x1500	; 0x1500 <skip_spaces>
    1960:	39 81       	ldd	r19, Y+1	; 0x01
    1962:	97 fd       	sbrc	r25, 7
    1964:	4e c0       	rjmp	.+156    	; 0x1a02 <vfscanf+0x22a>
    1966:	3f 36       	cpi	r19, 0x6F	; 111
    1968:	61 f1       	breq	.+88     	; 0x19c2 <vfscanf+0x1ea>
    196a:	30 37       	cpi	r19, 0x70	; 112
    196c:	28 f4       	brcc	.+10     	; 0x1978 <vfscanf+0x1a0>
    196e:	34 36       	cpi	r19, 0x64	; 100
    1970:	29 f1       	breq	.+74     	; 0x19bc <vfscanf+0x1e4>
    1972:	39 36       	cpi	r19, 0x69	; 105
    1974:	49 f5       	brne	.+82     	; 0x19c8 <vfscanf+0x1f0>
    1976:	2a c0       	rjmp	.+84     	; 0x19cc <vfscanf+0x1f4>
    1978:	33 37       	cpi	r19, 0x73	; 115
    197a:	19 f0       	breq	.+6      	; 0x1982 <vfscanf+0x1aa>
    197c:	35 37       	cpi	r19, 0x75	; 117
    197e:	21 f5       	brne	.+72     	; 0x19c8 <vfscanf+0x1f0>
    1980:	1d c0       	rjmp	.+58     	; 0x19bc <vfscanf+0x1e4>
    1982:	c7 01       	movw	r24, r14
    1984:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <fgetc>
    1988:	6c 01       	movw	r12, r24
    198a:	97 fd       	sbrc	r25, 7
    198c:	11 c0       	rjmp	.+34     	; 0x19b0 <vfscanf+0x1d8>
    198e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <isspace>
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	29 f0       	breq	.+10     	; 0x19a0 <vfscanf+0x1c8>
    1996:	c6 01       	movw	r24, r12
    1998:	b7 01       	movw	r22, r14
    199a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <ungetc>
    199e:	08 c0       	rjmp	.+16     	; 0x19b0 <vfscanf+0x1d8>
    19a0:	01 15       	cp	r16, r1
    19a2:	11 05       	cpc	r17, r1
    19a4:	19 f0       	breq	.+6      	; 0x19ac <vfscanf+0x1d4>
    19a6:	f8 01       	movw	r30, r16
    19a8:	c1 92       	st	Z+, r12
    19aa:	8f 01       	movw	r16, r30
    19ac:	8a 94       	dec	r8
    19ae:	49 f7       	brne	.-46     	; 0x1982 <vfscanf+0x1aa>
    19b0:	01 15       	cp	r16, r1
    19b2:	11 05       	cpc	r17, r1
    19b4:	c1 f0       	breq	.+48     	; 0x19e6 <vfscanf+0x20e>
    19b6:	f8 01       	movw	r30, r16
    19b8:	10 82       	st	Z, r1
    19ba:	15 c0       	rjmp	.+42     	; 0x19e6 <vfscanf+0x20e>
    19bc:	f0 e2       	ldi	r31, 0x20	; 32
    19be:	5f 2a       	or	r5, r31
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <vfscanf+0x1f4>
    19c2:	40 e1       	ldi	r20, 0x10	; 16
    19c4:	54 2a       	or	r5, r20
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <vfscanf+0x1f4>
    19c8:	50 e4       	ldi	r21, 0x40	; 64
    19ca:	55 2a       	or	r5, r21
    19cc:	c7 01       	movw	r24, r14
    19ce:	68 2d       	mov	r22, r8
    19d0:	a8 01       	movw	r20, r16
    19d2:	25 2d       	mov	r18, r5
    19d4:	0e 94 99 0a 	call	0x1532	; 0x1532 <conv_int>
    19d8:	88 23       	and	r24, r24
    19da:	29 f4       	brne	.+10     	; 0x19e6 <vfscanf+0x20e>
    19dc:	f7 01       	movw	r30, r14
    19de:	83 81       	ldd	r24, Z+3	; 0x03
    19e0:	80 73       	andi	r24, 0x30	; 48
    19e2:	79 f4       	brne	.+30     	; 0x1a02 <vfscanf+0x22a>
    19e4:	10 c0       	rjmp	.+32     	; 0x1a06 <vfscanf+0x22e>
    19e6:	50 fe       	sbrs	r5, 0
    19e8:	93 94       	inc	r9
    19ea:	f7 01       	movw	r30, r14
    19ec:	03 81       	ldd	r16, Z+3	; 0x03
    19ee:	f5 01       	movw	r30, r10
    19f0:	03 fd       	sbrc	r16, 3
    19f2:	15 91       	lpm	r17, Z+
    19f4:	03 ff       	sbrs	r16, 3
    19f6:	11 91       	ld	r17, Z+
    19f8:	5f 01       	movw	r10, r30
    19fa:	11 23       	and	r17, r17
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <vfscanf+0x228>
    19fe:	06 cf       	rjmp	.-500    	; 0x180c <vfscanf+0x34>
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfscanf+0x22e>
    1a02:	99 20       	and	r9, r9
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <vfscanf+0x234>
    1a06:	89 2d       	mov	r24, r9
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <vfscanf+0x238>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f ef       	ldi	r25, 0xFF	; 255
    1a10:	0f 90       	pop	r0
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	bf 90       	pop	r11
    1a24:	af 90       	pop	r10
    1a26:	9f 90       	pop	r9
    1a28:	8f 90       	pop	r8
    1a2a:	7f 90       	pop	r7
    1a2c:	6f 90       	pop	r6
    1a2e:	5f 90       	pop	r5
    1a30:	08 95       	ret

00001a32 <isspace>:
    1a32:	91 11       	cpse	r25, r1
    1a34:	0e c1       	rjmp	.+540    	; 0x1c52 <__ctype_isfalse>
    1a36:	80 32       	cpi	r24, 0x20	; 32
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <isspace+0xe>
    1a3a:	89 50       	subi	r24, 0x09	; 9
    1a3c:	85 50       	subi	r24, 0x05	; 5
    1a3e:	d0 f7       	brcc	.-12     	; 0x1a34 <isspace+0x2>
    1a40:	08 95       	ret

00001a42 <strchr_P>:
    1a42:	fc 01       	movw	r30, r24
    1a44:	05 90       	lpm	r0, Z+
    1a46:	06 16       	cp	r0, r22
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <strchr_P+0x10>
    1a4a:	00 20       	and	r0, r0
    1a4c:	d9 f7       	brne	.-10     	; 0x1a44 <strchr_P+0x2>
    1a4e:	c0 01       	movw	r24, r0
    1a50:	08 95       	ret
    1a52:	31 97       	sbiw	r30, 0x01	; 1
    1a54:	cf 01       	movw	r24, r30
    1a56:	08 95       	ret

00001a58 <strnlen_P>:
    1a58:	fc 01       	movw	r30, r24
    1a5a:	05 90       	lpm	r0, Z+
    1a5c:	61 50       	subi	r22, 0x01	; 1
    1a5e:	70 40       	sbci	r23, 0x00	; 0
    1a60:	01 10       	cpse	r0, r1
    1a62:	d8 f7       	brcc	.-10     	; 0x1a5a <strnlen_P+0x2>
    1a64:	80 95       	com	r24
    1a66:	90 95       	com	r25
    1a68:	8e 0f       	add	r24, r30
    1a6a:	9f 1f       	adc	r25, r31
    1a6c:	08 95       	ret

00001a6e <strnlen>:
    1a6e:	fc 01       	movw	r30, r24
    1a70:	61 50       	subi	r22, 0x01	; 1
    1a72:	70 40       	sbci	r23, 0x00	; 0
    1a74:	01 90       	ld	r0, Z+
    1a76:	01 10       	cpse	r0, r1
    1a78:	d8 f7       	brcc	.-10     	; 0x1a70 <strnlen+0x2>
    1a7a:	80 95       	com	r24
    1a7c:	90 95       	com	r25
    1a7e:	8e 0f       	add	r24, r30
    1a80:	9f 1f       	adc	r25, r31
    1a82:	08 95       	ret

00001a84 <fgetc>:
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	ec 01       	movw	r28, r24
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	20 ff       	sbrs	r18, 0
    1a8e:	35 c0       	rjmp	.+106    	; 0x1afa <fgetc+0x76>
    1a90:	26 ff       	sbrs	r18, 6
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <fgetc+0x22>
    1a94:	2f 7b       	andi	r18, 0xBF	; 191
    1a96:	2b 83       	std	Y+3, r18	; 0x03
    1a98:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	9f 83       	std	Y+7, r25	; 0x07
    1aa0:	8e 83       	std	Y+6, r24	; 0x06
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 c0       	rjmp	.+80     	; 0x1af6 <fgetc+0x72>
    1aa6:	22 ff       	sbrs	r18, 2
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <fgetc+0x44>
    1aaa:	e8 81       	ld	r30, Y
    1aac:	f9 81       	ldd	r31, Y+1	; 0x01
    1aae:	80 81       	ld	r24, Z
    1ab0:	99 27       	eor	r25, r25
    1ab2:	87 fd       	sbrc	r24, 7
    1ab4:	90 95       	com	r25
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <fgetc+0x3c>
    1aba:	20 62       	ori	r18, 0x20	; 32
    1abc:	2b 83       	std	Y+3, r18	; 0x03
    1abe:	1d c0       	rjmp	.+58     	; 0x1afa <fgetc+0x76>
    1ac0:	31 96       	adiw	r30, 0x01	; 1
    1ac2:	f9 83       	std	Y+1, r31	; 0x01
    1ac4:	e8 83       	st	Y, r30
    1ac6:	11 c0       	rjmp	.+34     	; 0x1aea <fgetc+0x66>
    1ac8:	ea 85       	ldd	r30, Y+10	; 0x0a
    1aca:	fb 85       	ldd	r31, Y+11	; 0x0b
    1acc:	ce 01       	movw	r24, r28
    1ace:	19 95       	eicall
    1ad0:	97 ff       	sbrs	r25, 7
    1ad2:	0b c0       	rjmp	.+22     	; 0x1aea <fgetc+0x66>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    1ada:	93 07       	cpc	r25, r19
    1adc:	11 f4       	brne	.+4      	; 0x1ae2 <fgetc+0x5e>
    1ade:	80 e1       	ldi	r24, 0x10	; 16
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <fgetc+0x60>
    1ae2:	80 e2       	ldi	r24, 0x20	; 32
    1ae4:	82 2b       	or	r24, r18
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    1ae8:	08 c0       	rjmp	.+16     	; 0x1afa <fgetc+0x76>
    1aea:	2e 81       	ldd	r18, Y+6	; 0x06
    1aec:	3f 81       	ldd	r19, Y+7	; 0x07
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	3f 83       	std	Y+7, r19	; 0x07
    1af4:	2e 83       	std	Y+6, r18	; 0x06
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <fgetc+0x7a>
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	9f ef       	ldi	r25, 0xFF	; 255
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <fputc>:
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	8c 01       	movw	r16, r24
    1b0e:	eb 01       	movw	r28, r22
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	81 ff       	sbrs	r24, 1
    1b14:	1b c0       	rjmp	.+54     	; 0x1b4c <fputc+0x48>
    1b16:	82 ff       	sbrs	r24, 2
    1b18:	0d c0       	rjmp	.+26     	; 0x1b34 <fputc+0x30>
    1b1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	9d 81       	ldd	r25, Y+5	; 0x05
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	64 f4       	brge	.+24     	; 0x1b40 <fputc+0x3c>
    1b28:	e8 81       	ld	r30, Y
    1b2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2c:	01 93       	st	Z+, r16
    1b2e:	f9 83       	std	Y+1, r31	; 0x01
    1b30:	e8 83       	st	Y, r30
    1b32:	06 c0       	rjmp	.+12     	; 0x1b40 <fputc+0x3c>
    1b34:	e8 85       	ldd	r30, Y+8	; 0x08
    1b36:	f9 85       	ldd	r31, Y+9	; 0x09
    1b38:	80 2f       	mov	r24, r16
    1b3a:	19 95       	eicall
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	31 f4       	brne	.+12     	; 0x1b4c <fputc+0x48>
    1b40:	8e 81       	ldd	r24, Y+6	; 0x06
    1b42:	9f 81       	ldd	r25, Y+7	; 0x07
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	9f 83       	std	Y+7, r25	; 0x07
    1b48:	8e 83       	std	Y+6, r24	; 0x06
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <fputc+0x4c>
    1b4c:	0f ef       	ldi	r16, 0xFF	; 255
    1b4e:	1f ef       	ldi	r17, 0xFF	; 255
    1b50:	c8 01       	movw	r24, r16
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <ungetc>:
    1b5c:	fb 01       	movw	r30, r22
    1b5e:	23 81       	ldd	r18, Z+3	; 0x03
    1b60:	20 ff       	sbrs	r18, 0
    1b62:	13 c0       	rjmp	.+38     	; 0x1b8a <ungetc+0x2e>
    1b64:	26 fd       	sbrc	r18, 6
    1b66:	11 c0       	rjmp	.+34     	; 0x1b8a <ungetc+0x2e>
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6c:	93 07       	cpc	r25, r19
    1b6e:	81 f0       	breq	.+32     	; 0x1b90 <ungetc+0x34>
    1b70:	82 83       	std	Z+2, r24	; 0x02
    1b72:	92 2f       	mov	r25, r18
    1b74:	90 64       	ori	r25, 0x40	; 64
    1b76:	9f 7d       	andi	r25, 0xDF	; 223
    1b78:	93 83       	std	Z+3, r25	; 0x03
    1b7a:	26 81       	ldd	r18, Z+6	; 0x06
    1b7c:	37 81       	ldd	r19, Z+7	; 0x07
    1b7e:	21 50       	subi	r18, 0x01	; 1
    1b80:	30 40       	sbci	r19, 0x00	; 0
    1b82:	37 83       	std	Z+7, r19	; 0x07
    1b84:	26 83       	std	Z+6, r18	; 0x06
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	08 95       	ret
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	08 95       	ret
    1b90:	8f ef       	ldi	r24, 0xFF	; 255
    1b92:	9f ef       	ldi	r25, 0xFF	; 255
    1b94:	08 95       	ret

00001b96 <__ultoa_invert>:
    1b96:	fa 01       	movw	r30, r20
    1b98:	aa 27       	eor	r26, r26
    1b9a:	28 30       	cpi	r18, 0x08	; 8
    1b9c:	51 f1       	breq	.+84     	; 0x1bf2 <__ultoa_invert+0x5c>
    1b9e:	20 31       	cpi	r18, 0x10	; 16
    1ba0:	81 f1       	breq	.+96     	; 0x1c02 <__ultoa_invert+0x6c>
    1ba2:	e8 94       	clt
    1ba4:	6f 93       	push	r22
    1ba6:	6e 7f       	andi	r22, 0xFE	; 254
    1ba8:	6e 5f       	subi	r22, 0xFE	; 254
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	8f 4f       	sbci	r24, 0xFF	; 255
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	af 4f       	sbci	r26, 0xFF	; 255
    1bb2:	b1 e0       	ldi	r27, 0x01	; 1
    1bb4:	3e d0       	rcall	.+124    	; 0x1c32 <__ultoa_invert+0x9c>
    1bb6:	b4 e0       	ldi	r27, 0x04	; 4
    1bb8:	3c d0       	rcall	.+120    	; 0x1c32 <__ultoa_invert+0x9c>
    1bba:	67 0f       	add	r22, r23
    1bbc:	78 1f       	adc	r23, r24
    1bbe:	89 1f       	adc	r24, r25
    1bc0:	9a 1f       	adc	r25, r26
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	68 0f       	add	r22, r24
    1bc6:	79 1f       	adc	r23, r25
    1bc8:	8a 1f       	adc	r24, r26
    1bca:	91 1d       	adc	r25, r1
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	6a 0f       	add	r22, r26
    1bd0:	71 1d       	adc	r23, r1
    1bd2:	81 1d       	adc	r24, r1
    1bd4:	91 1d       	adc	r25, r1
    1bd6:	a1 1d       	adc	r26, r1
    1bd8:	20 d0       	rcall	.+64     	; 0x1c1a <__ultoa_invert+0x84>
    1bda:	09 f4       	brne	.+2      	; 0x1bde <__ultoa_invert+0x48>
    1bdc:	68 94       	set
    1bde:	3f 91       	pop	r19
    1be0:	2a e0       	ldi	r18, 0x0A	; 10
    1be2:	26 9f       	mul	r18, r22
    1be4:	11 24       	eor	r1, r1
    1be6:	30 19       	sub	r19, r0
    1be8:	30 5d       	subi	r19, 0xD0	; 208
    1bea:	31 93       	st	Z+, r19
    1bec:	de f6       	brtc	.-74     	; 0x1ba4 <__ultoa_invert+0xe>
    1bee:	cf 01       	movw	r24, r30
    1bf0:	08 95       	ret
    1bf2:	46 2f       	mov	r20, r22
    1bf4:	47 70       	andi	r20, 0x07	; 7
    1bf6:	40 5d       	subi	r20, 0xD0	; 208
    1bf8:	41 93       	st	Z+, r20
    1bfa:	b3 e0       	ldi	r27, 0x03	; 3
    1bfc:	0f d0       	rcall	.+30     	; 0x1c1c <__ultoa_invert+0x86>
    1bfe:	c9 f7       	brne	.-14     	; 0x1bf2 <__ultoa_invert+0x5c>
    1c00:	f6 cf       	rjmp	.-20     	; 0x1bee <__ultoa_invert+0x58>
    1c02:	46 2f       	mov	r20, r22
    1c04:	4f 70       	andi	r20, 0x0F	; 15
    1c06:	40 5d       	subi	r20, 0xD0	; 208
    1c08:	4a 33       	cpi	r20, 0x3A	; 58
    1c0a:	18 f0       	brcs	.+6      	; 0x1c12 <__ultoa_invert+0x7c>
    1c0c:	49 5d       	subi	r20, 0xD9	; 217
    1c0e:	31 fd       	sbrc	r19, 1
    1c10:	40 52       	subi	r20, 0x20	; 32
    1c12:	41 93       	st	Z+, r20
    1c14:	02 d0       	rcall	.+4      	; 0x1c1a <__ultoa_invert+0x84>
    1c16:	a9 f7       	brne	.-22     	; 0x1c02 <__ultoa_invert+0x6c>
    1c18:	ea cf       	rjmp	.-44     	; 0x1bee <__ultoa_invert+0x58>
    1c1a:	b4 e0       	ldi	r27, 0x04	; 4
    1c1c:	a6 95       	lsr	r26
    1c1e:	97 95       	ror	r25
    1c20:	87 95       	ror	r24
    1c22:	77 95       	ror	r23
    1c24:	67 95       	ror	r22
    1c26:	ba 95       	dec	r27
    1c28:	c9 f7       	brne	.-14     	; 0x1c1c <__ultoa_invert+0x86>
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	61 05       	cpc	r22, r1
    1c2e:	71 05       	cpc	r23, r1
    1c30:	08 95       	ret
    1c32:	9b 01       	movw	r18, r22
    1c34:	ac 01       	movw	r20, r24
    1c36:	0a 2e       	mov	r0, r26
    1c38:	06 94       	lsr	r0
    1c3a:	57 95       	ror	r21
    1c3c:	47 95       	ror	r20
    1c3e:	37 95       	ror	r19
    1c40:	27 95       	ror	r18
    1c42:	ba 95       	dec	r27
    1c44:	c9 f7       	brne	.-14     	; 0x1c38 <__ultoa_invert+0xa2>
    1c46:	62 0f       	add	r22, r18
    1c48:	73 1f       	adc	r23, r19
    1c4a:	84 1f       	adc	r24, r20
    1c4c:	95 1f       	adc	r25, r21
    1c4e:	a0 1d       	adc	r26, r0
    1c50:	08 95       	ret

00001c52 <__ctype_isfalse>:
    1c52:	99 27       	eor	r25, r25
    1c54:	88 27       	eor	r24, r24

00001c56 <__ctype_istrue>:
    1c56:	08 95       	ret

00001c58 <_exit>:
    1c58:	f8 94       	cli

00001c5a <__stop_program>:
    1c5a:	ff cf       	rjmp	.-2      	; 0x1c5a <__stop_program>
